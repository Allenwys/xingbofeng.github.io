<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Encounter&#39;s Blog</title>
  <subtitle>encounterxingbofeng@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xingbofeng.github.io/"/>
  <updated>2017-01-31T07:06:51.385Z</updated>
  <id>http://xingbofeng.github.io/</id>
  
  <author>
    <name>Encounter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拥抱未来的CSS布局方式——grid与flex介绍（flex相关API介绍）</title>
    <link href="http://xingbofeng.github.io/2017/01/31/%E6%8B%A5%E6%8A%B1%E6%9C%AA%E6%9D%A5%E7%9A%84CSS%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94grid%E4%B8%8Eflex%E4%BB%8B%E7%BB%8D%EF%BC%88flex%E7%9B%B8%E5%85%B3API%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
    <id>http://xingbofeng.github.io/2017/01/31/拥抱未来的CSS布局方式——grid与flex介绍（flex相关API介绍）/</id>
    <published>2017-01-31T05:13:00.000Z</published>
    <updated>2017-01-31T07:06:51.385Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文里主要讲述了<code>grid</code>与<code>flex</code>中，网格与轴线的基本概念，了解了这些基本概念之后，我们可以更轻松地对布局方式进行研究，这一篇文章主要描述<code>flex</code>布局中，容器与项目的相关API。</p>
<a id="more"></a>
<p>本篇文章是依据我个人的所学所知，且部分参考国内外优秀的<code>flex布局</code>的相关文献总结而得。<br>其参考资料有：</p>
<ul>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Complete Guide to Flexbox</a></li>
<li><a href="http://caibaojian.com/flexbox-guide.html" target="_blank" rel="external">flexbox-CSS3弹性盒模型flexbox完整版教程</a></li>
<li><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html" target="_blank" rel="external">w3cplus：一个完整的Flexbox指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a><h2 id="定义在容器的属性"><a href="#定义在容器的属性" class="headerlink" title="定义在容器的属性"></a>定义在容器的属性</h2><h3 id="disaplay"><a href="#disaplay" class="headerlink" title="disaplay"></a>disaplay</h3><code>display</code>属性定义了一个弹性盒子容器，容器是展现为行内或块状由所给定的值而决定，此时，他的所有子元素进入flex文档流，称为伸缩项目。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>定义行内容器的flex布局：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">display</span>:inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于safiri浏览器，需要加上<code>webkit</code>前缀（以前遇到过，深坑啊！）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">display</span>:webkit-flex;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外，请注意以下两点：</p>
<ul>
<li>CSS的columns在伸缩容器上没有效果。</li>
<li>float、clear和vertical-align在伸缩项目上没有效果。<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><code>flex-direction</code>定义主轴的方向。因主轴是二维空间的矢量，因此<code>flex-direction</code>有四个值，分别代表了x轴与y轴的正方向与反方向。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-5.jpg" alt="image"></p>
<ul>
<li><code>row</code>为默认值，代表主轴为水平轴，方向为从左到右。</li>
<li><code>row-reverse</code>代表主轴为水平轴，方向为从右到左。</li>
<li><code>column</code>代表主轴为垂直轴，方向为从上到下。</li>
<li><code>column-reverse</code>代表主轴为垂直轴，方向为从下到上。</li>
</ul>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code>定义<code>flex项目</code>是否换行显示。默认情况下，<code>flex项目</code>会尽可能地显示在一行当中，即默认值为<code>nowarp</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-6.jpg" alt="image"></p>
<ul>
<li><code>nowrap</code>为默认值，代表不换行。</li>
<li><code>wrap</code>代表换行，但默认为第一行在上方。</li>
<li><code>wrap-reverse</code>代表换行，但默认为第一行在下方。</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code>是<code>flex-direction</code>和<code>flex-wrap</code>的合并写法，它同时定义了<code>主轴方向</code>与容器内项目的<code>换行方式</code>，其默认值为<code>row nowarp</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">flex-flow</span>: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code>定义了项目在主轴上的对齐方式，但请注意：<code>justify-content</code>只会在主轴项目仍具有剩余空间时才会起作用。</p>
<p>利用此API，我们便能很容易地实现：<code>等分宽高</code>了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-7.jpg" alt="image"></p>
<ul>
<li><code>flex-start</code>为默认值，代表项目在主轴上向起始方向对齐。</li>
<li><code>flex-end</code>代表项目在主轴上向结束方向对齐。</li>
<li><code>center</code>代表项目在主轴上居中对齐。</li>
<li><code>space-between</code>代表项目在主轴上两端对齐，但第一个项目在主轴的起始位置，最后一个项目在主轴的结束位置。</li>
<li><code>space-around</code>代表项目在主轴上等分间距，但第一个项目与最后一个项目距离主轴的两端保持一定的距离，这个距离为项目之间间距的1/2。</li>
</ul>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>定义了项目在交叉轴上的对齐方式。可以把它想像成交叉轴的<code>justify-content</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-8.jpg" alt="image"></p>
<ul>
<li><code>flex-start</code>代表项目在交叉轴上向起始方向对齐。</li>
<li><code>flex-end</code>代表项目在交叉轴上向结束方向对齐。</li>
<li><code>center</code>代表项目在交叉轴上居中对齐。</li>
<li><code>baseline</code>代表项目在交叉轴上向项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>代表项目在交叉轴上拉伸对齐。</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>当我们把容器的<code>flex-warp</code>的值设置为<code>warp</code>或者<code>warp-reverse</code>时，若项目不能在一根主轴上显示，容器便会出现多根主轴。</p>
<p>此时便需要一个值来定义多根平行轴线的对齐方式，这个值便是<code>align-content</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-9.jpg" alt="image"></p>
<ul>
<li><code>flex-start</code>代表多条平行的主轴在交叉轴的起始位置对齐。</li>
<li><code>flex-end</code>代表多条平行的主轴在交叉轴的结束位置对齐。</li>
<li><code>center</code>代表多条平行的主轴在交叉轴上居中对齐。</li>
<li><code>space-between</code>代表多条平行的主轴在交叉轴上两端对齐，但第一条主轴在交叉轴的起始位置，最后一条主轴在交叉轴的结束位置。</li>
<li><code>space-around</code>代表多条平行的主轴在交叉轴上等分间距，但第一条主轴与最后一条主轴距离主轴的两端保持一定的距离，这个距离为其它主轴之间间距的1/2。</li>
<li><code>stretch</code>为默认值，代表多条平行的主轴拉伸对齐。</li>
</ul>
<h2 id="定义在项目上的属性"><a href="#定义在项目上的属性" class="headerlink" title="定义在项目上的属性"></a>定义在项目上的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code>定义项目在主轴上的排列顺序。数值越小，排列越靠前，默认值为0。</p>
<p>在默认情况下，项目在主轴上的排列顺序是依据它们在<code>HTML文档</code>中出现的先后顺序排列的。因我们可以通过控制文档流的先后顺序，故此API的使用情况不太普遍。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-10.jpg" alt="image"></p>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code>定义了项目的放大比例。如果所有伸缩项目的<code>flex-grow</code>设置了<code>1</code>，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了<code>flex-grow</code>值为<code>2</code>，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的<code>两倍</code>。</p>
<p>注意：负值对该属性仍然生效。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-11.jpg" alt="image"></p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>类似于<code>flex-grow</code>，<code>flex-shrink</code>定义了项目的缩小比例。其默认值为<code>1</code>。</p>
<p>如果所有项目的<code>flex-shrink</code>都为<code>1</code>，当空间不足时，都将等比例缩小。</p>
<p>如果所有项目都为<code>1</code>，但其中一个项目的<code>flex-shrink</code>为<code>0</code>，即代表空间不足时，该项目缩小0倍，即为不缩小。</p>
<p>注意：负值对该属性不起作用。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-12.jpg" alt="image"></p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>利用<code>flex-basis</code>，我们可以很容易实现页面布局中的常见问题：两栏/三栏布局。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">	<span class="attribute">display</span>: flex;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: yellow;</div><div class="line">	<span class="attribute">flex-basis</span>: <span class="number">200px</span>;</div><div class="line">	<span class="comment">/* flex-basis定义该项目在分配主轴空间之前提前获得200px的空间 */</span></div><div class="line">	<span class="attribute">flex-grow</span>: <span class="number">0</span>;</div><div class="line">	<span class="comment">/* flex-grow定义该项目不分配剩余空间 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: green;</div><div class="line">	<span class="attribute">flex-grow</span>: <span class="number">1</span>;</div><div class="line">	<span class="comment">/* flex-grow定义main占满剩余空间 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-13.jpg" alt="image"></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>是<code>flex-grow</code>、<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code>定义了单个项目上在交叉轴的对齐方式。<br>其默认值为继承容器的<code>align-items</code>属性。</p>
<p>具体的属性值参阅<code>align-items</code>的属性值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-14.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博文里主要讲述了&lt;code&gt;grid&lt;/code&gt;与&lt;code&gt;flex&lt;/code&gt;中，网格与轴线的基本概念，了解了这些基本概念之后，我们可以更轻松地对布局方式进行研究，这一篇文章主要描述&lt;code&gt;flex&lt;/code&gt;布局中，容器与项目的相关API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="css" scheme="http://xingbofeng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>拥抱未来的CSS布局方式——grid与flex介绍（轴线与网格）</title>
    <link href="http://xingbofeng.github.io/2017/01/29/%E6%8B%A5%E6%8A%B1%E6%9C%AA%E6%9D%A5%E7%9A%84CSS%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94grid%E4%B8%8Eflex%E4%BB%8B%E7%BB%8D%EF%BC%88%E8%BD%B4%E7%BA%BF%E4%B8%8E%E7%BD%91%E6%A0%BC%EF%BC%89/"/>
    <id>http://xingbofeng.github.io/2017/01/29/拥抱未来的CSS布局方式——grid与flex介绍（轴线与网格）/</id>
    <published>2017-01-29T06:28:00.000Z</published>
    <updated>2017-01-29T17:20:05.936Z</updated>
    
    <content type="html"><![CDATA[<p>最近在深入研究CSS的布局方式的过程中的一些总结。主要是对于CSS3标准里的<code>flex</code>布局方式CSS4草案中的<code>grid</code>布局方式进行一些总结。</p>
<p>由于内容还是蛮多的，所以分成几篇文章归纳。</p>
<p>而<strong>grid与flex介绍（轴线与网格）</strong>这篇文章着重于介绍<code>grid</code>与<code>flex</code>布局的由来，以及一些初级的储备知识。</p>
<a id="more"></a>
<h3 id="为什么想写这系列的博文？"><a href="#为什么想写这系列的博文？" class="headerlink" title="为什么想写这系列的博文？"></a>为什么想写这系列的博文？</h3><p>现今的前端开发中，页面布局主要以基于盒模型的布局方式，也就是常说的<code>div</code>+<code>css</code>。<br>我们通过<code>display</code>、<code>float</code>、<code>position</code>布局页面。</p>
<p>传统页面布局过于繁琐，代码冗余，一些功能不易于简单实现：例如垂直居中、等分宽高等。</p>
<h3 id="为什么是“拥抱未来”？"><a href="#为什么是“拥抱未来”？" class="headerlink" title="为什么是“拥抱未来”？"></a>为什么是“拥抱未来”？</h3><p><code>flex</code>布局又称<code>弹性盒子</code>布局，它于2009年提出，并已经进入CSS3标准。现今虽已得到众高端浏览器厂商的支持，但由于IE10以下的用户基数仍然很大，大部分Web开发者并不能够真正在某种程度上大胆尝试这种新型布局理念。</p>
<p>而<code>grid</code>布局则更加新奇了，甚至说到今天，连chrome这样的现代化浏览器都没有支持它。</p>
<p>那为什么要谈它呢？</p>
<p><code>grid</code>布局是2010年由<code>Microsoft</code>提出的，<strong>目前已经成为W3C候选标准</strong>。虽然说我们依旧不能够通过正常方式使用这样的布局方式，但我们还是通过浏览器的设置可以看到相关的效果。比如Chrome浏览器中通过<code>chrome://flags</code>打开Chrome浏览器实验网络平台功能。，将<code>experimental web platform features</code>选项设置为<code>enable</code>，这个方法同样适用于 Opera，对于Oprea来说，地址为<code>opera://flags</code>。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-1.jpg" alt="image"></p>
<p>打开后，我们将能够在浏览器中正常使用<code>grid</code>的布局方式了。</p>
<p>若要在项目当中使用<code>grid</code>布局方式，则可能需要安装<a href="https://github.com/FremyCompany/css-grid-polyfill" target="_blank" rel="external">css-grid-polyfill</a>。</p>
<h3 id="容器的声明"><a href="#容器的声明" class="headerlink" title="容器的声明"></a>容器的声明</h3><p>任何容器，我们均可以将它指定为<code>flex</code>布局方式或<code>grid</code>布局方式。<br>我们通过<code>display: flex;</code>或<code>display: grid;</code>，将容器声明为弹性盒子布局或网格布局方式。</p>
<p>行内元素同样可以使用<code>flex</code>布局方式或<code>grid</code>布局方式。</p>
<p>我们通过<code>display: inline-flex;</code>或<code>display: inline-grid;</code>声明行内元素的弹性盒子布局或网格布局方式。</p>
<h3 id="flex与grid的轴线与网格"><a href="#flex与grid的轴线与网格" class="headerlink" title="flex与grid的轴线与网格"></a>flex与grid的轴线与网格</h3><h4 id="flex的轴线"><a href="#flex的轴线" class="headerlink" title="flex的轴线"></a>flex的轴线</h4><p>以下内容参考至阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">flex布局教程</a>：</p>
<p>采用<code>flex</code>布局的元素，称为<strong>flex容器（flex container）</strong>。它的所有子元素自动成为容器成员，称为<strong>flex项目（flex item）</strong>。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/grid-flex-2.png" alt="image"></p>
<p>容器默认存在两根轴：水平的<strong>主轴（main axis）</strong>和垂直的<strong>交叉轴（cross axis）</strong>。主轴的开始位置（与边框的交叉点）叫做<strong>main start</strong>，结束位置叫做<strong>main end</strong>；交叉轴的开始位置叫做<strong>cross start</strong>，结束位置叫做<strong>cross end</strong>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<strong>main size</strong>，占据的交叉轴空间叫做<strong>cross size</strong>。</p>
<h4 id="grid的网格线与网格"><a href="#grid的网格线与网格" class="headerlink" title="grid的网格线与网格"></a>grid的网格线与网格</h4><p>类似于<code>flex</code>布局方式，<code>grid</code>布局中最基本的单位就是网格线与网格了。</p>
<p>采用<code>grid</code>布局的元素，称为<strong>grid容器（grid container）</strong>。它的所有子元素自动成为容器成员，称为<strong>grid项目（grid item）</strong>。</p>
<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。</p>
<p>每条网格线具有默认的编号，从左到右和从上到下分别为1,2,3……<br><img src="http://oczira72b.bkt.clouddn.com/grid-flex-3.jpg" alt="image"></p>
<p>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，如图所示，网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/flex-grid-4.png" alt="image"></p>
<p>有了这些基本概念，我们能更好的地理解<code>flex</code>与<code>gird</code>布局了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在深入研究CSS的布局方式的过程中的一些总结。主要是对于CSS3标准里的&lt;code&gt;flex&lt;/code&gt;布局方式CSS4草案中的&lt;code&gt;grid&lt;/code&gt;布局方式进行一些总结。&lt;/p&gt;
&lt;p&gt;由于内容还是蛮多的，所以分成几篇文章归纳。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;grid与flex介绍（轴线与网格）&lt;/strong&gt;这篇文章着重于介绍&lt;code&gt;grid&lt;/code&gt;与&lt;code&gt;flex&lt;/code&gt;布局的由来，以及一些初级的储备知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="css" scheme="http://xingbofeng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>300行代码写一个音乐播放器小程序及网易云音乐API介绍</title>
    <link href="http://xingbofeng.github.io/2017/01/25/300%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E4%B8%AA%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90API%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xingbofeng.github.io/2017/01/25/300行代码写一个音乐播放器小程序及网易云音乐API介绍/</id>
    <published>2017-01-25T06:44:00.000Z</published>
    <updated>2017-01-25T14:41:37.277Z</updated>
    
    <content type="html"><![CDATA[<p>自己写的渣代码被segmentfault官方推荐了，所以补发到自己博客里，还有一些东西需要完善的地方。</p>
<a id="more"></a>
<p><img src="http://oczira72b.bkt.clouddn.com/sfxiaochengxu.png" alt="image"></p>
<p>刚进公司不久，因为公司部门年后业务拓展的关系，可能在年后会被分配到公司的微信公众号组做小程序相关的开发工作，因此写了个微信小程序<a href="https://github.com/xingbofeng/wx-audio" target="_blank" rel="external">wx-audio</a>踩坑。目前还有一些功能没有写完：如返回多首歌曲、控制播放时间等，可能在年后继续完成。</p>
<p>项目主要是微信小程序、也用到了node、express等。</p>
<p><del>时间来不及了，快上车！</del></p>
<p><strong>先上一个运行效果吧!</strong></p>
<p><img src="https://segmentfault.com/img/bVIBxg?w=396&amp;h=675" alt="image"></p>
<h3 id="搭建node中间层"><a href="#搭建node中间层" class="headerlink" title="搭建node中间层"></a>搭建node中间层</h3><p>最近对搭建node中间层也有一定的思考，可见我最近刚写的文章：<a href="http://angryzhangzhe.cn/post/nodejs-minddle.html" target="_blank" rel="external">NodeJS搭建中间层</a></p>
<p>之所以选择NodeJS搭建中间层服务，主要是为了格式化参数、合并请求、节省性能方面所考虑的，现今大公司基本都采用node作为微服务的方式进行项目搭建。具体原因分析可自行谷歌或百度。</p>
<p>首先在node层对后端发起http请求：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http.js</span></div><div class="line"><span class="keyword">var</span> formatURL = <span class="built_in">require</span>(<span class="string">"./formatURL.js"</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">const</span> POSThttp = <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> body = <span class="string">""</span>;</div><div class="line">    <span class="comment">// http模块拿到真实后台api的数据</span></div><div class="line">    http.get(formatURL(request.body.musicname), <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      res.on(<span class="string">"data"</span>, (data) =&gt; &#123;</div><div class="line">        body += data;</div><div class="line">      &#125;).on(<span class="string">"end"</span>, () =&gt; &#123;</div><div class="line">        <span class="comment">// 格式化</span></div><div class="line">        <span class="keyword">const</span> &#123;</div><div class="line">          name,</div><div class="line">          audio: musicUrl,</div><div class="line">          page,</div><div class="line">          album: &#123;</div><div class="line">            name: musicName,</div><div class="line">            picUrl,</div><div class="line">          &#125;,</div><div class="line">          artists: [&#123;</div><div class="line">            name: singer,</div><div class="line">          &#125;],</div><div class="line">        &#125; = <span class="built_in">JSON</span>.parse(body).result.songs[<span class="number">0</span>];</div><div class="line">        <span class="keyword">const</span> reply = &#123;</div><div class="line">          name,</div><div class="line">          picUrl,</div><div class="line">          musicUrl,</div><div class="line">          page,</div><div class="line">          singer,</div><div class="line">        &#125;;</div><div class="line">        resolve(reply);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = POSThttp;</div></pre></td></tr></table></figure></p>
<p>然后与客户端的交互：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> POSThttp = <span class="built_in">require</span>(<span class="string">"./POSThttp.js"</span>);</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</div><div class="line"><span class="comment">// 使用body-parser解析post请求的参数，如果没有，req.body为undefined。</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123;</div><div class="line">  extended: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line">app.post(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">  POSThttp(req).then((data) =&gt; &#123;</div><div class="line">    res.send(data);</div><div class="line">  &#125;).catch((err) =&gt; &#123;</div><div class="line">    res.send(err);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"open wx-audio server successful!"</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><p>主要是歌曲播放控制和交互部分的代码，更多关于小程序的内容可见<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="external">微信小程序 - 开发文档</a>：</p>
<ul>
<li><strong>小程序框架结构</strong></li>
</ul>
<p>微信小程序的入口是根目录下的app.js、app.json、app.wxss它们分别描述的小程序的主题逻辑和公共配置部分。</p>
<p>在pages/目录下，每个文件夹就是一个页面。分别包括js文件、wxml文件、wxss文件。它们分别描述数据逻辑、静态页面模板和页面样式。</p>
<ul>
<li><strong>数据逻辑控制</strong></li>
</ul>
<p>微信小程序采用类似于React的state控制页面数据逻辑，我们不能使用this.data直接改变状态，而是类似于React，使用this.setData()改变页面数据逻辑。</p>
<p>在本项目中定义的如下数据逻辑</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">  name: <span class="string">''</span>, <span class="comment">// 歌曲名称</span></div><div class="line">  musicUrl: <span class="string">''</span>, <span class="comment">// 歌曲链接地址</span></div><div class="line">  picUrl: <span class="string">''</span>, <span class="comment">// 专辑图片地址</span></div><div class="line">  page: <span class="string">''</span>, <span class="comment">// 网易云音乐的歌曲链接</span></div><div class="line">  singer: <span class="string">''</span>, <span class="comment">//歌手名称</span></div><div class="line">  input: <span class="string">''</span>, <span class="comment">// 输入框的内容</span></div><div class="line">  transform: <span class="string">''</span>, <span class="comment">// 旋转动画属性</span></div><div class="line">  rotateFlag: <span class="literal">false</span>, <span class="comment">// 控制专辑图片旋转</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>生命周期函数</strong></li>
</ul>
<p>微信小程序组件有自己的生命周期函数，也是类似于React，每次通过触发一个钩子函数改变状态。如：onLoad、onReady函数等。</p>
<p>详情可见：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html" target="_blank" rel="external">微信小程序-API</a></p>
<ul>
<li><strong>中间的转盘部分</strong></li>
</ul>
<p>微信小程序并不支持css3自定义的动画，因此我采用JS实现的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 专辑图片旋转函数</span></div><div class="line">myRotate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  rotate++;</div><div class="line">  <span class="keyword">let</span> transform = <span class="string">`transform:rotate(<span class="subst">$&#123;rotate&#125;</span>deg);`</span>;</div><div class="line">  <span class="keyword">this</span>.setData(&#123;</div><div class="line">    transform,</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> animation = setTimeout(() =&gt; &#123;</div><div class="line">    <span class="keyword">this</span>.myRotate();</div><div class="line">  &#125;, <span class="number">30</span>);</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.data.rotateFlag) &#123;</div><div class="line">    clearTimeout(animation);</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  </div><div class="line">&#125;,</div><div class="line"><span class="comment">// 控制专辑图片旋转</span></div><div class="line">toggleRotate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.data.rotateFlag) &#123;</div><div class="line">    <span class="keyword">this</span>.pauseMusic();</div><div class="line">    <span class="keyword">this</span>.audioCtx.pause();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.playMusic();</div><div class="line">    <span class="keyword">this</span>.audioCtx.play();</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 播放音乐</span></div><div class="line">playMusic: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.setData(&#123;</div><div class="line">    rotateFlag: <span class="literal">true</span>,</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">this</span>.myRotate();</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 暂停播放音乐</span></div><div class="line">pauseMusic: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.setData(&#123;</div><div class="line">    rotateFlag: <span class="literal">false</span>,</div><div class="line">  &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>交互部分</strong></li>
</ul>
<p>微信小程序采用特有的wx.request发送http请求，基本用法类似于$.ajax()，传入回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">wx.request(&#123;</div><div class="line">      method: <span class="string">'POST'</span>,</div><div class="line">      url: <span class="string">'http://127.0.0.1:3000'</span>, <span class="comment">//访问node端后台借口</span></div><div class="line">      header: &#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">      &#125;,</div><div class="line">      data: &#123;</div><div class="line">        musicname: musicname,</div><div class="line">      &#125;,</div><div class="line">      success: (res) =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> &#123;</div><div class="line">          name,</div><div class="line">          picUrl,</div><div class="line">          musicUrl,</div><div class="line">          page,</div><div class="line">          singer,</div><div class="line">        &#125; = res.data;</div><div class="line">        <span class="keyword">this</span>.setData(&#123;</div><div class="line">          name,</div><div class="line">          picUrl,</div><div class="line">          musicUrl,</div><div class="line">          page,</div><div class="line">          singer,</div><div class="line">        &#125;);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.data);</div><div class="line">      &#125;,</div><div class="line">      error: () =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'err'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="网易云音乐API介绍"><a href="#网易云音乐API介绍" class="headerlink" title="网易云音乐API介绍"></a>网易云音乐API介绍</h3><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><strong>GET <a href="http://music.163.com/api/search/get/" target="_blank" rel="external">http://music.163.com/api/search/get/</a></strong></p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">s: 搜索词</div><div class="line">limit: 返回数量</div><div class="line">sub: 意义不明(非必须参数)；取值：false</div><div class="line">type: 搜索类型；取值意义</div><div class="line"></div><div class="line">1 单曲</div><div class="line">10 专辑</div><div class="line">100 歌手</div><div class="line">1000 歌单</div><div class="line">1002 用户</div></pre></td></tr></table></figure>
<h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>如对下列url发起get请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://s.music.163.com/search/get/?type=1&amp;limit=5&amp;s=%E5%91%8A%E7%99%BD%E6%B0%94%E7%90%83</div></pre></td></tr></table></figure></p>
<p>返回结果如图所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"result"</span>: &#123;</div><div class="line">    <span class="attr">"songCount"</span>: <span class="number">2275</span>,</div><div class="line">    <span class="attr">"songs"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">440241144</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">        <span class="attr">"artists"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1081635</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"周二珂"</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"album"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="number">34986028</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">          <span class="attr">"artist"</span>: &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">"picUrl"</span>: <span class="string">"http://p1.music.126.net/m3_elKryq_x62UNHJ2NgHg==/109951162807555886.jpg"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"audio"</span>: <span class="string">"http://m2.music.126.net/GvIMZ5ZW0l04xFMVYtTy8g==/18502581673300022.mp3"</span>,</div><div class="line">        <span class="attr">"djProgramId"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"page"</span>: <span class="string">"http://music.163.com/m/song/440241144"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">434070713</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"告白气球 "</span>,</div><div class="line">        <span class="attr">"artists"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1073042</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"王进"</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"album"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="number">34801227</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">          <span class="attr">"artist"</span>: &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">"picUrl"</span>: <span class="string">"http://p1.music.126.net/cIim8rAhdKV1Up7e9zSFoA==/17647161626137638.jpg"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"audio"</span>: <span class="string">"http://m2.music.126.net/zp5J-qWfkwmBd2pq3pHzCw==/18605935765863165.mp3"</span>,</div><div class="line">        <span class="attr">"djProgramId"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"page"</span>: <span class="string">"http://music.163.com/m/song/434070713"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">421137034</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">        <span class="attr">"artists"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1158065</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"宇西"</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"album"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="number">34778501</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"告白气球（Cover 周杰伦）"</span>,</div><div class="line">          <span class="attr">"artist"</span>: &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">"picUrl"</span>: <span class="string">"http://p1.music.126.net/tlp3VWVQVe0Je1r-oHn91g==/17666952835430891.jpg"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"audio"</span>: <span class="string">"http://m2.music.126.net/8egvCxWVy4vzk2EJG_dGqg==/3265549609864401.mp3"</span>,</div><div class="line">        <span class="attr">"djProgramId"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"page"</span>: <span class="string">"http://music.163.com/m/song/421137034"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">429461789</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">        <span class="attr">"artists"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">975714</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"叶洛洛"</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">12126098</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Vk"</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"album"</span>: &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="number">34872359</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"告白气球"</span>,</div><div class="line">          <span class="attr">"artist"</span>: &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">            <span class="attr">"picUrl"</span>: <span class="literal">null</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">"picUrl"</span>: <span class="string">"http://p1.music.126.net/PuNMFpLHzvHw2v0-Zh2b8g==/18244196440128259.jpg"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"audio"</span>: <span class="string">"http://m2.music.126.net/t_qlmZ581WF2MwHmvUavxA==/2946691220790691.mp3"</span>,</div><div class="line">        <span class="attr">"djProgramId"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"page"</span>: <span class="string">"http://music.163.com/m/song/429461789"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"code"</span>: <span class="number">200</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/APIhahaha.png" alt="image"></p>
<p><strong>最后上源码：<a href="https://github.com/xingbofeng/wx-audio" target="_blank" rel="external">wx-audio</a>，欢迎star、欢迎fork、欢迎PR。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己写的渣代码被segmentfault官方推荐了，所以补发到自己博客里，还有一些东西需要完善的地方。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="node" scheme="http://xingbofeng.github.io/tags/node/"/>
    
      <category term="微信小程序" scheme="http://xingbofeng.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>从NodeJS搭建中间层再谈前后端分离</title>
    <link href="http://xingbofeng.github.io/2017/01/24/%E4%BB%8ENodeJS%E6%90%AD%E5%BB%BA%E4%B8%AD%E9%97%B4%E5%B1%82%E5%86%8D%E8%B0%88%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://xingbofeng.github.io/2017/01/24/从NodeJS搭建中间层再谈前后端分离/</id>
    <published>2017-01-24T04:04:00.000Z</published>
    <updated>2017-01-25T14:34:04.426Z</updated>
    
    <content type="html"><![CDATA[<p>之前在知道创宇的项目中有用到过nodejs作中间层，当时还不太理解其背后真正的原因；后来在和一位学长交谈的过程中，也了解到蚂蚁金服也在使用类似的方法，使用nodejs作为中间层去请求真实后台的数据；之后人到北京，也见到现在的公司也在往nodejs后端方向靠拢。随着知识的增加，加之自己查阅资料，慢慢总结出了一些原理。</p>
<a id="more"></a>
<h3 id="从做微信小程序引发的思考"><a href="#从做微信小程序引发的思考" class="headerlink" title="从做微信小程序引发的思考"></a>从做微信小程序引发的思考</h3><p>最近出于爱好，写了个音乐播放器的微信小程序（原本想用vue写的，后来因为公司业务原因，年后可能去做微信小程序，所以就换了前端技术栈），源码在我的GitHub上：<a href="https://github.com/xingbofeng/wx-audio" target="_blank" rel="external">wx-audio</a>。</p>
<p>思考：后端出于性能和别的原因，提供的接口所返回的数据格式也许不太适合前端直接使用，前端所需的排序功能、筛选功能，以及到了视图层的页面展现，也许都需要对接口所提供的数据进行二次处理。这些处理虽可以放在前端来进行，但也许数据量一大便会浪费浏览器性能。因而现今，增加node端便是一种良好的解决方案。</p>
<p>在我的微信小程序demo的server端代码中，我通过http模块对真实后台（网易云音乐API）发起http请求，然后通过express模块搭建后端服务。</p>
<p>发起请求：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http.js</span></div><div class="line"><span class="keyword">var</span> formatURL = <span class="built_in">require</span>(<span class="string">'./formatURL.js'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> POSThttp = <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> body = <span class="string">''</span>;</div><div class="line">    <span class="comment">// http模块拿到真实后台api的数据</span></div><div class="line">    http.get(formatURL(request.body.musicname), <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      res.on(<span class="string">'data'</span>, (data) =&gt; &#123;</div><div class="line">        body += data;</div><div class="line">      &#125;).on(<span class="string">'end'</span>, () =&gt; &#123;</div><div class="line">        <span class="comment">// 格式化</span></div><div class="line">        <span class="keyword">const</span> &#123;</div><div class="line">          name,</div><div class="line">          audio: musicUrl,</div><div class="line">          page,</div><div class="line">          album: &#123;</div><div class="line">            name: musicName,</div><div class="line">            picUrl,</div><div class="line">          &#125;,</div><div class="line">          artists: [&#123;</div><div class="line">            name: singer,</div><div class="line">          &#125;],</div><div class="line">        &#125; = <span class="built_in">JSON</span>.parse(body).result.songs[<span class="number">0</span>];</div><div class="line">        <span class="keyword">const</span> reply = &#123;</div><div class="line">          name,</div><div class="line">          picUrl,</div><div class="line">          musicUrl,</div><div class="line">          page,</div><div class="line">          singer,</div><div class="line">        &#125;;</div><div class="line">        resolve(reply);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = POSThttp;</div></pre></td></tr></table></figure></p>
<p>得到数据传回前端：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> POSThttp = <span class="built_in">require</span>(<span class="string">'./POSThttp.js'</span>);</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="comment">// 使用body-parser解析post请求的参数，如果没有，req.body为undefined。</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123;</div><div class="line">  extended: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  POSThttp(req).then((data) =&gt; &#123;</div><div class="line">    res.send(data);</div><div class="line">  &#125;).catch((err) =&gt; &#123;</div><div class="line">    res.send(err);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'open wx-audio server successful!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这几十行代码也就实现了一个简单的中间层的demo，并做到了在中间层格式化参数，便于前端进行使用的过程。</p>
<h3 id="为什么需要中间层？"><a href="#为什么需要中间层？" class="headerlink" title="为什么需要中间层？"></a>为什么需要中间层？</h3><p>其实这个问题，我认为跟面试常考的题：“为什么需要前后端分离？”是类似的，其原因可以归纳为以下几点：</p>
<h3 id="现今网站存在问题"><a href="#现今网站存在问题" class="headerlink" title="现今网站存在问题"></a>现今网站存在问题</h3><p>之前有向一位在百度有多年工作经验的老前辈交谈这类问题，我所提到的搜狐公司代码冗余、前后端耦合的问题，他是这么回答并且给予我这样的建议：</p>
<p><img src="http://oczira72b.bkt.clouddn.com/IMG_20170123_225222.jpg-600300" alt="image"></p>
<p><img src="http://oczira72b.bkt.clouddn.com/IMG_20170123_225258.jpg-600300" alt="image"></p>
<p><img src="http://oczira72b.bkt.clouddn.com/IMG_20170123_225353.jpg-200200" alt="image"></p>
<p>其实，提炼出来，现今大公司的老项目（包括百度、搜狐等公司所采用的后端渲染等），或多或少都会存在这样的一些<strong>问题</strong>：</p>
<ul>
<li>前端代码越来越复杂</li>
<li>前后端依旧高度耦合</li>
<li>无法良好的支持跨终端</li>
</ul>
<h3 id="前辈们提出的解决方案"><a href="#前辈们提出的解决方案" class="headerlink" title="前辈们提出的解决方案"></a>前辈们提出的解决方案</h3><p>参考<a href="http://2014.jsconf.cn/slides/herman-taobaoweb/index.html" target="_blank" rel="external">淘宝前后端分离解决方案</a></p>
<ul>
<li>前端代码越来越复杂，我们希望尽可能地减少工作量，开始使用类似MV*的分层结构，使前端后分离成为必要。</li>
<li>前端需要处理更多的工作，希望有权操控View，Router（如：SPA的尝试）</li>
<li>各种终端设备的兴起，需要我们把页面适配到更多的地方。</li>
</ul>
<p>开始：我们所尝试的CLIENT-SIDE MV* 框架，后端暴露数据接口、处理业务逻辑，前端接收数据、处理渲染逻辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">关于MVC的定义：</div><div class="line"></div><div class="line">MVC是一种设计模式，它将应用划分为3个部分：数据（模型）、展现层（视图）和用户交互（控制器）。换句话说，一个事件的发生是这样的过程：</div><div class="line">　　1. 用户和应用产生交互。</div><div class="line">　　2. 控制器的事件处理器被触发。</div><div class="line">　　3. 控制器从模型中请求数据，并将其交给视图。</div><div class="line">　　4. 视图将数据呈现给用户。</div><div class="line">我们不用类库或框架就可以实现这种MVC架构模式。关键是要将MVC的每部分按照职责进行划分，将代码清晰地分割为若干部分，并保持良好的解耦。这样可以对每个部分进行独立开发、测试和维护。</div></pre></td></tr></table></figure>
<p><img src="http://oczira72b.bkt.clouddn.com/client-side-mvc.jpg" alt="image"></p>
<p>如：Backbone, EmberJS, KnockoutJS, AngularJS等框架。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/fe-mvc.png" alt="image"></p>
<p>但这样的方式仍旧存在问题：</p>
<p><strong>各层职责重叠</strong></p>
<ul>
<li>Client-side Model 是 Server-side Model 的加工</li>
<li>Client-side View 跟 Server-side是 不同层次的东西</li>
<li>Client-side的Controller 跟 Sever-side的Controller 各搞各的</li>
<li>Client-side的Route 但是 Server-side 可能没有</li>
</ul>
<p><strong>性能问题</strong></p>
<ul>
<li>渲染，取值都在客户端进行，有性能的问题</li>
<li>需要等待资源到齐才能进行，会有短暂白屏与闪动</li>
<li>在移动设备低速网路的体验奇差无比</li>
</ul>
<p><strong>重用问题</strong></p>
<ul>
<li>模版无法重用，造成维护上的麻烦与不一致</li>
<li>逻辑无法重用，前端的校验后端仍须在做一次</li>
<li>路由无法重用，前端的路由在后端未必存在</li>
</ul>
<p><strong>跨终端问题</strong></p>
<ul>
<li>业务太靠前，导致不同端重复实现</li>
<li>逻辑太靠前，造成维护上的不易</li>
</ul>
<p><strong>渲染都在客户端，模版无法重用，SEO实现 麻烦</strong></p>
<h3 id="NodeJS作为中间层的全栈开发方案"><a href="#NodeJS作为中间层的全栈开发方案" class="headerlink" title="NodeJS作为中间层的全栈开发方案"></a>NodeJS作为中间层的全栈开发方案</h3><p>有了NodeJS之后，前端可以更加专注于视图层，而让更多的数据逻辑放在Node层处理。</p>
<p><img src="http://oczira72b.bkt.clouddn.com/nodeserver" alt="image"></p>
<p>我们使用Node层：</p>
<ul>
<li>转发数据，串接服务</li>
<li>路由设计，控制逻辑</li>
<li>渲染页面，体验优化</li>
<li>中间层带来的性能问题，在异步ajax转成同步渲染过程中得到平衡</li>
<li>更多的可能</li>
</ul>
<p>其实更为重要的是，对于前端来说，NodeJS的学习成本是相当低的：我们无需学习一门新的语言，就能做到以前开发帮我们做的事情，一切都显得那么自然。</p>
<p>技术在不断变化中，唯有跟上技术革新的浪潮，才能不被时代所淘汰，不管是人还是企业。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在知道创宇的项目中有用到过nodejs作中间层，当时还不太理解其背后真正的原因；后来在和一位学长交谈的过程中，也了解到蚂蚁金服也在使用类似的方法，使用nodejs作为中间层去请求真实后台的数据；之后人到北京，也见到现在的公司也在往nodejs后端方向靠拢。随着知识的增加，加之自己查阅资料，慢慢总结出了一些原理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="node" scheme="http://xingbofeng.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>再也不会撂挑子——敏捷开发流程</title>
    <link href="http://xingbofeng.github.io/2017/01/18/%E5%86%8D%E4%B9%9F%E4%B8%8D%E4%BC%9A%E6%92%82%E6%8C%91%E5%AD%90%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://xingbofeng.github.io/2017/01/18/再也不会撂挑子——敏捷开发流程/</id>
    <published>2017-01-18T07:58:00.000Z</published>
    <updated>2017-01-18T08:03:07.300Z</updated>
    
    <content type="html"><![CDATA[<p>从知道创宇离职接近一个月的时间了，深知自己还有最后一点学到的东西没有把它浓缩提炼成自己的东西，今天偶然翻开我的笔记本，或许敏捷开发流程，是我在知道创宇实习期间，除了技术和职场经验，另外一个收获最大的方面了。</p>
<a id="more"></a>
<h3 id="什么是敏捷开发？"><a href="#什么是敏捷开发？" class="headerlink" title="什么是敏捷开发？"></a>什么是敏捷开发？</h3><p>以下摘自<a href="https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91" target="_blank" rel="external">维基百科——敏捷开发</a>：</p>
<p>敏捷软件开发（英语：Agile software development），又称敏捷开发，是一种从1990年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发过程中人的作用。</p>
<h3 id="为什么需要敏捷开发？"><a href="#为什么需要敏捷开发？" class="headerlink" title="为什么需要敏捷开发？"></a>为什么需要敏捷开发？</h3><p>传统的软件开发中，我们通常采用瀑布式的开发流程，它严格遵循预先计划的需求、分析、设计、编码、测试的步骤顺序进行。步骤成果作为衡量进度的方法，例如需求规格，设计文档，测试计划和代码审阅等等。</p>
<p>但传统的瀑布式开发流程中，对比与敏捷开发，也就存在巨大的缺陷了，首先，传统的瀑布式开发流程，每个阶段周期长，一旦需求变更，也许会让开发人员感到手忙脚乱、措手不及。它的严格分级导致的自由度降低，项目早期即作出承诺导致对后期需求的变化难以调整，代价高昂。瀑布式方法在需求不明并且在项目进行过程中可能变化的情况下基本是不可行的。</p>
<p>曾经记得之前在做ASMS项目的时候，项目负责人，也就是指导老师（产品经理），在反复提出需求并作出更改的过程中，加大了开发人员的开发难度，最终使得团队的核心成员离开，导致项目的失败。</p>
<p>这也许就算是传统瀑布式开发的缺陷吧！</p>
<p>当时不太理解的我，在接触到了敏捷开发流程之后，从在知道创宇的实习经历，也是让我慢慢明白到了这一点。</p>
<p>以下引用自<a href="https://zhuanlan.zhihu.com/p/24840463" target="_blank" rel="external">敏捷开发——互联网时代的软件开发方式</a>：<br>在互联网时代，一切开发流程的变化实在是太快了，我们必须要保证我们项目推进过程中，不会因为某一次变化而让我们的开发人员大动干戈、措手不及，因而开发过程中我们必须要具备<strong>快速试错和拥抱变化</strong>的特点。</p>
<p>今年张小龙在WXG大会上提到：</p>
<p><strong>『我们今天可以想一些与众不同的点子，然后我们可以很快就看到效果，因为我们可以很快把它上线了，然后可以去验证，如果不对就下线，如果还有改进余地，下个版本再去改它。这是一个能够持续实现你的想法的过程』</strong></p>
<p>张小龙所说的上线、验证、改进的持续循环流程实际上就是一个快速试错和拥抱变化的过程。 当今的互联网，市场变化日新月异，在不断变化的市场中取得成功就要拥有快速试错的能力。</p>
<p>下面是滴滴打车最新的客户端截图。从图中可以看到，滴滴支持的全部车辆服务已经覆盖到了快车、小巴、出租车、顺风车、专车等多达10种服务，而大众刚刚熟悉滴滴时，滴滴仅有出租车、快车和顺风车三种车型。 </p>
<p><img src="http://oczira72b.bkt.clouddn.com/v2-41eb7e7841913d77e8724da9fd66fcfe_b.png" alt="image"></p>
<p>试想如果滴滴从一开始就计划设计出10种车型再开始上线推广，那估计现在满街跑的就该是Uber或者快的或者什么滴而不是滴滴了。商机转瞬即逝，正是在一次次的上线中，从车主、用户及市场的反馈中不断调整迭代，才造就了今天的滴滴，而这正是敏捷思想的精髓所在。 </p>
<h3 id="知道创宇的敏捷开发方法：Scrum"><a href="#知道创宇的敏捷开发方法：Scrum" class="headerlink" title="知道创宇的敏捷开发方法：Scrum"></a>知道创宇的敏捷开发方法：<a href="https://zh.wikipedia.org/wiki/Scrum" target="_blank" rel="external">Scrum</a></h3><h4 id="什么是Scrum？"><a href="#什么是Scrum？" class="headerlink" title="什么是Scrum？"></a>什么是Scrum？</h4><p>Scrum是一种敏捷软件开发的方法学，用于迭代式增量软件开发过程。Scrum在英语是橄榄球运动中争球的意思。<br>虽然Scrum是为管理软件开发项目而开发的，它同样可以用于运行软件维护团队，或者作为计划管理方法。Scrum之间的合作称为“Scrum of Scrums”。</p>
<h4 id="Scrum的3-3-5-5原则"><a href="#Scrum的3-3-5-5原则" class="headerlink" title="Scrum的3+3+5+5原则"></a>Scrum的3+3+5+5原则</h4><p><img src="http://oczira72b.bkt.clouddn.com/ScrumCN_Scrum_Process_710.png" alt="image"></p>
<p>以下内容参考至<a href="http://www.scrumcn.com/agile/scrum-knowledge-library/scrum.html" target="_blank" rel="external">scrum中文网</a>：</p>
<ul>
<li>三个角色，分别是<strong>产品负责人（PO）</strong>、<strong>开发团队（TM）</strong>和 <strong>团队顾问（Scrum Master）</strong>。</li>
<li>三个交付，分别是<strong>Product Backlog – 产品待办事项列表</strong>、<strong>Sprint Planning– 迭代需求</strong>和<strong>Sprint Backlog</strong>。</li>
<li>五个会议，分别是<strong>每日会议</strong>、<strong>迭代启动会</strong>、<strong>迭代回顾会</strong>、<strong>迭代评审会</strong>、<strong>总回顾会</strong>。</li>
<li>五个价值观，分别是<strong>承诺</strong>、<strong>专注</strong>、<strong>开放</strong>、<strong>尊重</strong>和<strong>勇气</strong>。</li>
</ul>
<h3 id="极端编程、持续集成、测试驱动开发、结对编程和Code-Review"><a href="#极端编程、持续集成、测试驱动开发、结对编程和Code-Review" class="headerlink" title="极端编程、持续集成、测试驱动开发、结对编程和Code Review"></a>极端编程、持续集成、测试驱动开发、结对编程和Code Review</h3><p>之所以把 极端编程、持续集成、测试驱动开发、结对编程和Code Review加入到这篇文章，其中一方面的原因是确实在知道创宇实习期间慢慢接触了一些这方面的内容，包括导师也有所讲述和归纳。此外，它们也和敏捷开发流程脱离不开关系。</p>
<h4 id="极端编程"><a href="#极端编程" class="headerlink" title="极端编程"></a>极端编程</h4><p><strong>极限编程（英语：Extreme programming，缩写为XP）</strong>，是一种软件工程方法学，是敏捷软件开发中最富有成效的几种方法学之一。如同其他敏捷方法学，极限编程和传统方法学的本质不同在于它更强调可适应性而不是可预测性。极限编程的支持者认为软件需求的不断变化是很自然的现象，是软件项目开发中不可避免的、也是应该欣然接受的现象；他们相信，和传统的在项目起始阶段定义好所有需求再费尽心思的控制变化的方法相比，有能力在项目周期的任何阶段去适应变化，将是更加现实更加有效的方法。<br>极限编程为管理人员和开发人员开出了一剂指导日常实践的良方；这个实践意味着接受并鼓励某些特别的有价值的方法。支持者相信，这些在传统的软件工程中看来是“极端的”实践，将会使开发过程比传统方法更加好的响应用户需求，因此更加敏捷，更好的构建出高质量软件。</p>
<p><strong>此外，每个迭代周期的开发前、开发中、已完成状态是极端编程的三个极端。</strong></p>
<h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p><strong>持续集成（英语：Continuous integration，缩写为 CI）</strong>，一种软件工程流程，将所有工程师对于软件的工作复本，每天集成数次到共用主线（mainline）上。这个名称最早由葛来迪·布区（Grady Booch）在他的布区方法中提出，但是他并没有提到要每天集成数次。之后成为极限编程（extreme programming，缩写为XP）的一部分。在测试驱动开发（TDD）的作法中，通常还会搭配自动单元测试。持续集成的提出，主要是为了解决软件进行系统集成时面临的各项问题，极限编程称这些问题为集成地狱（integration hell）。</p>
<h4 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h4><p><strong>测试驱动开发（英语：Test-driven development，缩写为TDD）</strong>是一种软件开发过程中的应用方法，由极限编程中倡导，以其倡导先写测试程序，然后编码实现其功能得名。测试驱动开发始于20世纪90年代。测试驱动开发的目的是取得快速反馈并使用“illustrate the main line”方法来构建程序。</p>
<p>测试驱动开发是戴两顶帽子思考的开发方式：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上重构的帽子，在测试的保护下，通过去除冗余的代码，提高代码质量。测试驱动着整个开发过程：首先，驱动代码的设计和功能的实现；其后，驱动代码的再设计和重构。</p>
<p>测试驱动开发可以有效的避免过度设计带来的浪费。但是也有人强调在开发前需要有完整的设计再实施可以有效的避免重构带来的浪费。此外，可以让开发者在开发中拥有更全面的视角。</p>
<h4 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h4><p><strong>结对编程（英语：Pair programming）</strong>是一种敏捷软件开发的方法，两个程序员在一个计算机上共同工作。一个人输入代码，而另一个人审查他输入的每一行代码。输入代码的人称作驾驶员，审查代码的人称作观察员（或导航员）。两个程序员经常互换角色。<br>在结对编程中，观察员同时考虑工作的战略性方向，提出改进的意见，或将来可能出现的问题以便处理。这样使得驾驶者可以集中全部注意力在完成当前任务的“战术”方面。观察员当作安全网和指南。结对编程对开发程序有很多好处。比如增加纪律性，写出更好的代码等。</p>
<h4 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h4><p><strong>代码审查（英语：Code review）</strong>是指对计算机源代码系统化地审查，常用软件同行评审的方式进行，其目的是在找出及修正在软件开发初期未发现的错误，提升软件质量及开发者的技术。代码审查常以不同的形式进行，例如结对编程、非正式的看过整个代码，或是正式的软件检查。<br>Code Review要做到以下三点内容：</p>
<ul>
<li>要把自己的代码理清。</li>
<li>贡献好的开发经验。</li>
<li>降低维护成本。<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4>虽然极端编程、持续集成、测试驱动开发、结对编程和Code Review都会使得开发效率有所变慢，但是从长远来开，代码质量的提升和维护成本的下降是不可估量的。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>知道创宇所学所得</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91" target="_blank" rel="external">维基百科-敏捷软件开发</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24840463" target="_blank" rel="external">敏捷开发——互联网时代的软件开发方式</a></li>
<li><a href="http://www.gjnote.com/archives/392.html" target="_blank" rel="external">Scrum3355介绍</a></li>
<li><a href="http://www.scrumcn.com/" target="_blank" rel="external">Scrum中文网</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B" target="_blank" rel="external">维基百科-极限编程</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88" target="_blank" rel="external">维基百科-持续集成</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91" target="_blank" rel="external">维基百科-测试驱动开发</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" target="_blank" rel="external">维基百科-结对编程</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5" target="_blank" rel="external">维基百科-代码审查</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从知道创宇离职接近一个月的时间了，深知自己还有最后一点学到的东西没有把它浓缩提炼成自己的东西，今天偶然翻开我的笔记本，或许敏捷开发流程，是我在知道创宇实习期间，除了技术和职场经验，另外一个收获最大的方面了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="敏捷开发" scheme="http://xingbofeng.github.io/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="方法论" scheme="http://xingbofeng.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的2016年总结</title>
    <link href="http://xingbofeng.github.io/2017/01/01/%E6%88%91%E7%9A%842016%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://xingbofeng.github.io/2017/01/01/我的2016年总结/</id>
    <published>2017-01-01T13:06:00.000Z</published>
    <updated>2017-01-01T15:25:03.277Z</updated>
    
    <content type="html"><![CDATA[<p>2016年算是我的人生职业生涯发展较为重要的一年，也算是人生的一道分界线。<br>无论以前的每次人生十字路口边，我是如何选择，今年的选择也算是令我满意。<br><a id="more"></a></p>
<h2 id="职业发展"><a href="#职业发展" class="headerlink" title="职业发展"></a>职业发展</h2><p>2016年是处于我大二的尾巴和大三的开始。在此期间，我依据学校对本科生的培养计划和对自我未来职业发展的思考。分别参与了企业实训以及自行联系了一家公司进行实习，岗位均为前端开发。以下分别对于技术、工作和人际交往作出总结和反省。</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul>
<li>自己的简历从无到有，搭建好了个人网站及开始活跃于开源社区。</li>
<li>在HTML、CSS页面布局技术方面，我从仅仅使用最简单的CSS进行简单切图，到如今，对页面布局、文档流、盒模型等理解得更为深刻，如熟练使用flex进行布局并爱上了弹性盒子布局技术。</li>
<li>在原生JavaScript及浏览器DOM技术方面，我从仅仅会简单的JavaScript到如今能熟悉DOM API、使用jQuery进行DOM操作和发送HTTP请求，并熟练使用es6新技术，如解构、作用域、async函数、promise对象等。</li>
<li>在框架的使用方面，基本熟练使用React技术栈进行页面开发，这是在以前我所不敢想象的高度。</li>
<li>在服务端和后端知识了解方面，基本熟悉linux（Mac OSX）工作流，能独立完成服务器配置和页面上线等功能，对nodejs，特别是express框架也有所学习，但不够深入。</li>
</ul>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><ul>
<li>在今年暑假，我前往四川日报网络传媒发展有限公司进行企业实训，在其中，基本依靠自我学习，对基于es5的前端技术有全面的掌握，特别是原生JS的熟练程度（如原型、闭包、作用域等），并能使用jQuery实现简单的页面动态效果。</li>
<li>在今年开学初，我接手了学院的ASMS项目，在其中负责前端开发和设计工作，在其中，基本熟悉了完整项目开发流程和团队合作，能与后端进行良好的交互实现页面的动态渲染。</li>
<li>在今年11月，我向知道创宇投递简历，并顺利通过面试。在其中参与了一期完整商业项目的开发工作，并在其中，对现代前端开发有基本的认识，并熟悉了es6+React技术栈和敏捷开发流程。</li>
<li>在今年年末，我向百度和搜狐投递简历，到今天（2017.01.01），已收到搜狐的正式offer和百度的口头offer，如不出意外，我将前往百度进行为期半年的实习。</li>
</ul>
<h3 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h3><p>今年是我进入职场的头半年，我依然存在许多不足。</p>
<ul>
<li>在四川日报实训期间，由于水平受限，没有参与太多内部项目的开发。</li>
<li>在ASMS项目中，没有在团队后端离开后，真正有想过挽救这个项目，继续把它做完的想法。</li>
<li>在知道创宇实习期间，与设计之间的沟通存在一些障碍，并有部分表露出自己的情绪，幸好在后来得到同事的提醒，顺利完成了一期开发工作。</li>
<li>在知道创宇实习期间，不太注重个人形象，希望以后能加以注意。</li>
</ul>
<h3 id="书单ToDoList"><a href="#书单ToDoList" class="headerlink" title="书单ToDoList"></a>书单ToDoList</h3><p>2016年，我阅读了一些书籍，其中一部分尚未完成的将于2017年完成，一部分书籍还未阅读，将于2017年完成计划。</p>
<ul>
<li><del>《精通CSS——高级Web标准解决方案》</del></li>
<li><del>《CSS权威指南》（粗略阅读，更多是当做文档使用）</del></li>
<li><del>《图解HTTP》（精读，完成）</del></li>
<li><del>《JavaScript高级程序设计》（精读，完成）</del></li>
<li><del>《JavaScript基础教程》（精读，完成）</del></li>
<li><del>《锋利的jQuery》（精读，完成）</del></li>
<li><del>《ES6标准入门》（精读，完成）</del></li>
<li><del>《计算机网络——自顶向下方法》（为应付考试泛读，2017年将精读此书）</del></li>
<li><del>《深入浅出nodejs》（精读，完成）</del></li>
<li><del>《nodejs开发指南》（泛读，完成）</del></li>
<li><del>《React——引领未来的用户界面开发框架》（泛读，完成）</del></li>
<li>《你不知道的JavaScript（上卷）》（已阅读完作用域和闭包部分，还剩二分之一未阅读）</li>
<li>《你不知道的JavaScript（中卷）》（已阅读完异步与性能部分前三章，还剩三分之二未阅读）</li>
<li>《JavaScript设计模式与开发实践》（阅读大约三分之一，剩下的计划于2017年完成）</li>
<li>《JavaScript函数式编程》（粗略阅读，未完成）</li>
<li>《编写可维护的JavaScript》（粗略阅读，未完成）</li>
<li>《Web前端黑客技术揭秘》（粗略阅读，未完成）</li>
<li>《软技能——代码之外的生存指南》（粗略阅读，未完成）</li>
<li>《浪潮之巅》（阅读完前三章，剩下的计划于2017年完成）</li>
<li>《Git版本控制管理》（未阅读）</li>
<li>《jQuery技术内幕》（未阅读）</li>
<li>《React Native——用JavaScript开发移动应用》（未阅读）</li>
<li>《HTML5游戏开发》（未阅读）</li>
<li>《人月神话》（未阅读）</li>
<li>《算法导论》（很早之前粗略看过，计划在2017年暑假重新阅读）</li>
<li>《数据结构》（很早之前粗略看过，计划在2017年暑假重新阅读）</li>
<li>《算法竞赛入门经典》（很早之前粗略看过，计划在2017年暑假重新阅读）</li>
</ul>
<h2 id="明年展望"><a href="#明年展望" class="headerlink" title="明年展望"></a>明年展望</h2><ul>
<li>加强锻炼;</li>
<li>学习Python;</li>
<li>实习顺利，争取转正;</li>
<li>把学分修完，为2018年毕业做准备;</li>
<li>拿到BAT的校招offer;</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年算是我的人生职业生涯发展较为重要的一年，也算是人生的一道分界线。&lt;br&gt;无论以前的每次人生十字路口边，我是如何选择，今年的选择也算是令我满意。&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://xingbofeng.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript触发onScoll事件的函数节流</title>
    <link href="http://xingbofeng.github.io/2016/12/13/JavaScript%E8%A7%A6%E5%8F%91onScroll%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    <id>http://xingbofeng.github.io/2016/12/13/JavaScript触发onScroll事件的函数节流/</id>
    <published>2016-12-13T13:31:00.000Z</published>
    <updated>2016-12-13T13:31:39.615Z</updated>
    
    <content type="html"><![CDATA[<p>主要说说最近工作中遇到过的常见的问题。<br><a id="more"></a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>常见的网站布局，顶部一个导航栏，我们假设本页面共有四个栏目：分别为A、B、C、D<br>我们点击A，锚点跳转至A栏目，同时顶部的A按钮高亮；<br>点击B，锚点跳转至B栏目，同时顶部的B按钮高亮；<br>我们在Main组件里面滚动，滚动到B模块时，B按钮高亮。</p>
<p>以上是我们经常会在开发中遇到的一个模型。如果是在以前，用jQuery作前端开发的话，实在是太熟悉不过了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>主要想谈谈在React组件化开发中的性能优化方法。<br>我们的页面结构是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div</div><div class="line">  className=&#123;style.main&#125;</div><div class="line">  id=&quot;main&quot;</div><div class="line">  ref=&#123;(main) =&gt; &#123; this.main = main; &#125;&#125;</div><div class="line">  onScroll=&#123;</div><div class="line">    ((/detail/.test(this.props.location.pathname))) ? (() =&gt; this.throttle()()) : null</div><div class="line">  &#125;</div><div class="line">&gt;</div><div class="line">  &#123;this.props.children&#125;</div><div class="line">  &lt;Footer /&gt;</div></pre></td></tr></table></figure></p>
<p> 我们在main组件里设定onScoll事件，在这个事件中，我们触发action，通过redux将状态的变化传递到子组件。<br> 我的scroll事件触发函数是这样的（忽略一长串的if else，这是一个解决了一下午的bug的终极解决方案，此文不做累述）<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> handleScroll() &#123;</div><div class="line">  <span class="keyword">const</span> &#123; changeScrollFlag &#125; = <span class="keyword">this</span>.props.actions;</div><div class="line">  <span class="comment">// 根据滚动距离修改TitleBox的样式</span></div><div class="line">  <span class="keyword">const</span> &#123; basicinformation, holderinformation, mainpeople, changerecord &#125; = &#123;</div><div class="line">    basicinformation: <span class="built_in">document</span>.getElementById(<span class="string">'basicinformation'</span>).offsetTop - <span class="number">121</span>,</div><div class="line">    holderinformation: <span class="built_in">document</span>.getElementById(<span class="string">'holderinformation'</span>).offsetTop - <span class="number">121</span>,</div><div class="line">    mainpeople: <span class="built_in">document</span>.getElementById(<span class="string">'mainpeople'</span>).offsetTop - <span class="number">121</span>,</div><div class="line">    changerecord: <span class="built_in">document</span>.getElementById(<span class="string">'changerecord'</span>).offsetTop - <span class="number">121</span>,</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.screen.availHeight &gt; <span class="keyword">this</span>.main.scrollTop) &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'gototop'</span>).style.display = <span class="string">'none'</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'gototop'</span>).style.display = <span class="string">'block'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 得到基础信息区域、股东信息区域、主要人员区域、变更记录区域的offsetTop,我们把它用来跟main的scrollTop比较</span></div><div class="line">  <span class="comment">// 比较的结果触发action，改变TitleBox组件样式</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.main.scrollTop &lt; holderinformation) &#123;</div><div class="line">    <span class="comment">// 基础信息区域</span></div><div class="line">    <span class="keyword">if</span> (basicinformation === <span class="number">-121</span>) &#123;</div><div class="line">      <span class="comment">// 如果基础信息模块不存在，我们什么也不做（当然理论上基础信息模块应该是会有的）</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    changeScrollFlag(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.main.scrollTop &lt; mainpeople) &#123;</div><div class="line">    <span class="comment">// 股东信息区域</span></div><div class="line">    changeScrollFlag(<span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (holderinformation === <span class="number">-121</span>) &#123;</div><div class="line">      <span class="comment">// 如果股东信息栏目不存在，在滚动的时候我们不应该强行把TileBox的高亮按钮设置为holderinformation</span></div><div class="line">      <span class="comment">// 因为holdinformation并不存在，我们跳到前一个按钮，让基础信息按钮高亮</span></div><div class="line">      changeScrollFlag(<span class="number">1</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.main.scrollTop &lt; changerecord) &#123;</div><div class="line">    <span class="comment">// 主要人员区域</span></div><div class="line">    changeScrollFlag(<span class="number">3</span>);</div><div class="line">    <span class="keyword">if</span> (mainpeople === <span class="number">-121</span>) &#123;</div><div class="line">      <span class="comment">// 如果主要人员栏目不存在，在滚动的时候我们不应该强行把TileBox的高亮按钮设置为mainpeople</span></div><div class="line">      <span class="comment">// mainpeople并不存在，我们跳到前一个按钮，让基础信息按钮高亮</span></div><div class="line">      changeScrollFlag(<span class="number">2</span>);</div><div class="line">      <span class="keyword">if</span> (holderinformation === <span class="number">-121</span>) &#123;</div><div class="line">        <span class="comment">// 如果主要人员栏目不存在，而且连股东信息栏目也没有，我们跳到高亮基础信息栏目</span></div><div class="line">        changeScrollFlag(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.main.scrollTop &gt; changerecord) &#123;</div><div class="line">    <span class="comment">// 与上面同理</span></div><div class="line">    <span class="comment">// 变更记录区域</span></div><div class="line">    changeScrollFlag(<span class="number">4</span>);</div><div class="line">    <span class="keyword">if</span> (changerecord === <span class="number">-121</span>) &#123;</div><div class="line">      changeScrollFlag(<span class="number">3</span>);</div><div class="line">      <span class="keyword">if</span> (mainpeople === <span class="number">-121</span>) &#123;</div><div class="line">        changeScrollFlag(<span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span> (holderinformation === <span class="number">-121</span>) &#123;</div><div class="line">          changeScrollFlag(<span class="number">1</span>);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 其中，changeScrollFlag()函数是我们的action处理函数。</p>
<h2 id="我们的函数节流"><a href="#我们的函数节流" class="headerlink" title="我们的函数节流"></a>我们的函数节流</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">throttle() &#123;</div><div class="line">  <span class="comment">// onScroll函数节流</span></div><div class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>;</div><div class="line">  <span class="comment">// previous初始设置上一次调用 onScroll 函数时间点为 0。</span></div><div class="line">  <span class="keyword">let</span> timeout;</div><div class="line">  <span class="keyword">const</span> wait = <span class="number">250</span>;</div><div class="line">  <span class="comment">// 250毫秒触发一次</span></div><div class="line">  <span class="keyword">return</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">const</span> remaining = wait - (now - previous);</div><div class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (timeout) &#123;</div><div class="line">        <span class="built_in">window</span>.clearTimeout(timeout);</div><div class="line">      &#125;</div><div class="line">      previous = now;</div><div class="line">      timeout = <span class="literal">null</span>;</div><div class="line">      <span class="keyword">this</span>.handleScroll();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout) &#123;</div><div class="line">      timeout = <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.handleScroll, wait);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 我们的节流函数返回一个函数，设定一个时间戳，如果我们时间戳的差值较小，我们什么也不做，但我们的时间戳的差值较大，清除定时器，触发scroll函数。<br> 这样看起来似乎挺简单，对，确实是挺简单的。<br> 那么在子组件我们还需要怎么做呢？</p>
<h2 id="接收action"><a href="#接收action" class="headerlink" title="接收action"></a>接收action</h2><p> 二级容器型组件接收action，通过二级容器型组件传递props至三级展示型组件。<br> 我们一定要在componentWillReceiveProps接收到这个props。<br> 记住，在componentWillReceiveProps里使用this.props是并不能够接收到props的变化的！！！组件生命周期函数含有一个自己的参数。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> componentWillReceiveProps(nextProps) &#123;</div><div class="line">  <span class="comment">// 在compoWillReceiveProps里接收到Main组件里所触发onScroll事件的改变activebtn样式的index</span></div><div class="line">  <span class="comment">// 并且设置为本组件的state</span></div><div class="line">  <span class="keyword">this</span>.setState(&#123;</div><div class="line">    activebtn: nextProps.scrollFlag.scrollIndex,</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 我们的state控制我们高亮的按钮是第几个，它是一个数字。</p>
<h2 id="更改导航条的样式"><a href="#更改导航条的样式" class="headerlink" title="更改导航条的样式"></a>更改导航条的样式</h2><p> 在这里，我使用了React周边的库：<a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">classnames</a>，详情参见其api。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;span</div><div class="line">  className=&#123;classnames(&#123;</div><div class="line">    [style.informationactive]: (this.state.activebtn === 1),</div><div class="line">  &#125;)&#125;</div><div class="line">  onClick=&#123;() =&gt; this.handleClick(1, &apos;basicinformation&apos;)&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p> 在此，我们完成了一次从顶层组件触发事件，并做到函数节流，将事件一层层传递至底层展示型组件的一个过程。</p>
<h2 id="最近一些关于前端开发的感慨"><a href="#最近一些关于前端开发的感慨" class="headerlink" title="最近一些关于前端开发的感慨"></a>最近一些关于前端开发的感慨</h2><ul>
<li>不要在组件中反复调用一个函数，这样会造成巨大的消耗！我们可以通过三元运算符、模板字符串做到的事情，请勿写一个新的函数。</li>
<li>jsx不要太过于冗余。我们尽量写成变量的形式，不然页面结构复杂，不易于我们捕捉bug。</li>
<li>减少后端请求，能存cookie则存cookie，能存localStorge则存localStorge。</li>
<li>简单的组件尽量自己写，请勿使用别人的组件，否则在需求更改、样式调整上会出现巨大困难并做一些无意义的事儿。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要说说最近工作中遇到过的常见的问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
      <category term="前端性能优化" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="React" scheme="http://xingbofeng.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>基于react的分页实现原理</title>
    <link href="http://xingbofeng.github.io/2016/12/03/%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://xingbofeng.github.io/2016/12/03/基于react的分页实现原理/</id>
    <published>2016-12-03T06:51:00.000Z</published>
    <updated>2016-12-03T07:43:59.347Z</updated>
    
    <content type="html"><![CDATA[<p>又到周末了，真的是想对本周的工作做一个总结，那就总结下本周又踩的一个坑把。<br>本周学到的东西和技巧还是挺多的，主要还是一些技巧性的东西以下就是其中之一。<br><a id="more"></a><br>现在，后端传过来的数据是这样的，我们要做的，只不过是把它们展示在页面上。不过，每页展示的只有十条数据，剩下的数据我们需要分页。<br><img src="http://oczira72b.bkt.clouddn.com/C9D4B4F4-5D8F-4FE2-AFD0-47FE4425BF42.png" alt="image"></p>
<h2 id="拿到后端数据"><a href="#拿到后端数据" class="headerlink" title="拿到后端数据"></a>拿到后端数据</h2><p>我们在componentWillMount和componentWillReceiveProps里面，拿到redux的reducer里面的数据并且设置为组件state的一个属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">componentWillMount() &#123;</div><div class="line">  <span class="keyword">const</span> &#123; main: &#123; list &#125; &#125; = <span class="keyword">this</span>.context.state;</div><div class="line">  <span class="keyword">this</span>.setState(&#123; infos: list &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">componentWillReceiveProps(nextProps, nextState) &#123;</div><div class="line">  <span class="keyword">const</span> &#123; main: &#123; list &#125; &#125; = nextState.state;</div><div class="line">  <span class="keyword">this</span>.setState(&#123; infos: list &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设定数据结构"><a href="#设定数据结构" class="headerlink" title="设定数据结构"></a>设定数据结构</h2><p>我们设定state中一个page属性，默认的page属性为1，即当前我们在第一个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props, context) &#123;</div><div class="line">  <span class="keyword">super</span>(props, context);</div><div class="line">  <span class="keyword">this</span>.state = &#123; page: <span class="number">1</span>, infos: [] &#125;;</div><div class="line">  <span class="keyword">this</span>.changePage = <span class="keyword">this</span>.changePage.bind(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在此，将this.state.page，通过props传入子组件分页器Pagination中。<br>在分页器组件中：当我们点击获取下一页的时候，page++；当我们点击获取上一页的时候，page–</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.changePage&#125;</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"left"</span> /&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.changePage&#125;</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"right"</span> /&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="究竟有多少页？"><a href="#究竟有多少页？" class="headerlink" title="究竟有多少页？"></a>究竟有多少页？</h2><p>我们通过js的Math.ceil方法，向上取整获得页数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> infos = <span class="keyword">this</span>.state.infos;</div><div class="line"><span class="keyword">const</span> pagenum = <span class="built_in">Math</span>.ceil((infos.length) / <span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="如何分段展示？"><a href="#如何分段展示？" class="headerlink" title="如何分段展示？"></a>如何分段展示？</h2><p>我们通过js的slice方法，截取这个数组，把每10项作为一组。而这每十项，都与page属性关联</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> infos = <span class="keyword">this</span>.state.infos;</div><div class="line"><span class="keyword">const</span> start = (<span class="keyword">this</span>.state.page - <span class="number">1</span>) * <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> end = (<span class="keyword">this</span>.state.page) * <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> datapage = infos.slice(start, end);</div></pre></td></tr></table></figure>
<p>然后通过map方法，展示到页面上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;datapage.map((value, index) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">item</span>=<span class="string">&#123;value&#125;</span> /&gt;</span>)&#125;</span></div></pre></td></tr></table></figure>
<h2 id="分页器的解决方案"><a href="#分页器的解决方案" class="headerlink" title="分页器的解决方案"></a>分页器的解决方案</h2><p>人总有犯傻的时候，当我写到写不动的时候，在询问周围同事的过程中，才知道antd有分页组件……<br><a href="https://ant.design/components/pagination/" target="_blank" rel="external">pagination</a></p>
<p>因此最后我的分页器代码变成了这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Pagination</div><div class="line">  className=&#123;style.pagination&#125;</div><div class="line">  defaultCurrent=&#123;<span class="number">1</span>&#125;</div><div class="line">  onChange=&#123;e =&gt; <span class="keyword">this</span>.changePage(e)&#125;</div><div class="line">  total=&#123;infos.length&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>所以还是熟能生巧吧…不知道有这种东西，还在傻傻的写这个组件    </p>
<h2 id="react展示型组件和容器型组件的数据传输"><a href="#react展示型组件和容器型组件的数据传输" class="headerlink" title="react展示型组件和容器型组件的数据传输"></a>react展示型组件和容器型组件的数据传输</h2><p>对于react，现在在实际开发中才算是慢慢领会到了一些些有意义的精髓把。<br>以下摘自<a href="http://www.redux.org.cn/docs/react-redux/quick-start.html" target="_blank" rel="external">Redux中文文档</a><br>在应用中，只有最顶层组件是对 Redux 可知（例如路由处理）这是很好的。所有它们的子组件都应该是“笨拙”的，并且是通过 props 获取数据。</p>
<p>因此，我们的容器型组件总是从Redux读取数据，并把数据和回调函数通过props传入子组件（即展示型组件中）；展示型组件绑定事件，调用回调函数，改变自身state，完成一次render。<br><img src="http://oczira72b.bkt.clouddn.com/QQ20161203-0.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到周末了，真的是想对本周的工作做一个总结，那就总结下本周又踩的一个坑把。&lt;br&gt;本周学到的东西和技巧还是挺多的，主要还是一些技巧性的东西以下就是其中之一。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
      <category term="React" scheme="http://xingbofeng.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>我学前端这些年</title>
    <link href="http://xingbofeng.github.io/2016/11/14/%E6%88%91%E5%AD%A6%E5%89%8D%E7%AB%AF%E8%BF%99%E4%BA%9B%E5%B9%B4/"/>
    <id>http://xingbofeng.github.io/2016/11/14/我学前端这些年/</id>
    <published>2016-11-14T06:46:00.000Z</published>
    <updated>2016-11-14T07:53:35.810Z</updated>
    
    <content type="html"><![CDATA[<p>2016年11月14日，天气晴。<br>心中萌生了很久的一个念头：一个新的阶段已经开始好几天了，是时候该自己给自己做个总结了。至于是什么总结，我想还是要从前端谈起。<br><a id="more"></a></p>
<p>接触前端，算是意料之外。<br>时间一定要回溯到2014年夏天。</p>
<p>至今还记得那年6月22号那天晚上，我一个人，在电脑面前反复点击查询成绩的场景。<br>对，那年高考我只考了577分，算是上天命中注定我就是将要来电子科大的，就是要去读软件专业的。<br>我只花了半个小时平复情绪，其实没什么大不了，自我安慰罢：大不了就高四再来一次。于是我到了考前我经常逛的高考吧，偶然看到了电子科大软院的宣传信息。<br>“要不我就填它保底吧？”<br>毕竟前一年的录取线才刚超过重本线几分呢！</p>
<p>恩，是这样的。我就来了。最后一个志愿来的。</p>
<p>其实偶尔，在深夜和室友交谈的时候我都常常假设说：如果当初我多考几分…如果当初大一我就努力学技术加了工作室…如果当初…<br>其实我自己是知道答案的，没有如果。不过我还是总想假设。因为我满足于现在的生活，我总想说服自己，如果我多考两分去了武汉理工，如果我多考三分去了吉林大学，如果我多考九分去了西南交大，我过的一定不比现在要好。</p>
<p>也许带着对大学的好奇与憧憬，晃晃忽忽地过了大一，翘课？玩游戏？通宵？这些我都做过？是，都做过。</p>
<p>不知道是什么时候，某一天吧，突然萌生了，我想要搞点事情的想法。也许是室友的强行推荐，大二初始，我加了星辰。<br>去之前，室友跟我说：如果不知道要选择什么方向的话，那就看里面的负责人是什么方向就好了。因为，负责人，技术也一定不会差到哪里去。</p>
<p>带我的学长<a href="https://github.com/LeuisKen" target="_blank" rel="external">LeuisKen</a>技术很屌，对人很好。对，就是这样机缘巧合地，接触了前端，学了html，学了css。<br>大二的我，似乎还是并不是太想要有改变世界的想法（其实现在也并没有），仍然想要做回大一时候无忧无虑玩耍的自己，还是想要翘课，还是想要玩游戏。<br>一切学习，我还是以完成任务的心态吧。<br>不过这一次，算是个转折，学前端，算是从这开始的吧。</p>
<p>恩，或许是年龄增长的原因，不再有以前高中或者大一时候那样的浮躁，或者说是贪玩的心思了。大二下，期末考试完，我想我应该去为自己的将来作出一点点努力。<br>这一次，我继续选择了前端。<br>接着就是暑假的实训，也就是从实训前两周开始，我重拾起扔掉太久的前端知识前端书籍。<br>在这期间，看了红宝书，学了jQuery，看了bootstrap，用了形形色色的jQuery插件。</p>
<p>其实这个时候才是瓶颈期的开始，无论是学长言传身教，还是浏览于各大博客网站之间，都有讲到前端开发瓶颈期的事儿。恩，这一次并不是太浮躁。<br>或许也是不久之前吧，我算是快要看到学习瓶颈期的结束，重新刷了红宝书，真正改变了以前错误地认为有了jQuery就能撸出一片天的想法。过了一遍es6，<br>感慨到前端开发的迅速发展。接触了less，sass。也从webpack，CommonJS，AMD，CMD感慨到前端模块化的快速发展。Angular将会gg，React已经上位。</p>
<p>也有阅读React文档，也写过一两个小应用。也算是接了一个校内小项目<a href="https://github.com/xingbofeng/ASMS" target="_blank" rel="external">ASMS</a>。</p>
<p>我觉得时机真的来了。我该去找个实习了。</p>
<p>如今已经入职<a href="https://github.com/knownsec" target="_blank" rel="external">知道创宇</a>了快要一周了，团队氛围真的很赞，有愿意花长时间带着新人入门的teacher<a href="https://github.com/zhaozhiming" target="_blank" rel="external">zhaozhiming</a>，也有呈现在我面前的新天地<a href="https://github.com/zhaozhiming/generator-modation" target="_blank" rel="external">generator-modation</a>!<br>暑假的自己，不满足于在川报仅仅是切切页面写写动画的自己，我想今天的生活，我总该是满意了。不论是一直想要深入研究的React和Redux，还是以前没有真正去接触的Immutable，Hapi，Antd，我都想要好好看看，好好学学。室友总是说我觉得新鲜的事物很屌，我想也是。不过我想，没有春风来，怎有冬雪化呢？</p>
<p>每当我眺望着对面峰汇中心大楼，也每当我中午做到腾讯食堂里面品尝美食的时候，我总会为自己在恰当的时间悬崖勒马而感到欣慰。当我不再为高考的失败而悔恨，当我不再为曾经的颓废而辩驳。我想，时间还不算晚，努力得也不算迟，未来是自己的，我，是真想要做好自己。</p>
<p>在文章的最后，我是希望对一些朋友说声谢谢的，谢谢你们在不同的时候，带我走上的不同的路。幸好殊途同归，我才能坐在腾讯大厦十一楼，现在这里，书写着自己曾经的故事。</p>
<p>感谢你们：</p>
<p><a href="https://github.com/LeuisKen" target="_blank" rel="external">LeuisKen</a></p>
<p><a href="https://github.com/ZX19951110" target="_blank" rel="external">ZX19951110</a></p>
<p><a href="https://github.com/yaochiqkl" target="_blank" rel="external">yaochiqkl</a></p>
<p><a href="https://github.com/zhaozhiming" target="_blank" rel="external">zhaozhiming</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年11月14日，天气晴。&lt;br&gt;心中萌生了很久的一个念头：一个新的阶段已经开始好几天了，是时候该自己给自己做个总结了。至于是什么总结，我想还是要从前端谈起。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xingbofeng.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="生活" scheme="http://xingbofeng.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>总结CSS常见重难点</title>
    <link href="http://xingbofeng.github.io/2016/11/01/%E6%80%BB%E7%BB%93CSS%E5%B8%B8%E8%A7%81%E9%87%8D%E9%9A%BE%E7%82%B9/"/>
    <id>http://xingbofeng.github.io/2016/11/01/总结CSS常见重难点/</id>
    <published>2016-11-01T00:11:00.000Z</published>
    <updated>2016-11-01T01:03:42.861Z</updated>
    
    <content type="html"><![CDATA[<p>以前的自己一直有一个误区：前端开发，重点还是js，而css的问题，遇到了再去查就行了。<br>最近有意识到自己存在这样的问题，因此此文就用作记录自己在开发过程中所遇到的一些css方面的问题吧。<br><a id="more"></a></p>
<h1 id="css水平-垂直居中"><a href="#css水平-垂直居中" class="headerlink" title="css水平/垂直居中"></a>css水平/垂直居中</h1><p>其实有很多很多种方法可以做到水平/垂直居中，但是各种方法的使用场景以及浏览器兼容性各不相同，以前也没有好好地总结过，在此也好做一个总结吧。</p>
<p>相关demo : <a href="http://www.xingbofeng.com/demos/demo1.html" target="_blank" rel="external">http://www.xingbofeng.com/demos/demo1.html</a></p>
<ul>
<li>定宽块级元素的水平居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定宽高，通过负外边距和绝对定位块级元素水平/垂直居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定宽高，通过margin:auto和绝对定位实现的块级元素水平/垂直居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box3</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">margin</span>: auto;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过css3的flex布局实现水平/垂直居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flexcontainer</span> &#123;</div><div class="line">	<span class="attribute">display</span>: flex;</div><div class="line">	<span class="attribute">justify-content</span>: center;</div><div class="line">	<span class="attribute">align-items</span>: center;</div><div class="line">	<span class="comment">/*对包围box的容器设置的css*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过css3的transform属性实现居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box5</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过display:table-cell实现居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tablecontainer</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box6</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>: middle;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过inline-block实现水平居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box7</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前的自己一直有一个误区：前端开发，重点还是js，而css的问题，遇到了再去查就行了。&lt;br&gt;最近有意识到自己存在这样的问题，因此此文就用作记录自己在开发过程中所遇到的一些css方面的问题吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="css" scheme="http://xingbofeng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>19岁，写给自己的话——记自己的知乎处女答</title>
    <link href="http://xingbofeng.github.io/2016/10/22/19%E5%B2%81%EF%BC%8C%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%9D%E2%80%94%E2%80%94%E8%AE%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9F%A5%E4%B9%8E%E5%A4%84%E5%A5%B3%E7%AD%94/"/>
    <id>http://xingbofeng.github.io/2016/10/22/19岁，写给自己的话——记自己的知乎处女答/</id>
    <published>2016-10-21T18:07:00.000Z</published>
    <updated>2016-10-23T15:51:26.548Z</updated>
    
    <content type="html"><![CDATA[<p>自己的知乎处女答，<a href="https://www.zhihu.com/question/51806419/answer/127759116" target="_blank" rel="external">原问题</a>“什么造就了现在的你？”<br><a id="more"></a><br>作者：Encounter<br>链接：<a href="https://www.zhihu.com/question/51806419/answer/127759116" target="_blank" rel="external">https://www.zhihu.com/question/51806419/answer/127759116</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
<p>嗯，先说说我吧，四川人，某电子信息类大学在读大三学生，软件工程专业，web前端初级开发者。</p>
<p>想在这分享(或者说是自己回忆)以前的几个故事。</p>
<p>父亲是一个化工企业的技术人员，母亲是一名中学老师。</p>
<p>小时候，生活在一个小县城里，嗯，就是那种所谓的城乡结合部，一边是街道，走出县城一点就是农村。小时候的自己，是一个极其贪玩的孩子，六七岁的时候就开始进网吧上网打游戏(那时候自己还没有网吧吧台高呢)。但由于母亲是当地中学老师的缘故，对于我的学习比较在意，所以成绩也不算落下。到了五年级的时候，父母为我做出了一个在我看来对于我的现在也许是相当正确的决定:跳级。</p>
<p>至于跳级，在我自己慢慢省事之后，究其原因，主要是两点:一是小学的自己太贪玩，特别是到了快要小学毕业的时候，父母为了不让我养成这种贪玩的习性，决定提前让我进入学习相对紧张的初中。</p>
<p>第二个原因，我认为也是题主所提出的，什么造就了现在的我，的第二个契机(或因素)。</p>
<p>初中班主任是直到现在，我仍旧敬佩的人。她是一名普通的语文老师。由于父母都是理工科出身，加之从小家庭里理科氛围的熏陶，自己的感应思维比起逻辑思维也许确实要有所欠缺。而我的初中班主任，她教会我的，其中的一点，是读书。</p>
<p>初中的时候，我们班级平均每天都会有大概半小时以上的集体读书时间，班级的藏书量也是比较充裕的，大多也是一些人生哲理与思考方面的书籍。可以说我到现在，19年来，思考与感应思维的培养，都是在那个时候，对，初中班主任教我读书的时候。除此之外，她也帮助我让我意识到一些自己存在的问题的:贪玩、做事不踏实等等。</p>
<p>因此，跳级的第二个原因，也算是主要原因吧，是为了让我赶上这样一位好老师。</p>
<p>第一和第二个契机，也算是我童年的写照。</p>
<p>后来初中毕业，很正常地读了高中。高中是在我们市的中学读的，因为初中成绩本来也全是不差，加之父母背后找了一些关系，高中也顺利地进入了学校里的重点班。</p>
<p>第三件自我觉得影响了我整个人生轨迹的大事，发生在高三。</p>
<p>先说说我们高中的情况吧:某地级市高中，每年高考也许会有一两个全省300名内，清华北大也算是有，但不多，一般也就一两个，两三个那种。</p>
<p>因此，对于学校来说，重点班的任务基本上就是:保证清华北大数量。</p>
<p>清楚的是，仅仅凭借高考裸分，想进入清华北大，是不保险的。人人都会有犯错失误的时候，即使是长期霸占年级第一的高手。因此，学校(高中班主任)需要选择一些人来提前做好勾兑(高考加分)</p>
<p>当时的四川高考加分一片，如果我没记错的话，大概就是8万元(公关费)”购买”国家二级运动员证书，获得高考体育加分十分。</p>
<p>嗯，对于我的家庭来说，出这一笔钱也不算太难，而且，按照以往模拟考试来说，成绩对于获得这样一个名额也是绰绰有余。</p>
<p>但是，并没有给我名额。更让当时的我(乃至自己刚进大学后)想不通的是，当时一个从进入高三，模拟考开始，成绩一直比我差的同学获得了这个名额。</p>
<p>其实现在想想，能拿到这个名额也是一种本事，它不只是在成绩上所体现的。</p>
<p>直到有一天，内心充满了不服气与委屈的我爆发了。高三后期，与班主任决裂，晚自习翻墙出去玩游戏，不再完成学习任务等等。</p>
<p>最后自食其果，模拟考试中年级前十的自己，高考意料之中地滑到了百名开外。</p>
<p>没有选择复读，因为那时的自己觉得，高三就是个噩梦。最终来到现在这个大学。</p>
<p>对于高考加分这件事情来说，它告诉我的是:”塞翁失马，焉知非福。”</p>
<p>我是以高考最后一个志愿来到电子科大的。现在的我，躺在宿舍的床上，写下这篇回答，扪心自问，我来到这里，选择这样的未来发展道路自己满意吗？我想说，我是满意的。</p>
<p>既然满意，那第三个契机或因素，我认为也是好的，积极的。即使当时的自己身处噩梦一般。</p>
<p>嗯，那第四个契机(或因素)，发生在大二。</p>
<p>大一到大二有大半年，自己相当颓废，没有参加班级活动，几乎没有加入任何社团学生会工作室组织，逃过无数多的课，一天睡的觉比高中两天睡的还要多。可能原因还是没有想通自己未来到底想要干什么，可能还是没有走出一些高考结束的阴影吧。</p>
<p>大学的室友(各种原因导致寝室只有两个人)，比我大两岁，在读大学以前，就把计算机，或者说编程当做自己的爱好，因此他毫无疑问地选择了计算机专业。在我大二的时候，他提醒了我，加入一个工作室，因此，我在懵懵懂懂中加入了一个工作室，也遇到了一个学长，在学长的建议下，选择了自己现在所做的，的前端开发方向，现在想来，也算是接触了有一段时间了，都说兴趣是最好的老师，嗯，身在其中才恍然大悟，原来我的兴趣竟然在此。现在在找实习，也希望能去的公司，能是让我发生下一个改变的契机吧！</p>
<p>以上，四个因素，也算是对我过去十九年的一个回忆吧。不算好，也不算坏，恰好地造就了现在的我:就读于四川某电子信息类大学年龄小于同年级同学的大三学生，爱生活，爱前端。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的知乎处女答，&lt;a href=&quot;https://www.zhihu.com/question/51806419/answer/127759116&quot;&gt;原问题&lt;/a&gt;“什么造就了现在的你？”&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xingbofeng.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="生活" scheme="http://xingbofeng.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>node初学之爬虫实现</title>
    <link href="http://xingbofeng.github.io/2016/09/26/node%E5%88%9D%E5%AD%A6%E4%B9%8B%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://xingbofeng.github.io/2016/09/26/node初学之爬虫实现/</id>
    <published>2016-09-25T16:48:00.000Z</published>
    <updated>2016-10-21T10:38:34.674Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个node的初学者，自己实践的第一个小玩意就是爬虫了。<br>看了网上教程之后觉得好好玩，于是又深入了解了一些node实现爬虫的原理，再去做了一些有意思的实践。<br><a id="more"></a><br>2016/10/21<br>最近有把这个模块打包发到npm包管理器上。大家可以通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install getcontent</div></pre></td></tr></table></figure></p>
<p>下载本项目代码<br>搭建nodejs的环境就不多说了，总的来说就是：别在windows下进行node开发（滑稽脸）</p>
<p>先说说node实现爬虫所需要的依赖包：<br><a href="http://visionmedia.github.io/superagent/" target="_blank" rel="external">superagent</a> 是个 http 方面的库，可以发起 get 或 post 请求。<br><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">cheerio</a> 大家可以理解成一个 Node.js 版的 jquery，用来从网页中以 css selector 取数据，使用方式跟 jquery 一样一样的，如.end()方法啊，.find()方法之类的。<br><a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> 这个不用多做解释，入门就应该了解的第一个npm<br><a href="https://github.com/bpedro/node-fs" target="_blank" rel="external">fs</a> 用于读写文件的一个依赖包<br><a href="https://github.com/request/request" target="_blank" rel="external">request</a> request模块让http请求变的更加简单,用于请求数据。</p>
<p>然后开始我们愉快的爬虫实践吧！<br>第一步肯定是新建一个项目目录，在目录下打开终端，初始化项目，然后安装依赖包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">npm install superagent cheerio express fs request--save</div></pre></td></tr></table></figure></p>
<p>然后打开我们根目录下的package.json文件，可以看到一些依赖包的相关信息。<br>这得益于我们的–save 参数，这个参数的作用，就是会在你安装依赖的同时，自动把这些依赖写入 package.json。<br><img src="http://oczira72b.bkt.clouddn.com/pachongpackagejson.png" alt="image"></p>
<h1 id="爬取信息"><a href="#爬取信息" class="headerlink" title="爬取信息"></a>爬取信息</h1><p>然后开始写我们的爬虫应用，首先我实现的是爬取<a href="http://www.nenu.edu.cn/140/list.htm" target="_blank" rel="external">东北师范大学官网（通知公告）</a>的相关信息<br><img src="http://oczira72b.bkt.clouddn.com/pachongdbsfdx.png" alt="image"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="comment">// 引入依赖</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="comment">// 建立 express 实例</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> items = [];</div><div class="line">  <span class="comment">// 用 superagent 去抓取 http://www.nenu.edu.cn/140/list.htm 的内容</span></div><div class="line">  <span class="comment">// 由于该页面目录下共53页内容，因此执行下列循环</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">54</span>; i++) &#123;</div><div class="line">    superagent.get(<span class="string">'http://www.nenu.edu.cn/140/list'</span> + i + <span class="string">'.htm'</span>)</div><div class="line">      .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, sres</span>) </span>&#123;</div><div class="line">        <span class="comment">// 常规的错误处理</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">return</span> next(err);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后</span></div><div class="line">        <span class="comment">// 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$`</span></div><div class="line">        <span class="comment">// 剩下就都是 jquery 的内容了</span></div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(sres.text);</div><div class="line">        <span class="comment">// 在class为news-table-item的标签下选择相关信息</span></div><div class="line">        $(<span class="string">'.news-table-item'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> $element1 = $(element).find(<span class="string">'td h2 a'</span>).attr(<span class="string">'title'</span>);</div><div class="line">          <span class="keyword">var</span> $element2 = $(element).find(<span class="string">'td.news-table-department span'</span>).text();</div><div class="line">          <span class="keyword">var</span> $element3 = $(element).find(<span class="string">'td.news-table-date span'</span>).text();</div><div class="line">          <span class="keyword">var</span> $element4 = $(element).find(<span class="string">'td.news-table-count span.WP_VisitCount'</span>).text();</div><div class="line">          items.push(&#123;</div><div class="line">            title: $element1,</div><div class="line">            employer: $element2,</div><div class="line">            date: $element3,</div><div class="line">            readingtimes: $element4,</div><div class="line">          &#125;);</div><div class="line">          <span class="comment">//保存信息的格式，为一个json数组</span></div><div class="line">          <span class="keyword">var</span> message = <span class="string">'title:'</span>+$element1+<span class="string">'\n'</span>+<span class="string">'employer:'</span>+$element2+<span class="string">'\n'</span>+<span class="string">'date:'</span>+$element3+<span class="string">'\n'</span>+<span class="string">'readingtimes:'</span>+$element4+<span class="string">'\n'</span>+<span class="string">'\n'</span>;</div><div class="line">          <span class="comment">//将爬取的信息写入本地目录下一个叫做message.txt的文档内</span></div><div class="line">          fs.appendFile(<span class="string">'message.txt'</span>, message, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//console.log(items);</span></div><div class="line"></div><div class="line">      &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//监听3000端口</span></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>之后我们执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure></p>
<p>出现了以下效果，那么我们爬取信息的步骤算是完成了<br><img src="http://oczira72b.bkt.clouddn.com/pachongneirong.png" alt="image"></p>
<h1 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h1><p>类似的，我们开始爬取<a href="http://www.nipic.com/index.html" target="_blank" rel="external">昵图网</a>的index目录下所有图片<br>核心应用逻辑是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> items = [];</div><div class="line">    superagent.get(<span class="string">'http://www.nipic.com/index.html'</span>)</div><div class="line">      .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, sres</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">return</span> next(err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(sres.text);</div><div class="line">        $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx,element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $element = $(element).attr(<span class="string">'src'</span>);</div><div class="line">            items.push($element);</div><div class="line">            request.head($element,<span class="function"><span class="keyword">function</span> (<span class="params">err,res,body</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(err);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//写入本地目录下的image文件夹，并命名为$(element).attr('alt').jpg</span></div><div class="line">            request($element).pipe(fs.createWriteStream(<span class="string">'image/'</span>+ $(element).attr(<span class="string">'alt'</span>) + <span class="string">'.jpg'</span>));</div><div class="line">        &#125;)</div><div class="line">        <span class="built_in">console</span>.log(items);</div><div class="line"></div><div class="line">      &#125;);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/2016-09-26%2000-39-31%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="image"><br>OK，一个简单的爬虫就是这么简单。这里我们还没有利用到 Node.js 的异步并发特性。姿势水平还是有待提高。</p>
<p>当然在最后想说：合理利用nodejs技术，不做违法犯罪的事情，例如一定不要去尝试爬取<strong style="color: red;font-size: 30px;">18禁</strong>的相关网站（当然我试过一次，貌似爬不出来）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个node的初学者，自己实践的第一个小玩意就是爬虫了。&lt;br&gt;看了网上教程之后觉得好好玩，于是又深入了解了一些node实现爬虫的原理，再去做了一些有意思的实践。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="node" scheme="http://xingbofeng.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>对中文字符串拼音排序的探究</title>
    <link href="http://xingbofeng.github.io/2016/09/19/%E5%AF%B9%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>http://xingbofeng.github.io/2016/09/19/对中文字符串拼音排序的探究/</id>
    <published>2016-09-19T09:46:00.000Z</published>
    <updated>2016-09-19T10:52:01.441Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习前端知识的时候遇到的一个问题，如果把一个中文字符串按汉语拼音的序列排序？<br>于是上网搜到了一些解决办法。<br><a id="more"></a></p>
<h1 id="使用localeCompare-方法"><a href="#使用localeCompare-方法" class="headerlink" title="使用localeCompare() 方法"></a>使用localeCompare() 方法</h1><p>如果只是需要通过汉语拼音首字母排序的话，那么可以使用JavaScript原生的localeCompare() 方法。<br><img src="http://oczira72b.bkt.clouddn.com/localecompare.png" alt="image"><br>localeCompare() 方法以本地特定的顺序（即汉语拼音首字母的顺序）与 stringObject 进行比较的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> OW = [<span class="string">"守"</span>,<span class="string">"望"</span>,<span class="string">"屁"</span>,<span class="string">"股"</span>];</div><div class="line">         <span class="built_in">console</span>.log(OW.sort(</div><div class="line">             <span class="function"><span class="keyword">function</span> <span class="title">compareFunction</span>(<span class="params">param1,param2</span>)</span>&#123;</div><div class="line">                 <span class="keyword">return</span> param1.localeCompare(param2);  <span class="comment">//["股", "屁", "守", "望"]</span></div><div class="line">             &#125;</div><div class="line">         ));</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/localecompare1.png" alt="image"></p>
<h1 id="封装一个函数实现此功能"><a href="#封装一个函数实现此功能" class="headerlink" title="封装一个函数实现此功能"></a>封装一个函数实现此功能</h1><p>如果你的需求不止满足于按汉语拼音顺序排序，还想要获取某个字符串的拼音，甚至是想实现通过首字母索引实现页面查找功能，那么也就需要自己封装此事件了。<br>利用搜索引擎搜索这个问题，发现几乎都是一种解决方法：把整个汉字库映射到每个汉字的拼音上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Pinyin = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> Pinyin = <span class="function"><span class="keyword">function</span> (<span class="params">ops</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.initialize(ops);</div><div class="line">    &#125;,</div><div class="line">     </div><div class="line">    options = &#123;</div><div class="line">        checkPolyphone: <span class="literal">false</span>,</div><div class="line">        charcase: <span class="string">'default'</span></div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">     </div><div class="line">    Pinyin.fn = Pinyin.prototype = &#123;</div><div class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params">ops</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.options = extend(options, ops);</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">        initialize: <span class="function"><span class="keyword">function</span>(<span class="params">ops</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.init(ops);</div><div class="line">            <span class="keyword">this</span>.char_dict = <span class="string">""</span></div><div class="line">            <span class="keyword">this</span>.full_dict = &#123;<span class="string">"a"</span>:<span class="string">"\u554a\u963f\u9515"</span>,<span class="string">"ai"</span>:<span class="string">"\u57c3\u6328\u54ce\u5509\u54c0\u7691\u764c\u853c\u77ee\u827e\u788d\u7231\u9698\u8bf6\u6371\u55f3\u55cc\u5ad2\u7477\u66a7\u7839\u953f\u972d"</span>,<span class="string">"an"</span>:<span class="string">"\u978d\u6c28\u5b89\u4ffa\u6309\u6697\u5cb8\u80fa\u6848\u8c19\u57ef\u63de\u72b4\u5eb5\u6849\u94f5\u9e4c\u9878\u9eef"</span>,<span class="string">"ang"</span>:<span class="string">"\u80ae\u6602\u76ce"</span>,<span class="string">"ao"</span>:<span class="string">"\u51f9\u6556\u71ac\u7ff1\u8884\u50b2\u5965\u61ca\u6fb3\u5773\u62d7\u55f7\u5662\u5c99\u5ed2\u9068\u5aaa\u9a9c\u8071\u87af\u93ca\u9ccc\u93d6"</span>,<span class="string">"ba"</span>:<span class="string">"\u82ad\u634c\u6252\u53ed\u5427\u7b06\u516b\u75a4\u5df4\u62d4\u8dcb\u9776\u628a\u8019\u575d\u9738\u7f62\u7238\u8307\u83dd\u8406\u636d\u5c9c\u705e\u6777\u94af\u7c91\u9c85\u9b43"</span>,<span class="string">"bai"</span>:<span class="string">"\u767d\u67cf\u767e\u6446\u4f70\u8d25\u62dc\u7a17\u859c\u63b0\u97b4"</span>,<span class="string">"ban"</span>:<span class="string">"\u6591\u73ed\u642c\u6273\u822c\u9881\u677f\u7248\u626e\u62cc\u4f34\u74e3\u534a\u529e\u7eca\u962a\u5742\u8c73\u94a3\u7622\u764d\u8228"</span>,<span class="string">"bang"</span>:<span class="string">"\u90a6\u5e2e\u6886\u699c\u8180\u7ed1\u68d2\u78c5\u868c\u9551\u508d\u8c24\u84a1\u8783"</span>,<span class="string">"bao"</span>:<span class="string">"\u82de\u80de\u5305\u8912\u96f9\u4fdd\u5821\u9971\u5b9d\u62b1\u62a5\u66b4\u8c79\u9c8d\u7206\u52f9\u8446\u5b80\u5b62\u7172\u9e28\u8913\u8db5\u9f85"</span>,<span class="string">"bo"</span>:<span class="string">"\u5265\u8584\u73bb\u83e0\u64ad\u62e8\u94b5\u6ce2\u535a\u52c3\u640f\u94c2\u7b94\u4f2f\u5e1b\u8236\u8116\u818a\u6e24\u6cca\u9a73\u4eb3\u8543\u5575\u997d\u6a97\u64d8\u7934\u94b9\u9e41\u7c38\u8ddb"</span>,<span class="string">"bei"</span>:<span class="string">"\u676f\u7891\u60b2\u5351\u5317\u8f88\u80cc\u8d1d\u94a1\u500d\u72c8\u5907\u60eb\u7119\u88ab\u5b5b\u9642\u90b6\u57e4\u84d3\u5457\u602b\u6096\u789a\u9e4e\u8919\u943e"</span>,<span class="string">"ben"</span>:<span class="string">"\u5954\u82ef\u672c\u7b28\u755a\u574c\u951b"</span>,<span class="string">"beng"</span>:<span class="string">"\u5d29\u7ef7\u752d\u6cf5\u8e66\u8ff8\u552a\u5623\u750f"</span>,<span class="string">"bi"</span>:<span class="string">"\u903c\u9f3b\u6bd4\u9119\u7b14\u5f7c\u78a7\u84d6\u853d\u6bd5\u6bd9\u6bd6\u5e01\u5e87\u75f9\u95ed\u655d\u5f0a\u5fc5\u8f9f\u58c1\u81c2\u907f\u965b\u5315\u4ef3\u4ffe\u8298\u835c\u8378\u5421\u54d4\u72f4\u5eb3\u610e\u6ed7\u6fde\u5f3c\u59a3\u5a62\u5b16\u74a7\u8d32\u7540\u94cb\u79d5\u88e8\u7b5a\u7b85\u7be6\u822d\u895e\u8df8\u9ac0"</span>,<span class="string">"bian"</span>:<span class="string">"\u97ad\u8fb9\u7f16\u8d2c\u6241\u4fbf\u53d8\u535e\u8fa8\u8fa9\u8fab\u904d\u533e\u5f01\u82c4\u5fed\u6c74\u7f0f\u7178\u782d\u78a5\u7a39\u7a86\u8759\u7b3e\u9cca"</span>,<span class="string">"biao"</span>:<span class="string">"\u6807\u5f6a\u8198\u8868\u5a4a\u9aa0\u98d1\u98d9\u98da\u706c\u9556\u9573\u762d\u88f1\u9cd4"</span>,<span class="string">"bie"</span>:<span class="string">"\u9cd6\u618b\u522b\u762a\u8e69\u9cd8"</span>,<span class="string">"bin"</span>:<span class="string">"\u5f6c\u658c\u6fd2\u6ee8\u5bbe\u6448\u50a7\u6d5c\u7f24\u73a2\u6ba1\u8191\u9554\u9acc\u9b13"</span>,<span class="string">"bing"</span>:<span class="string">"\u5175\u51b0\u67c4\u4e19\u79c9\u997c\u70b3\u75c5\u5e76\u7980\u90b4\u6452\u7ee0\u678b\u69df\u71f9"</span>,<span class="string">"bu"</span>:<span class="string">"\u6355\u535c\u54fa\u8865\u57e0\u4e0d\u5e03\u6b65\u7c3f\u90e8\u6016\u62ca\u535f\u900b\u74ff\u6661\u949a\u91ad"</span>,<span class="string">"ca"</span>:<span class="string">"\u64e6\u5693\u7924"</span>,<span class="string">"cai"</span>:<span class="string">"\u731c\u88c1\u6750\u624d\u8d22\u776c\u8e29\u91c7\u5f69\u83dc\u8521"</span>,<span class="string">"can"</span>:<span class="string">"\u9910\u53c2\u8695\u6b8b\u60ed\u60e8\u707f\u9a96\u74a8\u7cb2\u9eea"</span>,<span class="string">"cang"</span>:<span class="string">"\u82cd\u8231\u4ed3\u6ca7\u85cf\u4f27"</span>,<span class="string">"cao"</span>:<span class="string">"\u64cd\u7cd9\u69fd\u66f9\u8349\u8279\u5608\u6f15\u87ac\u825a"</span>,<span class="string">"ce"</span>:<span class="string">"\u5395\u7b56\u4fa7\u518c\u6d4b\u5202\u5e3b\u607b"</span>,<span class="string">"ceng"</span>:<span class="string">"\u5c42\u8e6d\u564c"</span>,<span class="string">"cha"</span>:<span class="string">"\u63d2\u53c9\u832c\u8336\u67e5\u78b4\u643d\u5bdf\u5c94\u5dee\u8be7\u7339\u9987\u6c4a\u59f9\u6748\u6942\u69ce\u6aab\u9497\u9538\u9572\u8869"</span>,<span class="string">"chai"</span>:<span class="string">"\u62c6\u67f4\u8c7a\u4faa\u8308\u7625\u867f\u9f87"</span>,<span class="string">"chan"</span>:<span class="string">"\u6400\u63ba\u8749\u998b\u8c17\u7f20\u94f2\u4ea7\u9610\u98a4\u5181\u8c04\u8c36\u8487\u5edb\u5fcf\u6f7a\u6fb6\u5b71\u7fbc\u5a75\u5b17\u9aa3\u89c7\u7985\u9561\u88e3\u87fe\u8e94"</span>,<span class="string">"chang"</span>:<span class="string">"\u660c\u7316\u573a\u5c1d\u5e38\u957f\u507f\u80a0\u5382\u655e\u7545\u5531\u5021\u4f25\u9b2f\u82cc\u83d6\u5f9c\u6005\u60dd\u960a\u5a3c\u5ae6\u6636\u6c05\u9cb3"</span>,<span class="string">"chao"</span>:<span class="string">"\u8d85\u6284\u949e\u671d\u5632\u6f6e\u5de2\u5435\u7092\u600a\u7ec9\u6641\u8016"</span>,<span class="string">"che"</span>:<span class="string">"\u8f66\u626f\u64a4\u63a3\u5f7b\u6f88\u577c\u5c6e\u7817"</span>,<span class="string">"chen"</span>:<span class="string">"\u90f4\u81e3\u8fb0\u5c18\u6668\u5ff1\u6c89\u9648\u8d81\u886c\u79f0\u8c0c\u62bb\u55d4\u5bb8\u741b\u6987\u809c\u80c2\u789c\u9f80"</span>,<span class="string">"cheng"</span>:<span class="string">"\u6491\u57ce\u6a59\u6210\u5448\u4e58\u7a0b\u60e9\u6f84\u8bda\u627f\u901e\u9a8b\u79e4\u57d5\u5d4a\u5fb5\u6d48\u67a8\u67fd\u6a18\u665f\u584d\u77a0\u94d6\u88ce\u86cf\u9172"</span>,<span class="string">"chi"</span>:<span class="string">"\u5403\u75f4\u6301\u5319\u6c60\u8fdf\u5f1b\u9a70\u803b\u9f7f\u4f88\u5c3a\u8d64\u7fc5\u65a5\u70bd\u50ba\u5880\u82aa\u830c\u640b\u53f1\u54e7\u557b\u55e4\u5f73\u996c\u6cb2\u5ab8\u6555\u80dd\u7719\u7735\u9e31\u761b\u892b\u86a9\u87ad\u7b1e\u7bea\u8c49\u8e05\u8e1f\u9b51"</span>,<span class="string">"chong"</span>:<span class="string">"\u5145\u51b2\u866b\u5d07\u5ba0\u833a\u5fe1\u61a7\u94f3\u825f"</span>,<span class="string">"chou"</span>:<span class="string">"\u62bd\u916c\u7574\u8e0c\u7a20\u6101\u7b79\u4ec7\u7ef8\u7785\u4e11\u4fe6\u5733\u5e31\u60c6\u6eb4\u59af\u7633\u96e0\u9c8b"</span>,<span class="string">"chu"</span>:<span class="string">"\u81ed\u521d\u51fa\u6a71\u53a8\u8e87\u9504\u96cf\u6ec1\u9664\u695a\u7840\u50a8\u77d7\u6410\u89e6\u5904\u4e8d\u520d\u61b7\u7ecc\u6775\u696e\u6a17\u870d\u8e70\u9edc"</span>,<span class="string">"chuan"</span>:<span class="string">"\u63e3\u5ddd\u7a7f\u693d\u4f20\u8239\u5598\u4e32\u63be\u821b\u60f4\u9044\u5ddb\u6c1a\u948f\u9569\u8221"</span>,<span class="string">"chuang"</span>:<span class="string">"\u75ae\u7a97\u5e62\u5e8a\u95ef\u521b\u6006"</span>,<span class="string">"chui"</span>:<span class="string">"\u5439\u708a\u6376\u9524\u5782\u9672\u68f0\u69cc"</span>,<span class="string">"chun"</span>:<span class="string">"\u6625\u693f\u9187\u5507\u6df3\u7eaf\u8822\u4fc3\u83bc\u6c8c\u80ab\u6710\u9e51\u877d"</span>,<span class="string">"chuo"</span>:<span class="string">"\u6233\u7ef0\u851f\u8fb6\u8f8d\u955e\u8e14\u9f8a"</span>,<span class="string">"ci"</span>:<span class="string">"\u75b5\u8328\u78c1\u96cc\u8f9e\u6148\u74f7\u8bcd\u6b64\u523a\u8d50\u6b21\u8360\u5472\u5d6f\u9e5a\u8785\u7ccd\u8d91"</span>,<span class="string">"cong"</span>:<span class="string">"\u806a\u8471\u56f1\u5306\u4ece\u4e1b\u506c\u82c1\u6dd9\u9aa2\u742e\u7481\u679e"</span>,<span class="string">"cu"</span>:<span class="string">"\u51d1\u7c97\u918b\u7c07\u731d\u6b82\u8e59"</span>,<span class="string">"cuan"</span>:<span class="string">"\u8e7f\u7be1\u7a9c\u6c46\u64ba\u6615\u7228"</span>,<span class="string">"cui"</span>:<span class="string">"\u6467\u5d14\u50ac\u8106\u7601\u7cb9\u6dec\u7fe0\u8403\u60b4\u7480\u69b1\u96b9"</span>,<span class="string">"cun"</span>:<span class="string">"\u6751\u5b58\u5bf8\u78cb\u5fd6\u76b4"</span>,<span class="string">"cuo"</span>:<span class="string">"\u64ae\u6413\u63aa\u632b\u9519\u539d\u811e\u9509\u77ec\u75e4\u9e7e\u8e49\u8e9c"</span>,<span class="string">"da"</span>:<span class="string">"\u642d\u8fbe\u7b54\u7629\u6253\u5927\u8037\u54d2\u55d2\u601b\u59b2\u75b8\u8921\u7b2a\u977c\u9791"</span>,<span class="string">"dai"</span>:<span class="string">"\u5446\u6b79\u50a3\u6234\u5e26\u6b86\u4ee3\u8d37\u888b\u5f85\u902e\u6020\u57ed\u7519\u5454\u5cb1\u8fe8\u902f\u9a80\u7ed0\u73b3\u9edb"</span>,<span class="string">"dan"</span>:<span class="string">"\u803d\u62c5\u4e39\u5355\u90f8\u63b8\u80c6\u65e6\u6c2e\u4f46\u60ee\u6de1\u8bde\u5f39\u86cb\u4ebb\u510b\u5369\u840f\u5556\u6fb9\u6a90\u6b9a\u8d55\u7708\u7605\u8043\u7baa"</span>,<span class="string">"dang"</span>:<span class="string">"\u5f53\u6321\u515a\u8361\u6863\u8c20\u51fc\u83ea\u5b95\u7800\u94db\u88c6"</span>,<span class="string">"dao"</span>:<span class="string">"\u5200\u6363\u8e48\u5012\u5c9b\u7977\u5bfc\u5230\u7a3b\u60bc\u9053\u76d7\u53e8\u5541\u5fc9\u6d2e\u6c18\u7118\u5fd1\u7e9b"</span>,<span class="string">"de"</span>:<span class="string">"\u5fb7\u5f97\u7684\u951d"</span>,<span class="string">"deng"</span>:<span class="string">"\u8e6c\u706f\u767b\u7b49\u77aa\u51f3\u9093\u5654\u5d9d\u6225\u78f4\u956b\u7c26"</span>,<span class="string">"di"</span>:<span class="string">"\u5824\u4f4e\u6ef4\u8fea\u654c\u7b1b\u72c4\u6da4\u7fdf\u5ae1\u62b5\u5e95\u5730\u8482\u7b2c\u5e1d\u5f1f\u9012\u7f14\u6c10\u7c74\u8bcb\u8c1b\u90b8\u577b\u839c\u837b\u5600\u5a23\u67e2\u68e3\u89cc\u7825\u78b2\u7747\u955d\u7f9d\u9ab6"</span>,<span class="string">"dian"</span>:<span class="string">"\u98a0\u6382\u6ec7\u7898\u70b9\u5178\u975b\u57ab\u7535\u4f43\u7538\u5e97\u60e6\u5960\u6dc0\u6bbf\u4e36\u963d\u576b\u57dd\u5dc5\u73b7\u765c\u766b\u7c1f\u8e2e"</span>,<span class="string">"diao"</span>:<span class="string">"\u7889\u53fc\u96d5\u51cb\u5201\u6389\u540a\u9493\u8c03\u8f7a\u94de\u8729\u7c9c\u8c82"</span>,<span class="string">"die"</span>:<span class="string">"\u8dcc\u7239\u789f\u8776\u8fed\u8c0d\u53e0\u4f5a\u57a4\u581e\u63f2\u558b\u6e2b\u8f76\u7252\u74de\u8936\u800b\u8e40\u9cbd\u9cce"</span>,<span class="string">"ding"</span>:<span class="string">"\u4e01\u76ef\u53ee\u9489\u9876\u9f0e\u952d\u5b9a\u8ba2\u4e22\u4ec3\u5576\u738e\u815a\u7887\u753a\u94e4\u7594\u8035\u914a"</span>,<span class="string">"dong"</span>:<span class="string">"\u4e1c\u51ac\u8463\u61c2\u52a8\u680b\u4f97\u606b\u51bb\u6d1e\u578c\u549a\u5cbd\u5cd2\u5902\u6c21\u80e8\u80f4\u7850\u9e2b"</span>,<span class="string">"dou"</span>:<span class="string">"\u515c\u6296\u6597\u9661\u8c46\u9017\u75d8\u8538\u94ad\u7aa6\u7aac\u86aa\u7bfc\u9161"</span>,<span class="string">"du"</span>:<span class="string">"\u90fd\u7763\u6bd2\u728a\u72ec\u8bfb\u5835\u7779\u8d4c\u675c\u9540\u809a\u5ea6\u6e21\u5992\u828f\u561f\u6e0e\u691f\u6a50\u724d\u8839\u7b03\u9ad1\u9ee9"</span>,<span class="string">"duan"</span>:<span class="string">"\u7aef\u77ed\u953b\u6bb5\u65ad\u7f0e\u5f56\u6934\u7145\u7c16"</span>,<span class="string">"dui"</span>:<span class="string">"\u5806\u5151\u961f\u5bf9\u603c\u619d\u7893"</span>,<span class="string">"dun"</span>:<span class="string">"\u58a9\u5428\u8e72\u6566\u987f\u56e4\u949d\u76fe\u9041\u7096\u7818\u7905\u76f9\u9566\u8db8"</span>,<span class="string">"duo"</span>:<span class="string">"\u6387\u54c6\u591a\u593a\u579b\u8eb2\u6735\u8dfa\u8235\u5241\u60f0\u5815\u5484\u54da\u7f0d\u67c1\u94ce\u88f0\u8e31"</span>,<span class="string">"e"</span>:<span class="string">"\u86fe\u5ce8\u9e45\u4fc4\u989d\u8bb9\u5a25\u6076\u5384\u627c\u904f\u9102\u997f\u5669\u8c14\u57a9\u57ad\u82ca\u83aa\u843c\u5443\u6115\u5c59\u5a40\u8f6d\u66f7\u816d\u786a\u9507\u9537\u9e57\u989a\u9cc4"</span>,<span class="string">"en"</span>:<span class="string">"\u6069\u84bd\u6441\u5514\u55ef"</span>,<span class="string">"er"</span>:<span class="string">"\u800c\u513f\u8033\u5c14\u9975\u6d31\u4e8c\u8d30\u8fe9\u73e5\u94d2\u9e38\u9c95"</span>,<span class="string">"fa"</span>:<span class="string">"\u53d1\u7f5a\u7b4f\u4f10\u4e4f\u9600\u6cd5\u73d0\u57a1\u781d"</span>,<span class="string">"fan"</span>:<span class="string">"\u85e9\u5e06\u756a\u7ffb\u6a0a\u77fe\u9492\u7e41\u51e1\u70e6\u53cd\u8fd4\u8303\u8d29\u72af\u996d\u6cdb\u8629\u5e61\u72ad\u68b5\u6535\u71d4\u7548\u8e6f"</span>,<span class="string">"fang"</span>:<span class="string">"\u574a\u82b3\u65b9\u80aa\u623f\u9632\u59a8\u4eff\u8bbf\u7eba\u653e\u531a\u90a1\u5f77\u94ab\u822b\u9c82"</span>,<span class="string">"fei"</span>:<span class="string">"\u83f2\u975e\u5561\u98de\u80a5\u532a\u8bfd\u5420\u80ba\u5e9f\u6cb8\u8d39\u82be\u72d2\u60b1\u6ddd\u5983\u7ecb\u7eef\u69a7\u8153\u6590\u6249\u7953\u7829\u9544\u75f1\u871a\u7bda\u7fe1\u970f\u9cb1"</span>,<span class="string">"fen"</span>:<span class="string">"\u82ac\u915a\u5429\u6c1b\u5206\u7eb7\u575f\u711a\u6c7e\u7c89\u594b\u4efd\u5fff\u6124\u7caa\u507e\u7035\u68fc\u610d\u9cbc\u9f22"</span>,<span class="string">"feng"</span>:<span class="string">"\u4e30\u5c01\u67ab\u8702\u5cf0\u950b\u98ce\u75af\u70fd\u9022\u51af\u7f1d\u8bbd\u5949\u51e4\u4ff8\u9146\u8451\u6ca3\u781c"</span>,<span class="string">"fu"</span>:<span class="string">"\u4f5b\u5426\u592b\u6577\u80a4\u5b75\u6276\u62c2\u8f90\u5e45\u6c1f\u7b26\u4f0f\u4fd8\u670d\u6d6e\u6daa\u798f\u88b1\u5f17\u752b\u629a\u8f85\u4fef\u91dc\u65a7\u812f\u8151\u5e9c\u8150\u8d74\u526f\u8986\u8d4b\u590d\u5085\u4ed8\u961c\u7236\u8179\u8d1f\u5bcc\u8ba3\u9644\u5987\u7f1a\u5490\u5310\u51eb\u90db\u8299\u82fb\u832f\u83a9\u83d4\u544b\u5e5e\u6ecf\u8274\u5b5a\u9a78\u7ec2\u6874\u8d59\u9efb\u9efc\u7f58\u7a03\u99a5\u864d\u86a8\u8709\u8760\u876e\u9eb8\u8dba\u8dd7\u9cc6"</span>,<span class="string">"ga"</span>:<span class="string">"\u5676\u560e\u86e4\u5c2c\u5477\u5c15\u5c1c\u65ee\u9486"</span>,<span class="string">"gai"</span>:<span class="string">"\u8be5\u6539\u6982\u9499\u76d6\u6e89\u4e10\u9654\u5793\u6224\u8d45\u80f2"</span>,<span class="string">"gan"</span>:<span class="string">"\u5e72\u7518\u6746\u67d1\u7aff\u809d\u8d76\u611f\u79c6\u6562\u8d63\u5769\u82f7\u5c34\u64c0\u6cd4\u6de6\u6f89\u7ec0\u6a44\u65f0\u77f8\u75b3\u9150"</span>,<span class="string">"gang"</span>:<span class="string">"\u5188\u521a\u94a2\u7f38\u809b\u7eb2\u5c97\u6e2f\u6206\u7f61\u9883\u7b7b"</span>,<span class="string">"gong"</span>:<span class="string">"\u6760\u5de5\u653b\u529f\u606d\u9f9a\u4f9b\u8eac\u516c\u5bab\u5f13\u5de9\u6c5e\u62f1\u8d21\u5171\u857b\u5efe\u54a3\u73d9\u80b1\u86a3\u86e9\u89e5"</span>,<span class="string">"gao"</span>:<span class="string">"\u7bd9\u768b\u9ad8\u818f\u7f94\u7cd5\u641e\u9550\u7a3f\u544a\u777e\u8bf0\u90dc\u84bf\u85c1\u7f1f\u69d4\u69c1\u6772\u9506"</span>,<span class="string">"ge"</span>:<span class="string">"\u54e5\u6b4c\u6401\u6208\u9e3d\u80f3\u7599\u5272\u9769\u845b\u683c\u9601\u9694\u94ec\u4e2a\u5404\u9b32\u4ee1\u54ff\u5865\u55dd\u7ea5\u643f\u8188\u784c\u94ea\u9549\u88bc\u988c\u867c\u8238\u9abc\u9ac2"</span>,<span class="string">"gei"</span>:<span class="string">"\u7ed9"</span>,<span class="string">"gen"</span>:<span class="string">"\u6839\u8ddf\u4e98\u831b\u54cf\u826e"</span>,<span class="string">"geng"</span>:<span class="string">"\u8015\u66f4\u5e9a\u7fb9\u57c2\u803f\u6897\u54fd\u8d53\u9ca0"</span>,<span class="string">"gou"</span>:<span class="string">"\u94a9\u52fe\u6c9f\u82df\u72d7\u57a2\u6784\u8d2d\u591f\u4f5d\u8bdf\u5ca3\u9058\u5abe\u7f11\u89cf\u5f40\u9e32\u7b31\u7bdd\u97b2"</span>,<span class="string">"gu"</span>:<span class="string">"\u8f9c\u83c7\u5495\u7b8d\u4f30\u6cbd\u5b64\u59d1\u9f13\u53e4\u86ca\u9aa8\u8c37\u80a1\u6545\u987e\u56fa\u96c7\u560f\u8bc2\u83f0\u54cc\u5d2e\u6c69\u688f\u8f71\u726f\u727f\u80cd\u81cc\u6bc2\u77bd\u7f5f\u94b4\u9522\u74e0\u9e2a\u9e44\u75fc\u86c4\u9164\u89da\u9cb4\u9ab0\u9e58"</span>,<span class="string">"gua"</span>:<span class="string">"\u522e\u74dc\u5250\u5be1\u6302\u8902\u5366\u8bd6\u5471\u681d\u9e39"</span>,<span class="string">"guai"</span>:<span class="string">"\u4e56\u62d0\u602a\u54d9"</span>,<span class="string">"guan"</span>:<span class="string">"\u68fa\u5173\u5b98\u51a0\u89c2\u7ba1\u9986\u7f50\u60ef\u704c\u8d2f\u500c\u839e\u63bc\u6dab\u76e5\u9e73\u9ccf"</span>,<span class="string">"guang"</span>:<span class="string">"\u5149\u5e7f\u901b\u72b7\u6844\u80f1\u7592"</span>,<span class="string">"gui"</span>:<span class="string">"\u7470\u89c4\u572d\u7845\u5f52\u9f9f\u95fa\u8f68\u9b3c\u8be1\u7678\u6842\u67dc\u8dea\u8d35\u523d\u5326\u523f\u5e8b\u5b84\u59ab\u6867\u7085\u6677\u7688\u7c0b\u9c91\u9cdc"</span>,<span class="string">"gun"</span>:<span class="string">"\u8f8a\u6eda\u68cd\u4e28\u886e\u7ef2\u78d9\u9ca7"</span>,<span class="string">"guo"</span>:<span class="string">"\u9505\u90ed\u56fd\u679c\u88f9\u8fc7\u9998\u8803\u57da\u63b4\u5459\u56d7\u5e3c\u5d1e\u7313\u6901\u8662\u951e\u8052\u872e\u873e\u8748"</span>,<span class="string">"ha"</span>:<span class="string">"\u54c8"</span>,<span class="string">"hai"</span>:<span class="string">"\u9ab8\u5b69\u6d77\u6c26\u4ea5\u5bb3\u9a87\u54b4\u55e8\u988f\u91a2"</span>,<span class="string">"han"</span>:<span class="string">"\u9163\u61a8\u90af\u97e9\u542b\u6db5\u5bd2\u51fd\u558a\u7f55\u7ff0\u64bc\u634d\u65f1\u61be\u608d\u710a\u6c57\u6c49\u9097\u83e1\u6496\u961a\u701a\u6657\u7113\u9894\u86b6\u9f3e"</span>,<span class="string">"hen"</span>:<span class="string">"\u592f\u75d5\u5f88\u72e0\u6068"</span>,<span class="string">"hang"</span>:<span class="string">"\u676d\u822a\u6c86\u7ed7\u73e9\u6841"</span>,<span class="string">"hao"</span>:<span class="string">"\u58d5\u568e\u8c6a\u6beb\u90dd\u597d\u8017\u53f7\u6d69\u8585\u55e5\u5686\u6fe0\u704f\u660a\u7693\u98a2\u869d"</span>,<span class="string">"he"</span>:<span class="string">"\u5475\u559d\u8377\u83cf\u6838\u79be\u548c\u4f55\u5408\u76d2\u8c89\u9602\u6cb3\u6db8\u8d6b\u8910\u9e64\u8d3a\u8bc3\u52be\u58d1\u85ff\u55d1\u55ec\u9616\u76cd\u86b5\u7fee"</span>,<span class="string">"hei"</span>:<span class="string">"\u563f\u9ed1"</span>,<span class="string">"heng"</span>:<span class="string">"\u54fc\u4ea8\u6a2a\u8861\u6052\u8a07\u8605"</span>,<span class="string">"hong"</span>:<span class="string">"\u8f70\u54c4\u70d8\u8679\u9e3f\u6d2a\u5b8f\u5f18\u7ea2\u9ec9\u8ba7\u836d\u85a8\u95f3\u6cd3"</span>,<span class="string">"hou"</span>:<span class="string">"\u5589\u4faf\u7334\u543c\u539a\u5019\u540e\u5820\u5f8c\u9005\u760a\u7bcc\u7cc7\u9c8e\u9aba"</span>,<span class="string">"hu"</span>:<span class="string">"\u547c\u4e4e\u5ffd\u745a\u58f6\u846b\u80e1\u8774\u72d0\u7cca\u6e56\u5f27\u864e\u552c\u62a4\u4e92\u6caa\u6237\u51b1\u553f\u56eb\u5cb5\u7322\u6019\u60da\u6d52\u6ef9\u7425\u69f2\u8f77\u89f3\u70c0\u7173\u623d\u6248\u795c\u9e55\u9e71\u7b0f\u9190\u659b"</span>,<span class="string">"hua"</span>:<span class="string">"\u82b1\u54d7\u534e\u733e\u6ed1\u753b\u5212\u5316\u8bdd\u5290\u6d4d\u9a85\u6866\u94e7\u7a1e"</span>,<span class="string">"huai"</span>:<span class="string">"\u69d0\u5f8a\u6000\u6dee\u574f\u8fd8\u8e1d"</span>,<span class="string">"huan"</span>:<span class="string">"\u6b22\u73af\u6853\u7f13\u6362\u60a3\u5524\u75ea\u8c62\u7115\u6da3\u5ba6\u5e7b\u90c7\u5942\u57b8\u64d0\u571c\u6d39\u6d63\u6f36\u5bf0\u902d\u7f33\u953e\u9ca9\u9b1f"</span>,<span class="string">"huang"</span>:<span class="string">"\u8352\u614c\u9ec4\u78fa\u8757\u7c27\u7687\u51f0\u60f6\u714c\u6643\u5e4c\u604d\u8c0e\u968d\u5fa8\u6e5f\u6f62\u9051\u749c\u8093\u7640\u87e5\u7bc1\u9cc7"</span>,<span class="string">"hui"</span>:<span class="string">"\u7070\u6325\u8f89\u5fbd\u6062\u86d4\u56de\u6bc1\u6094\u6167\u5349\u60e0\u6666\u8d3f\u79fd\u4f1a\u70e9\u6c47\u8bb3\u8bf2\u7ed8\u8bd9\u8334\u835f\u8559\u54d5\u5599\u96b3\u6d04\u5f57\u7f0b\u73f2\u6656\u605a\u867a\u87ea\u9ebe"</span>,<span class="string">"hun"</span>:<span class="string">"\u8364\u660f\u5a5a\u9b42\u6d51\u6df7\u8be8\u9984\u960d\u6eb7\u7f17"</span>,<span class="string">"huo"</span>:<span class="string">"\u8c41\u6d3b\u4f19\u706b\u83b7\u6216\u60d1\u970d\u8d27\u7978\u6509\u56af\u5925\u94ac\u952a\u956c\u8020\u8816"</span>,<span class="string">"ji"</span>:<span class="string">"\u51fb\u573e\u57fa\u673a\u7578\u7a3d\u79ef\u7b95\u808c\u9965\u8ff9\u6fc0\u8ba5\u9e21\u59ec\u7ee9\u7f09\u5409\u6781\u68d8\u8f91\u7c4d\u96c6\u53ca\u6025\u75be\u6c72\u5373\u5ac9\u7ea7\u6324\u51e0\u810a\u5df1\u84df\u6280\u5180\u5b63\u4f0e\u796d\u5242\u60b8\u6d4e\u5bc4\u5bc2\u8ba1\u8bb0\u65e2\u5fcc\u9645\u5993\u7ee7\u7eaa\u5c45\u4e0c\u4e69\u525e\u4f76\u4f74\u8114\u58bc\u82a8\u82b0\u8401\u84ba\u857a\u638e\u53fd\u54ad\u54dc\u5527\u5c8c\u5d74\u6d0e\u5f50\u5c50\u9aa5\u757f\u7391\u696b\u6b9b\u621f\u6222\u8d4d\u89ca\u7284\u9f51\u77f6\u7f81\u5d47\u7a37\u7620\u7635\u866e\u7b08\u7b04\u66a8\u8dfb\u8dfd\u9701\u9c9a\u9cab\u9afb\u9e82"</span>,<span class="string">"jia"</span>:<span class="string">"\u5609\u67b7\u5939\u4f73\u5bb6\u52a0\u835a\u988a\u8d3e\u7532\u94be\u5047\u7a3c\u4ef7\u67b6\u9a7e\u5ac1\u4f3d\u90cf\u62ee\u5cac\u6d43\u8fe6\u73c8\u621b\u80db\u605d\u94d7\u9553\u75c2\u86f1\u7b33\u8888\u8dcf"</span>,<span class="string">"jian"</span>:<span class="string">"\u6b7c\u76d1\u575a\u5c16\u7b3a\u95f4\u714e\u517c\u80a9\u8270\u5978\u7f04\u8327\u68c0\u67ec\u78b1\u7877\u62e3\u6361\u7b80\u4fed\u526a\u51cf\u8350\u69db\u9274\u8df5\u8d31\u89c1\u952e\u7bad\u4ef6\u5065\u8230\u5251\u996f\u6e10\u6e85\u6da7\u5efa\u50ed\u8c0f\u8c2b\u83c5\u84b9\u641b\u56dd\u6e54\u8e47\u8b07\u7f23\u67a7\u67d9\u6957\u620b\u622c\u726e\u728d\u6bfd\u8171\u7751\u950f\u9e63\u88e5\u7b15\u7bb4\u7fe6\u8dbc\u8e3a\u9ca3\u97af"</span>,<span class="string">"jiang"</span>:<span class="string">"\u50f5\u59dc\u5c06\u6d46\u6c5f\u7586\u848b\u6868\u5956\u8bb2\u5320\u9171\u964d\u8333\u6d1a\u7edb\u7f30\u729f\u7913\u8029\u7ce8\u8c47"</span>,<span class="string">"jiao"</span>:<span class="string">"\u8549\u6912\u7901\u7126\u80f6\u4ea4\u90ca\u6d47\u9a84\u5a07\u56bc\u6405\u94f0\u77eb\u4fa5\u811a\u72e1\u89d2\u997a\u7f34\u7ede\u527f\u6559\u9175\u8f7f\u8f83\u53eb\u4f7c\u50ec\u832d\u6322\u564d\u5ce4\u5fbc\u59e3\u7e9f\u656b\u768e\u9e6a\u86df\u91ae\u8de4\u9c9b"</span>,<span class="string">"jie"</span>:<span class="string">"\u7a96\u63ed\u63a5\u7686\u79f8\u8857\u9636\u622a\u52ab\u8282\u6854\u6770\u6377\u776b\u7aed\u6d01\u7ed3\u89e3\u59d0\u6212\u85c9\u82a5\u754c\u501f\u4ecb\u75a5\u8beb\u5c4a\u5048\u8ba6\u8bd8\u5588\u55df\u736c\u5a55\u5b51\u6840\u7352\u78a3\u9534\u7596\u88b7\u9889\u86a7\u7faf\u9c92\u9ab1\u9aeb"</span>,<span class="string">"jin"</span>:<span class="string">"\u5dfe\u7b4b\u65a4\u91d1\u4eca\u6d25\u895f\u7d27\u9526\u4ec5\u8c28\u8fdb\u9773\u664b\u7981\u8fd1\u70ec\u6d78\u5c3d\u537a\u8369\u5807\u5664\u9991\u5ed1\u5997\u7f19\u747e\u69ff\u8d46\u89d0\u9485\u9513\u887f\u77dc"</span>,<span class="string">"jing"</span>:<span class="string">"\u52b2\u8346\u5162\u830e\u775b\u6676\u9cb8\u4eac\u60ca\u7cbe\u7cb3\u7ecf\u4e95\u8b66\u666f\u9888\u9759\u5883\u656c\u955c\u5f84\u75c9\u9756\u7adf\u7ade\u51c0\u522d\u5106\u9631\u83c1\u734d\u61ac\u6cfe\u8ff3\u5f2a\u5a67\u80bc\u80eb\u8148\u65cc"</span>,<span class="string">"jiong"</span>:<span class="string">"\u70af\u7a98\u5182\u8fe5\u6243"</span>,<span class="string">"jiu"</span>:<span class="string">"\u63ea\u7a76\u7ea0\u7396\u97ed\u4e45\u7078\u4e5d\u9152\u53a9\u6551\u65e7\u81fc\u8205\u548e\u5c31\u759a\u50e6\u557e\u9604\u67e9\u6855\u9e6b\u8d73\u9b0f"</span>,<span class="string">"ju"</span>:<span class="string">"\u97a0\u62d8\u72d9\u75bd\u9a79\u83ca\u5c40\u5480\u77e9\u4e3e\u6cae\u805a\u62d2\u636e\u5de8\u5177\u8ddd\u8e1e\u952f\u4ff1\u53e5\u60e7\u70ac\u5267\u5028\u8bb5\u82e3\u82f4\u8392\u63ac\u907d\u5c66\u741a\u67b8\u6910\u6998\u6989\u6a58\u728b\u98d3\u949c\u9514\u7aad\u88fe\u8d84\u91b5\u8e3d\u9f83\u96ce\u97ab"</span>,<span class="string">"juan"</span>:<span class="string">"\u6350\u9e43\u5a1f\u5026\u7737\u5377\u7ee2\u9104\u72f7\u6d93\u684a\u8832\u9529\u954c\u96bd"</span>,<span class="string">"jue"</span>:<span class="string">"\u6485\u652b\u6289\u6398\u5014\u7235\u89c9\u51b3\u8bc0\u7edd\u53a5\u5282\u8c32\u77cd\u8568\u5658\u5d1b\u7357\u5b53\u73cf\u6877\u6a5b\u721d\u9562\u8e76\u89d6"</span>,<span class="string">"jun"</span>:<span class="string">"\u5747\u83cc\u94a7\u519b\u541b\u5cfb\u4fca\u7ae3\u6d5a\u90e1\u9a8f\u6343\u72fb\u76b2\u7b60\u9e87"</span>,<span class="string">"ka"</span>:<span class="string">"\u5580\u5496\u5361\u4f67\u5494\u80e9"</span>,<span class="string">"ke"</span>:<span class="string">"\u54af\u5777\u82db\u67ef\u68f5\u78d5\u9897\u79d1\u58f3\u54b3\u53ef\u6e34\u514b\u523b\u5ba2\u8bfe\u5ca2\u606a\u6e98\u9a92\u7f02\u73c2\u8f72\u6c2a\u778c\u94b6\u75b4\u7aa0\u874c\u9ac1"</span>,<span class="string">"kai"</span>:<span class="string">"\u5f00\u63e9\u6977\u51ef\u6168\u5240\u57b2\u8488\u5ffe\u607a\u94e0\u950e"</span>,<span class="string">"kan"</span>:<span class="string">"\u520a\u582a\u52d8\u574e\u780d\u770b\u4f83\u51f5\u83b0\u83b6\u6221\u9f9b\u77b0"</span>,<span class="string">"kang"</span>:<span class="string">"\u5eb7\u6177\u7ce0\u625b\u6297\u4ea2\u7095\u5751\u4f09\u95f6\u94aa"</span>,<span class="string">"kao"</span>:<span class="string">"\u8003\u62f7\u70e4\u9760\u5c3b\u6832\u7292\u94d0"</span>,<span class="string">"ken"</span>:<span class="string">"\u80af\u5543\u57a6\u6073\u57a0\u88c9\u9880"</span>,<span class="string">"keng"</span>:<span class="string">"\u542d\u5fd0\u94ff"</span>,<span class="string">"kong"</span>:<span class="string">"\u7a7a\u6050\u5b54\u63a7\u5025\u5d06\u7b9c"</span>,<span class="string">"kou"</span>:<span class="string">"\u62a0\u53e3\u6263\u5bc7\u82a4\u853b\u53e9\u770d\u7b58"</span>,<span class="string">"ku"</span>:<span class="string">"\u67af\u54ed\u7a9f\u82e6\u9177\u5e93\u88e4\u5233\u5800\u55be\u7ed4\u9ab7"</span>,<span class="string">"kua"</span>:<span class="string">"\u5938\u57ae\u630e\u8de8\u80ef\u4f89"</span>,<span class="string">"kuai"</span>:<span class="string">"\u5757\u7b77\u4fa9\u5feb\u84af\u90d0\u8489\u72ef\u810d"</span>,<span class="string">"kuan"</span>:<span class="string">"\u5bbd\u6b3e\u9acb"</span>,<span class="string">"kuang"</span>:<span class="string">"\u5321\u7b50\u72c2\u6846\u77ff\u7736\u65f7\u51b5\u8bd3\u8bf3\u909d\u5739\u593c\u54d0\u7ea9\u8d36"</span>,<span class="string">"kui"</span>:<span class="string">"\u4e8f\u76d4\u5cbf\u7aa5\u8475\u594e\u9b41\u5080\u9988\u6127\u6e83\u9997\u532e\u5914\u9697\u63c6\u55b9\u559f\u609d\u6126\u9615\u9035\u668c\u777d\u8069\u8770\u7bd1\u81fe\u8dec"</span>,<span class="string">"kun"</span>:<span class="string">"\u5764\u6606\u6346\u56f0\u6083\u9603\u7428\u951f\u918c\u9cb2\u9ae1"</span>,<span class="string">"kuo"</span>:<span class="string">"\u62ec\u6269\u5ed3\u9614\u86de"</span>,<span class="string">"la"</span>:<span class="string">"\u5783\u62c9\u5587\u8721\u814a\u8fa3\u5566\u524c\u647a\u908b\u65ef\u782c\u760c"</span>,<span class="string">"lai"</span>:<span class="string">"\u83b1\u6765\u8d56\u5d03\u5f95\u6d9e\u6fd1\u8d49\u7750\u94fc\u765e\u7c41"</span>,<span class="string">"lan"</span>:<span class="string">"\u84dd\u5a6a\u680f\u62e6\u7bee\u9611\u5170\u6f9c\u8c30\u63fd\u89c8\u61d2\u7f06\u70c2\u6ee5\u5549\u5c9a\u61d4\u6f24\u6984\u6593\u7f71\u9567\u8934"</span>,<span class="string">"lang"</span>:<span class="string">"\u7405\u6994\u72fc\u5eca\u90ce\u6717\u6d6a\u83a8\u8497\u5577\u9606\u9512\u7a02\u8782"</span>,<span class="string">"lao"</span>:<span class="string">"\u635e\u52b3\u7262\u8001\u4f6c\u59e5\u916a\u70d9\u6d9d\u5520\u5d02\u6833\u94d1\u94f9\u75e8\u91aa"</span>,<span class="string">"le"</span>:<span class="string">"\u52d2\u4e50\u808b\u4ec2\u53fb\u561e\u6cd0\u9cd3"</span>,<span class="string">"lei"</span>:<span class="string">"\u96f7\u956d\u857e\u78ca\u7d2f\u5121\u5792\u64c2\u7c7b\u6cea\u7fb8\u8bd4\u837d\u54a7\u6f2f\u5ad8\u7f27\u6a91\u8012\u9179"</span>,<span class="string">"ling"</span>:<span class="string">"\u68f1\u51b7\u62ce\u73b2\u83f1\u96f6\u9f84\u94c3\u4f36\u7f9a\u51cc\u7075\u9675\u5cad\u9886\u53e6\u4ee4\u9143\u5844\u82d3\u5464\u56f9\u6ce0\u7eeb\u67c3\u68c2\u74f4\u8046\u86c9\u7fce\u9cae"</span>,<span class="string">"leng"</span>:<span class="string">"\u695e\u6123"</span>,<span class="string">"li"</span>:<span class="string">"\u5398\u68a8\u7281\u9ece\u7bf1\u72f8\u79bb\u6f13\u7406\u674e\u91cc\u9ca4\u793c\u8389\u8354\u540f\u6817\u4e3d\u5389\u52b1\u783e\u5386\u5229\u5088\u4f8b\u4fd0\u75e2\u7acb\u7c92\u6ca5\u96b6\u529b\u7483\u54e9\u4fea\u4fda\u90e6\u575c\u82c8\u8385\u84e0\u85dc\u6369\u5456\u5533\u55b1\u7301\u6ea7\u6fa7\u9026\u5a0c\u5ae0\u9a8a\u7f21\u73de\u67a5\u680e\u8f79\u623e\u783a\u8a48\u7f79\u9502\u9e42\u75a0\u75ac\u86ce\u870a\u8821\u7b20\u7be5\u7c9d\u91b4\u8dde\u96f3\u9ca1\u9ce2\u9ee7"</span>,<span class="string">"lian"</span>:<span class="string">"\u4fe9\u8054\u83b2\u8fde\u9570\u5ec9\u601c\u6d9f\u5e18\u655b\u8138\u94fe\u604b\u70bc\u7ec3\u631b\u8539\u5941\u6f4b\u6fc2\u5a08\u740f\u695d\u6b93\u81c1\u81a6\u88e2\u880a\u9ca2"</span>,<span class="string">"liang"</span>:<span class="string">"\u7cae\u51c9\u6881\u7cb1\u826f\u4e24\u8f86\u91cf\u667e\u4eae\u8c05\u589a\u690b\u8e09\u9753\u9b49"</span>,<span class="string">"liao"</span>:<span class="string">"\u64a9\u804a\u50da\u7597\u71ce\u5be5\u8fbd\u6f66\u4e86\u6482\u9563\u5ed6\u6599\u84fc\u5c25\u5639\u7360\u5bee\u7f2d\u948c\u9e69\u8022"</span>,<span class="string">"lie"</span>:<span class="string">"\u5217\u88c2\u70c8\u52a3\u730e\u51bd\u57d2\u6d0c\u8d94\u8e90\u9b23"</span>,<span class="string">"lin"</span>:<span class="string">"\u7433\u6797\u78f7\u9716\u4e34\u90bb\u9cde\u6dcb\u51db\u8d41\u541d\u853a\u5d99\u5eea\u9074\u6aa9\u8f9a\u77b5\u7cbc\u8e8f\u9e9f"</span>,<span class="string">"liu"</span>:<span class="string">"\u6e9c\u7409\u69b4\u786b\u998f\u7559\u5218\u7624\u6d41\u67f3\u516d\u62a1\u507b\u848c\u6cd6\u6d4f\u905b\u9a9d\u7efa\u65d2\u7198\u950d\u954f\u9e68\u938f"</span>,<span class="string">"long"</span>:<span class="string">"\u9f99\u804b\u5499\u7b3c\u7abf\u9686\u5784\u62e2\u9647\u5f04\u5785\u830f\u6cf7\u73d1\u680a\u80e7\u783b\u7643"</span>,<span class="string">"lou"</span>:<span class="string">"\u697c\u5a04\u6402\u7bd3\u6f0f\u964b\u55bd\u5d5d\u9542\u7618\u8027\u877c\u9ac5"</span>,<span class="string">"lu"</span>:<span class="string">"\u82a6\u5362\u9885\u5e90\u7089\u63b3\u5364\u864f\u9c81\u9e93\u788c\u9732\u8def\u8d42\u9e7f\u6f5e\u7984\u5f55\u9646\u622e\u5786\u6445\u64b8\u565c\u6cf8\u6e0c\u6f09\u7490\u680c\u6a79\u8f73\u8f82\u8f98\u6c07\u80ea\u9565\u9e2c\u9e6d\u7c0f\u823b\u9c88"</span>,<span class="string">"lv"</span>:<span class="string">"\u9a74\u5415\u94dd\u4fa3\u65c5\u5c65\u5c61\u7f15\u8651\u6c2f\u5f8b\u7387\u6ee4\u7eff\u634b\u95fe\u6988\u8182\u7a06\u891b"</span>,<span class="string">"luan"</span>:<span class="string">"\u5ce6\u5b6a\u6ee6\u5375\u4e71\u683e\u9e3e\u92ae"</span>,<span class="string">"lue"</span>:<span class="string">"\u63a0\u7565\u950a"</span>,<span class="string">"lun"</span>:<span class="string">"\u8f6e\u4f26\u4ed1\u6ca6\u7eb6\u8bba\u56f5"</span>,<span class="string">"luo"</span>:<span class="string">"\u841d\u87ba\u7f57\u903b\u9523\u7ba9\u9aa1\u88f8\u843d\u6d1b\u9a86\u7edc\u502e\u8366\u645e\u7321\u6cfa\u6924\u8136\u9559\u7630\u96d2"</span>,<span class="string">"ma"</span>:<span class="string">"\u5988\u9ebb\u739b\u7801\u8682\u9a6c\u9a82\u561b\u5417\u551b\u72b8\u5b37\u6769\u9ebd"</span>,<span class="string">"mai"</span>:<span class="string">"\u57cb\u4e70\u9ea6\u5356\u8fc8\u8109\u52a2\u836c\u54aa\u973e"</span>,<span class="string">"man"</span>:<span class="string">"\u7792\u9992\u86ee\u6ee1\u8513\u66fc\u6162\u6f2b\u8c29\u5881\u5e54\u7f26\u71b3\u9558\u989f\u87a8\u9cd7\u9794"</span>,<span class="string">"mang"</span>:<span class="string">"\u8292\u832b\u76f2\u5fd9\u83bd\u9099\u6f2d\u6726\u786d\u87d2"</span>,<span class="string">"meng"</span>:<span class="string">"\u6c13\u840c\u8499\u6aac\u76df\u9530\u731b\u68a6\u5b5f\u52d0\u750d\u77a2\u61f5\u791e\u867b\u8722\u8813\u824b\u8268\u9efe"</span>,<span class="string">"miao"</span>:<span class="string">"\u732b\u82d7\u63cf\u7784\u85d0\u79d2\u6e3a\u5e99\u5999\u55b5\u9088\u7f08\u7f2a\u676a\u6dfc\u7707\u9e4b\u8731"</span>,<span class="string">"mao"</span>:<span class="string">"\u8305\u951a\u6bdb\u77db\u94c6\u536f\u8302\u5192\u5e3d\u8c8c\u8d38\u4f94\u88a4\u52d6\u8306\u5cc1\u7441\u6634\u7266\u8004\u65c4\u61cb\u7780\u86d1\u8765\u87ca\u9ae6"</span>,<span class="string">"me"</span>:<span class="string">"\u4e48"</span>,<span class="string">"mei"</span>:<span class="string">"\u73ab\u679a\u6885\u9176\u9709\u7164\u6ca1\u7709\u5a92\u9541\u6bcf\u7f8e\u6627\u5bd0\u59b9\u5a9a\u5776\u8393\u5d4b\u7338\u6d7c\u6e44\u6963\u9545\u9e5b\u8882\u9b45"</span>,<span class="string">"men"</span>:<span class="string">"\u95e8\u95f7\u4eec\u626a\u739f\u7116\u61d1\u9494"</span>,<span class="string">"mi"</span>:<span class="string">"\u772f\u919a\u9761\u7cdc\u8ff7\u8c1c\u5f25\u7c73\u79d8\u89c5\u6ccc\u871c\u5bc6\u5e42\u8288\u5196\u8c27\u863c\u5627\u7315\u736f\u6c68\u5b93\u5f2d\u8112\u6549\u7cf8\u7e3b\u9e8b"</span>,<span class="string">"mian"</span>:<span class="string">"\u68c9\u7720\u7ef5\u5195\u514d\u52c9\u5a29\u7f05\u9762\u6c94\u6e4e\u817c\u7704"</span>,<span class="string">"mie"</span>:<span class="string">"\u8511\u706d\u54a9\u881b\u7bfe"</span>,<span class="string">"min"</span>:<span class="string">"\u6c11\u62bf\u76bf\u654f\u60af\u95fd\u82e0\u5cb7\u95f5\u6cef\u73c9"</span>,<span class="string">"ming"</span>:<span class="string">"\u660e\u879f\u9e23\u94ed\u540d\u547d\u51a5\u8317\u6e9f\u669d\u7791\u9169"</span>,<span class="string">"miu"</span>:<span class="string">"\u8c2c"</span>,<span class="string">"mo"</span>:<span class="string">"\u6478\u6479\u8611\u6a21\u819c\u78e8\u6469\u9b54\u62b9\u672b\u83ab\u58a8\u9ed8\u6cab\u6f20\u5bde\u964c\u8c1f\u8309\u84e6\u998d\u5aeb\u9546\u79e3\u763c\u8031\u87c6\u8c8a\u8c98"</span>,<span class="string">"mou"</span>:<span class="string">"\u8c0b\u725f\u67d0\u53b6\u54de\u5a7a\u7738\u936a"</span>,<span class="string">"mu"</span>:<span class="string">"\u62c7\u7261\u4ea9\u59c6\u6bcd\u5893\u66ae\u5e55\u52df\u6155\u6728\u76ee\u7766\u7267\u7a46\u4eeb\u82dc\u5452\u6c90\u6bea\u94bc"</span>,<span class="string">"na"</span>:<span class="string">"\u62ff\u54ea\u5450\u94a0\u90a3\u5a1c\u7eb3\u5185\u637a\u80ad\u954e\u8872\u7bac"</span>,<span class="string">"nai"</span>:<span class="string">"\u6c16\u4e43\u5976\u8010\u5948\u9f10\u827f\u8418\u67f0"</span>,<span class="string">"nan"</span>:<span class="string">"\u5357\u7537\u96be\u56ca\u5583\u56e1\u6960\u8169\u877b\u8d67"</span>,<span class="string">"nao"</span>:<span class="string">"\u6320\u8111\u607c\u95f9\u5b6c\u57b4\u7331\u7459\u7847\u94d9\u86f2"</span>,<span class="string">"ne"</span>:<span class="string">"\u6dd6\u5462\u8bb7"</span>,<span class="string">"nei"</span>:<span class="string">"\u9981"</span>,<span class="string">"nen"</span>:<span class="string">"\u5ae9\u80fd\u6798\u6041"</span>,<span class="string">"ni"</span>:<span class="string">"\u59ae\u9713\u502a\u6ce5\u5c3c\u62df\u4f60\u533f\u817b\u9006\u6eba\u4f32\u576d\u730a\u6029\u6ee0\u6635\u65ce\u7962\u615d\u7768\u94cc\u9cb5"</span>,<span class="string">"nian"</span>:<span class="string">"\u852b\u62c8\u5e74\u78be\u64b5\u637b\u5ff5\u5eff\u8f87\u9ecf\u9c87\u9cb6"</span>,<span class="string">"niang"</span>:<span class="string">"\u5a18\u917f"</span>,<span class="string">"niao"</span>:<span class="string">"\u9e1f\u5c3f\u8311\u5b32\u8132\u8885"</span>,<span class="string">"nie"</span>:<span class="string">"\u634f\u8042\u5b7d\u556e\u954a\u954d\u6d85\u4e5c\u9667\u8616\u55eb\u8080\u989e\u81ec\u8e51"</span>,<span class="string">"nin"</span>:<span class="string">"\u60a8\u67e0"</span>,<span class="string">"ning"</span>:<span class="string">"\u72de\u51dd\u5b81\u62e7\u6cde\u4f5e\u84e5\u549b\u752f\u804d"</span>,<span class="string">"niu"</span>:<span class="string">"\u725b\u626d\u94ae\u7ebd\u72c3\u5ff8\u599e\u86b4"</span>,<span class="string">"nong"</span>:<span class="string">"\u8113\u6d53\u519c\u4fac"</span>,<span class="string">"nu"</span>:<span class="string">"\u5974\u52aa\u6012\u5476\u5e11\u5f29\u80ec\u5b65\u9a7d"</span>,<span class="string">"nv"</span>:<span class="string">"\u5973\u6067\u9495\u8844"</span>,<span class="string">"nuan"</span>:<span class="string">"\u6696"</span>,<span class="string">"nuenue"</span>:<span class="string">"\u8650"</span>,<span class="string">"nue"</span>:<span class="string">"\u759f\u8c11"</span>,<span class="string">"nuo"</span>:<span class="string">"\u632a\u61e6\u7cef\u8bfa\u50a9\u6426\u558f\u9518"</span>,<span class="string">"ou"</span>:<span class="string">"\u54e6\u6b27\u9e25\u6bb4\u85d5\u5455\u5076\u6ca4\u6004\u74ef\u8026"</span>,<span class="string">"pa"</span>:<span class="string">"\u556a\u8db4\u722c\u5e15\u6015\u7436\u8469\u7b62"</span>,<span class="string">"pai"</span>:<span class="string">"\u62cd\u6392\u724c\u5f98\u6e43\u6d3e\u4ff3\u848e"</span>,<span class="string">"pan"</span>:<span class="string">"\u6500\u6f58\u76d8\u78d0\u76fc\u7554\u5224\u53db\u723f\u6cee\u88a2\u897b\u87e0\u8e52"</span>,<span class="string">"pang"</span>:<span class="string">"\u4e53\u5e9e\u65c1\u802a\u80d6\u6ec2\u9004"</span>,<span class="string">"pao"</span>:<span class="string">"\u629b\u5486\u5228\u70ae\u888d\u8dd1\u6ce1\u530f\u72cd\u5e96\u812c\u75b1"</span>,<span class="string">"pei"</span>:<span class="string">"\u5478\u80da\u57f9\u88f4\u8d54\u966a\u914d\u4f69\u6c9b\u638a\u8f94\u5e14\u6de0\u65c6\u952b\u9185\u9708"</span>,<span class="string">"pen"</span>:<span class="string">"\u55b7\u76c6\u6e53"</span>,<span class="string">"peng"</span>:<span class="string">"\u7830\u62a8\u70f9\u6f8e\u5f6d\u84ec\u68da\u787c\u7bf7\u81a8\u670b\u9e4f\u6367\u78b0\u576f\u580b\u562d\u6026\u87db"</span>,<span class="string">"pi"</span>:<span class="string">"\u7812\u9739\u6279\u62ab\u5288\u7435\u6bd7\u5564\u813e\u75b2\u76ae\u5339\u75de\u50fb\u5c41\u8b6c\u4e15\u9674\u90b3\u90eb\u572e\u9f19\u64d7\u567c\u5e80\u5ab2\u7eb0\u6787\u7513\u7765\u7f74\u94cd\u75e6\u7656\u758b\u868d\u8c94"</span>,<span class="string">"pian"</span>:<span class="string">"\u7bc7\u504f\u7247\u9a97\u8c1d\u9a88\u728f\u80fc\u890a\u7fe9\u8e41"</span>,<span class="string">"piao"</span>:<span class="string">"\u98d8\u6f02\u74e2\u7968\u527d\u560c\u5ad6\u7f25\u6b8d\u779f\u87b5"</span>,<span class="string">"pie"</span>:<span class="string">"\u6487\u77a5\u4e3f\u82e4\u6c15"</span>,<span class="string">"pin"</span>:<span class="string">"\u62fc\u9891\u8d2b\u54c1\u8058\u62da\u59d8\u5ad4\u6980\u725d\u98a6"</span>,<span class="string">"ping"</span>:<span class="string">"\u4e52\u576a\u82f9\u840d\u5e73\u51ed\u74f6\u8bc4\u5c4f\u4fdc\u5a09\u67b0\u9c86"</span>,<span class="string">"po"</span>:<span class="string">"\u5761\u6cfc\u9887\u5a46\u7834\u9b44\u8feb\u7c95\u53f5\u9131\u6ea5\u73c0\u948b\u94b7\u76a4\u7b38"</span>,<span class="string">"pou"</span>:<span class="string">"\u5256\u88d2\u8e23"</span>,<span class="string">"pu"</span>:<span class="string">"\u6251\u94fa\u4ec6\u8386\u8461\u83e9\u84b2\u57d4\u6734\u5703\u666e\u6d66\u8c31\u66dd\u7011\u530d\u5657\u6fee\u749e\u6c06\u9564\u9568\u8e7c"</span>,<span class="string">"qi"</span>:<span class="string">"\u671f\u6b3a\u6816\u621a\u59bb\u4e03\u51c4\u6f06\u67d2\u6c8f\u5176\u68cb\u5947\u6b67\u7566\u5d0e\u8110\u9f50\u65d7\u7948\u7941\u9a91\u8d77\u5c82\u4e5e\u4f01\u542f\u5951\u780c\u5668\u6c14\u8fc4\u5f03\u6c7d\u6ce3\u8bab\u4e9f\u4e93\u573b\u8291\u840b\u847a\u5601\u5c7a\u5c90\u6c54\u6dc7\u9a90\u7eee\u742a\u7426\u675e\u6864\u69ed\u6b39\u797a\u61a9\u789b\u86f4\u871e\u7da6\u7dae\u8dbf\u8e4a\u9ccd\u9e92"</span>,<span class="string">"qia"</span>:<span class="string">"\u6390\u6070\u6d3d\u845c"</span>,<span class="string">"qian"</span>:<span class="string">"\u7275\u6266\u948e\u94c5\u5343\u8fc1\u7b7e\u4edf\u8c26\u4e7e\u9ed4\u94b1\u94b3\u524d\u6f5c\u9063\u6d45\u8c34\u5811\u5d4c\u6b20\u6b49\u4f65\u9621\u828a\u82a1\u8368\u63ae\u5c8d\u60ad\u614a\u9a9e\u6434\u8930\u7f31\u6920\u80b7\u6106\u94a4\u8654\u7b9d"</span>,<span class="string">"qiang"</span>:<span class="string">"\u67aa\u545b\u8154\u7f8c\u5899\u8537\u5f3a\u62a2\u5af1\u6a2f\u6217\u709d\u9516\u9535\u956a\u8941\u8723\u7f9f\u8deb\u8dc4"</span>,<span class="string">"qiao"</span>:<span class="string">"\u6a47\u9539\u6572\u6084\u6865\u77a7\u4e54\u4fa8\u5de7\u9798\u64ac\u7fd8\u5ced\u4fcf\u7a8d\u5281\u8bee\u8c2f\u835e\u6100\u6194\u7f32\u6a35\u6bf3\u7857\u8df7\u9792"</span>,<span class="string">"qie"</span>:<span class="string">"\u5207\u8304\u4e14\u602f\u7a83\u90c4\u553c\u60ec\u59be\u6308\u9532\u7ba7"</span>,<span class="string">"qin"</span>:<span class="string">"\u94a6\u4fb5\u4eb2\u79e6\u7434\u52e4\u82b9\u64d2\u79bd\u5bdd\u6c81\u82a9\u84c1\u8572\u63ff\u5423\u55ea\u5659\u6eb1\u6a8e\u8793\u887e"</span>,<span class="string">"qing"</span>:<span class="string">"\u9752\u8f7b\u6c22\u503e\u537f\u6e05\u64ce\u6674\u6c30\u60c5\u9877\u8bf7\u5e86\u5029\u82d8\u570a\u6aa0\u78ec\u873b\u7f44\u7b90\u8b26\u9cad\u9ee5"</span>,<span class="string">"qiong"</span>:<span class="string">"\u743c\u7a77\u909b\u8315\u7a79\u7b47\u928e"</span>,<span class="string">"qiu"</span>:<span class="string">"\u79cb\u4e18\u90b1\u7403\u6c42\u56da\u914b\u6cc5\u4fc5\u6c3d\u5def\u827d\u72b0\u6e6b\u9011\u9052\u6978\u8d47\u9e20\u866c\u86af\u8764\u88d8\u7cd7\u9cc5\u9f3d"</span>,<span class="string">"qu"</span>:<span class="string">"\u8d8b\u533a\u86c6\u66f2\u8eaf\u5c48\u9a71\u6e20\u53d6\u5a36\u9f8b\u8da3\u53bb\u8bce\u52ac\u8556\u8627\u5c96\u8862\u9612\u74a9\u89d1\u6c0d\u795b\u78f2\u766f\u86d0\u883c\u9eb4\u77bf\u9ee2"</span>,<span class="string">"quan"</span>:<span class="string">"\u5708\u98a7\u6743\u919b\u6cc9\u5168\u75ca\u62f3\u72ac\u5238\u529d\u8be0\u8343\u737e\u609b\u7efb\u8f81\u754e\u94e8\u8737\u7b4c\u9b08"</span>,<span class="string">"que"</span>:<span class="string">"\u7f3a\u7094\u7638\u5374\u9e4a\u69b7\u786e\u96c0\u9619\u60ab"</span>,<span class="string">"qun"</span>:<span class="string">"\u88d9\u7fa4\u9021"</span>,<span class="string">"ran"</span>:<span class="string">"\u7136\u71c3\u5189\u67d3\u82d2\u9aef"</span>,<span class="string">"rang"</span>:<span class="string">"\u74e4\u58e4\u6518\u56b7\u8ba9\u79b3\u7a70"</span>,<span class="string">"rao"</span>:<span class="string">"\u9976\u6270\u7ed5\u835b\u5a06\u6861"</span>,<span class="string">"ruo"</span>:<span class="string">"\u60f9\u82e5\u5f31"</span>,<span class="string">"re"</span>:<span class="string">"\u70ed\u504c"</span>,<span class="string">"ren"</span>:<span class="string">"\u58ec\u4ec1\u4eba\u5fcd\u97e7\u4efb\u8ba4\u5203\u598a\u7eab\u4ede\u834f\u845a\u996a\u8f6b\u7a14\u887d"</span>,<span class="string">"reng"</span>:<span class="string">"\u6254\u4ecd"</span>,<span class="string">"ri"</span>:<span class="string">"\u65e5"</span>,<span class="string">"rong"</span>:<span class="string">"\u620e\u8338\u84c9\u8363\u878d\u7194\u6eb6\u5bb9\u7ed2\u5197\u5d58\u72e8\u7f1b\u6995\u877e"</span>,<span class="string">"rou"</span>:<span class="string">"\u63c9\u67d4\u8089\u7cc5\u8e42\u97a3"</span>,<span class="string">"ru"</span>:<span class="string">"\u8339\u8815\u5112\u5b7a\u5982\u8fb1\u4e73\u6c5d\u5165\u8925\u84d0\u85b7\u5685\u6d33\u6ebd\u6fe1\u94f7\u8966\u98a5"</span>,<span class="string">"ruan"</span>:<span class="string">"\u8f6f\u962e\u670a"</span>,<span class="string">"rui"</span>:<span class="string">"\u854a\u745e\u9510\u82ae\u8564\u777f\u868b"</span>,<span class="string">"run"</span>:<span class="string">"\u95f0\u6da6"</span>,<span class="string">"sa"</span>:<span class="string">"\u6492\u6d12\u8428\u5345\u4ee8\u6332\u98d2"</span>,<span class="string">"sai"</span>:<span class="string">"\u816e\u9cc3\u585e\u8d5b\u567b"</span>,<span class="string">"san"</span>:<span class="string">"\u4e09\u53c1\u4f1e\u6563\u5f61\u9993\u6c35\u6bf5\u7cc1\u9730"</span>,<span class="string">"sang"</span>:<span class="string">"\u6851\u55d3\u4e27\u6421\u78c9\u98a1"</span>,<span class="string">"sao"</span>:<span class="string">"\u6414\u9a9a\u626b\u5ac2\u57fd\u81ca\u7619\u9ccb"</span>,<span class="string">"se"</span>:<span class="string">"\u745f\u8272\u6da9\u556c\u94e9\u94ef\u7a51"</span>,<span class="string">"sen"</span>:<span class="string">"\u68ee"</span>,<span class="string">"seng"</span>:<span class="string">"\u50e7"</span>,<span class="string">"sha"</span>:<span class="string">"\u838e\u7802\u6740\u5239\u6c99\u7eb1\u50bb\u5565\u715e\u810e\u6b43\u75e7\u88df\u970e\u9ca8"</span>,<span class="string">"shai"</span>:<span class="string">"\u7b5b\u6652\u917e"</span>,<span class="string">"shan"</span>:<span class="string">"\u73ca\u82eb\u6749\u5c71\u5220\u717d\u886b\u95ea\u9655\u64c5\u8d61\u81b3\u5584\u6c55\u6247\u7f2e\u5261\u8baa\u912f\u57cf\u829f\u6f78\u59d7\u9a9f\u81bb\u9490\u759d\u87ee\u8222\u8dda\u9cdd"</span>,<span class="string">"shang"</span>:<span class="string">"\u5892\u4f24\u5546\u8d4f\u664c\u4e0a\u5c1a\u88f3\u57a7\u7ef1\u6b87\u71b5\u89de"</span>,<span class="string">"shao"</span>:<span class="string">"\u68a2\u634e\u7a0d\u70e7\u828d\u52fa\u97f6\u5c11\u54e8\u90b5\u7ecd\u52ad\u82d5\u6f72\u86f8\u7b24\u7b72\u8244"</span>,<span class="string">"she"</span>:<span class="string">"\u5962\u8d4a\u86c7\u820c\u820d\u8d66\u6444\u5c04\u6151\u6d89\u793e\u8bbe\u538d\u4f58\u731e\u7572\u9e9d"</span>,<span class="string">"shen"</span>:<span class="string">"\u7837\u7533\u547b\u4f38\u8eab\u6df1\u5a20\u7ec5\u795e\u6c88\u5ba1\u5a76\u751a\u80be\u614e\u6e17\u8bdc\u8c02\u5432\u54c2\u6e16\u6939\u77e7\u8703"</span>,<span class="string">"sheng"</span>:<span class="string">"\u58f0\u751f\u7525\u7272\u5347\u7ef3\u7701\u76db\u5269\u80dc\u5723\u4e1e\u6e11\u5ab5\u771a\u7b19"</span>,<span class="string">"shi"</span>:<span class="string">"\u5e08\u5931\u72ee\u65bd\u6e7f\u8bd7\u5c38\u8671\u5341\u77f3\u62fe\u65f6\u4ec0\u98df\u8680\u5b9e\u8bc6\u53f2\u77e2\u4f7f\u5c4e\u9a76\u59cb\u5f0f\u793a\u58eb\u4e16\u67ff\u4e8b\u62ed\u8a93\u901d\u52bf\u662f\u55dc\u566c\u9002\u4ed5\u4f8d\u91ca\u9970\u6c0f\u5e02\u6043\u5ba4\u89c6\u8bd5\u8c25\u57d8\u83b3\u84cd\u5f11\u5511\u9963\u8f7c\u8006\u8d33\u70bb\u793b\u94c8\u94ca\u87ab\u8210\u7b6e\u8c55\u9ca5\u9cba"</span>,<span class="string">"shou"</span>:<span class="string">"\u6536\u624b\u9996\u5b88\u5bff\u6388\u552e\u53d7\u7626\u517d\u624c\u72e9\u7ef6\u824f"</span>,<span class="string">"shu"</span>:<span class="string">"\u852c\u67a2\u68b3\u6b8a\u6292\u8f93\u53d4\u8212\u6dd1\u758f\u4e66\u8d4e\u5b70\u719f\u85af\u6691\u66d9\u7f72\u8700\u9ecd\u9f20\u5c5e\u672f\u8ff0\u6811\u675f\u620d\u7ad6\u5885\u5eb6\u6570\u6f31\u6055\u500f\u587e\u83fd\u5fc4\u6cad\u6d91\u6f8d\u59dd\u7ebe\u6bf9\u8167\u6bb3\u956f\u79eb\u9e6c"</span>,<span class="string">"shua"</span>:<span class="string">"\u5237\u800d\u5530\u6dae"</span>,<span class="string">"shuai"</span>:<span class="string">"\u6454\u8870\u7529\u5e05\u87c0"</span>,<span class="string">"shuan"</span>:<span class="string">"\u6813\u62f4\u95e9"</span>,<span class="string">"shuang"</span>:<span class="string">"\u971c\u53cc\u723d\u5b40"</span>,<span class="string">"shui"</span>:<span class="string">"\u8c01\u6c34\u7761\u7a0e"</span>,<span class="string">"shun"</span>:<span class="string">"\u542e\u77ac\u987a\u821c\u6042"</span>,<span class="string">"shuo"</span>:<span class="string">"\u8bf4\u7855\u6714\u70c1\u84b4\u6420\u55cd\u6fef\u5981\u69ca\u94c4"</span>,<span class="string">"si"</span>:<span class="string">"\u65af\u6495\u5636\u601d\u79c1\u53f8\u4e1d\u6b7b\u8086\u5bfa\u55e3\u56db\u4f3a\u4f3c\u9972\u5df3\u53ae\u4fdf\u5155\u83e5\u549d\u6c5c\u6cd7\u6f8c\u59d2\u9a77\u7f0c\u7940\u7960\u9536\u9e36\u801c\u86f3\u7b25"</span>,<span class="string">"song"</span>:<span class="string">"\u677e\u8038\u6002\u9882\u9001\u5b8b\u8bbc\u8bf5\u51c7\u83d8\u5d27\u5d69\u5fea\u609a\u6dde\u7ae6"</span>,<span class="string">"sou"</span>:<span class="string">"\u641c\u8258\u64de\u55fd\u53df\u55d6\u55fe\u998a\u6eb2\u98d5\u778d\u953c\u878b"</span>,<span class="string">"su"</span>:<span class="string">"\u82cf\u9165\u4fd7\u7d20\u901f\u7c9f\u50f3\u5851\u6eaf\u5bbf\u8bc9\u8083\u5919\u8c21\u850c\u55c9\u612b\u7c0c\u89eb\u7a23"</span>,<span class="string">"suan"</span>:<span class="string">"\u9178\u849c\u7b97"</span>,<span class="string">"sui"</span>:<span class="string">"\u867d\u968b\u968f\u7ee5\u9ad3\u788e\u5c81\u7a57\u9042\u96a7\u795f\u84d1\u51ab\u8c07\u6fc9\u9083\u71e7\u772d\u7762"</span>,<span class="string">"sun"</span>:<span class="string">"\u5b59\u635f\u7b0b\u836a\u72f2\u98e7\u69ab\u8de3\u96bc"</span>,<span class="string">"suo"</span>:<span class="string">"\u68ad\u5506\u7f29\u7410\u7d22\u9501\u6240\u5522\u55e6\u5a11\u686b\u7743\u7fa7"</span>,<span class="string">"ta"</span>:<span class="string">"\u584c\u4ed6\u5b83\u5979\u5854\u736d\u631e\u8e4b\u8e0f\u95fc\u6ebb\u9062\u69bb\u6c93"</span>,<span class="string">"tai"</span>:<span class="string">"\u80ce\u82d4\u62ac\u53f0\u6cf0\u915e\u592a\u6001\u6c70\u90b0\u85b9\u80bd\u70b1\u949b\u8dc6\u9c90"</span>,<span class="string">"tan"</span>:<span class="string">"\u574d\u644a\u8d2a\u762b\u6ee9\u575b\u6a80\u75f0\u6f6d\u8c2d\u8c08\u5766\u6bef\u8892\u78b3\u63a2\u53f9\u70ad\u90ef\u8548\u6619\u94bd\u952c\u8983"</span>,<span class="string">"tang"</span>:<span class="string">"\u6c64\u5858\u642a\u5802\u68e0\u819b\u5510\u7cd6\u50a5\u9967\u6e8f\u746d\u94f4\u9557\u8025\u8797\u87b3\u7fb0\u91a3"</span>,<span class="string">"thang"</span>:<span class="string">"\u5018\u8eba\u6dcc"</span>,<span class="string">"theng"</span>:<span class="string">"\u8d9f\u70eb"</span>,<span class="string">"tao"</span>:<span class="string">"\u638f\u6d9b\u6ed4\u7ee6\u8404\u6843\u9003\u6dd8\u9676\u8ba8\u5957\u6311\u9f17\u5555\u97ec\u9955"</span>,<span class="string">"te"</span>:<span class="string">"\u7279"</span>,<span class="string">"teng"</span>:<span class="string">"\u85e4\u817e\u75bc\u8a8a\u6ed5"</span>,<span class="string">"ti"</span>:<span class="string">"\u68af\u5254\u8e22\u9511\u63d0\u9898\u8e44\u557c\u4f53\u66ff\u568f\u60d5\u6d95\u5243\u5c49\u8351\u608c\u9016\u7ee8\u7f07\u9e48\u88fc\u918d"</span>,<span class="string">"tian"</span>:<span class="string">"\u5929\u6dfb\u586b\u7530\u751c\u606c\u8214\u8146\u63ad\u5fdd\u9617\u6b84\u754b\u94bf\u86ba"</span>,<span class="string">"tiao"</span>:<span class="string">"\u6761\u8fe2\u773a\u8df3\u4f7b\u7967\u94eb\u7a95\u9f86\u9ca6"</span>,<span class="string">"tie"</span>:<span class="string">"\u8d34\u94c1\u5e16\u841c\u992e"</span>,<span class="string">"ting"</span>:<span class="string">"\u5385\u542c\u70c3\u6c40\u5ef7\u505c\u4ead\u5ead\u633a\u8247\u839b\u8476\u5a77\u6883\u8713\u9706"</span>,<span class="string">"tong"</span>:<span class="string">"\u901a\u6850\u916e\u77b3\u540c\u94dc\u5f64\u7ae5\u6876\u6345\u7b52\u7edf\u75db\u4f5f\u50ee\u4edd\u833c\u55f5\u6078\u6f7c\u783c"</span>,<span class="string">"tou"</span>:<span class="string">"\u5077\u6295\u5934\u900f\u4ea0"</span>,<span class="string">"tu"</span>:<span class="string">"\u51f8\u79c3\u7a81\u56fe\u5f92\u9014\u6d82\u5c60\u571f\u5410\u5154\u580d\u837c\u83df\u948d\u9174"</span>,<span class="string">"tuan"</span>:<span class="string">"\u6e4d\u56e2\u7583"</span>,<span class="string">"tui"</span>:<span class="string">"\u63a8\u9893\u817f\u8715\u892a\u9000\u5fd2\u717a"</span>,<span class="string">"tun"</span>:<span class="string">"\u541e\u5c6f\u81c0\u9968\u66be\u8c5a\u7a80"</span>,<span class="string">"tuo"</span>:<span class="string">"\u62d6\u6258\u8131\u9e35\u9640\u9a6e\u9a7c\u692d\u59a5\u62d3\u553e\u4e47\u4f57\u5768\u5eb9\u6cb1\u67dd\u7823\u7ba8\u8204\u8dce\u9f0d"</span>,<span class="string">"wa"</span>:<span class="string">"\u6316\u54c7\u86d9\u6d3c\u5a03\u74e6\u889c\u4f64\u5a32\u817d"</span>,<span class="string">"wai"</span>:<span class="string">"\u6b6a\u5916"</span>,<span class="string">"wan"</span>:<span class="string">"\u8c4c\u5f2f\u6e7e\u73a9\u987d\u4e38\u70f7\u5b8c\u7897\u633d\u665a\u7696\u60cb\u5b9b\u5a49\u4e07\u8155\u525c\u8284\u82cb\u83c0\u7ea8\u7efe\u742c\u8118\u7579\u873f\u7ba2"</span>,<span class="string">"wang"</span>:<span class="string">"\u6c6a\u738b\u4ea1\u6789\u7f51\u5f80\u65fa\u671b\u5fd8\u5984\u7f54\u5c22\u60d8\u8f8b\u9b4d"</span>,<span class="string">"wei"</span>:<span class="string">"\u5a01\u5dcd\u5fae\u5371\u97e6\u8fdd\u6845\u56f4\u552f\u60df\u4e3a\u6f4d\u7ef4\u82c7\u840e\u59d4\u4f1f\u4f2a\u5c3e\u7eac\u672a\u851a\u5473\u754f\u80c3\u5582\u9b4f\u4f4d\u6e2d\u8c13\u5c09\u6170\u536b\u502d\u504e\u8bff\u9688\u8473\u8587\u5e0f\u5e37\u5d34\u5d6c\u7325\u732c\u95f1\u6ca9\u6d27\u6da0\u9036\u5a13\u73ae\u97ea\u8ece\u709c\u7168\u71a8\u75ff\u8249\u9c94"</span>,<span class="string">"wen"</span>:<span class="string">"\u761f\u6e29\u868a\u6587\u95fb\u7eb9\u543b\u7a33\u7d0a\u95ee\u520e\u6120\u960c\u6c76\u74ba\u97eb\u6b81\u96ef"</span>,<span class="string">"weng"</span>:<span class="string">"\u55e1\u7fc1\u74ee\u84ca\u8579"</span>,<span class="string">"wo"</span>:<span class="string">"\u631d\u8717\u6da1\u7a9d\u6211\u65a1\u5367\u63e1\u6c83\u83b4\u5e44\u6e25\u674c\u809f\u9f8c"</span>,<span class="string">"wu"</span>:<span class="string">"\u5deb\u545c\u94a8\u4e4c\u6c61\u8bec\u5c4b\u65e0\u829c\u68a7\u543e\u5434\u6bcb\u6b66\u4e94\u6342\u5348\u821e\u4f0d\u4fae\u575e\u620a\u96fe\u6664\u7269\u52ff\u52a1\u609f\u8bef\u5140\u4ef5\u9622\u90ac\u572c\u82b4\u5e91\u6003\u5fe4\u6d6f\u5be4\u8fd5\u59a9\u9a9b\u727e\u7110\u9e49\u9e5c\u8708\u92c8\u9f2f"</span>,<span class="string">"xi"</span>:<span class="string">"\u6614\u7199\u6790\u897f\u7852\u77fd\u6670\u563b\u5438\u9521\u727a\u7a00\u606f\u5e0c\u6089\u819d\u5915\u60dc\u7184\u70ef\u6eaa\u6c50\u7280\u6a84\u88ad\u5e2d\u4e60\u5ab3\u559c\u94e3\u6d17\u7cfb\u9699\u620f\u7ec6\u50d6\u516e\u96b0\u90d7\u831c\u8478\u84f0\u595a\u550f\u5f99\u9969\u960b\u6d60\u6dc5\u5c63\u5b09\u73ba\u6a28\u66e6\u89cb\u6b37\u71b9\u798a\u79a7\u94b8\u7699\u7a78\u8725\u87cb\u823e\u7fb2\u7c9e\u7fd5\u91af\u9f37"</span>,<span class="string">"xia"</span>:<span class="string">"\u778e\u867e\u5323\u971e\u8f96\u6687\u5ce1\u4fa0\u72ed\u4e0b\u53a6\u590f\u5413\u6380\u846d\u55c4\u72ce\u9050\u7455\u7856\u7615\u7f45\u9ee0"</span>,<span class="string">"xian"</span>:<span class="string">"\u9528\u5148\u4ed9\u9c9c\u7ea4\u54b8\u8d24\u8854\u8237\u95f2\u6d8e\u5f26\u5acc\u663e\u9669\u73b0\u732e\u53bf\u817a\u9985\u7fa1\u5baa\u9677\u9650\u7ebf\u51bc\u85d3\u5c98\u7303\u66b9\u5a34\u6c19\u7946\u9e47\u75eb\u86ac\u7b45\u7c7c\u9170\u8df9"</span>,<span class="string">"xiang"</span>:<span class="string">"\u76f8\u53a2\u9576\u9999\u7bb1\u8944\u6e58\u4e61\u7fd4\u7965\u8be6\u60f3\u54cd\u4eab\u9879\u5df7\u6a61\u50cf\u5411\u8c61\u8297\u8459\u9977\u5ea0\u9aa7\u7f03\u87d3\u9c9e\u98e8"</span>,<span class="string">"xiao"</span>:<span class="string">"\u8427\u785d\u9704\u524a\u54ee\u56a3\u9500\u6d88\u5bb5\u6dc6\u6653\u5c0f\u5b5d\u6821\u8096\u5578\u7b11\u6548\u54d3\u54bb\u5d24\u6f47\u900d\u9a81\u7ee1\u67ad\u67b5\u7b71\u7bab\u9b48"</span>,<span class="string">"xie"</span>:<span class="string">"\u6954\u4e9b\u6b47\u874e\u978b\u534f\u631f\u643a\u90aa\u659c\u80c1\u8c10\u5199\u68b0\u5378\u87f9\u61c8\u6cc4\u6cfb\u8c22\u5c51\u5055\u4eb5\u52f0\u71ee\u85a4\u64b7\u5ee8\u7023\u9082\u7ec1\u7f2c\u69ad\u698d\u6b59\u8e9e"</span>,<span class="string">"xin"</span>:<span class="string">"\u85aa\u82af\u950c\u6b23\u8f9b\u65b0\u5ffb\u5fc3\u4fe1\u8845\u56df\u99a8\u8398\u6b46\u94fd\u946b"</span>,<span class="string">"xing"</span>:<span class="string">"\u661f\u8165\u7329\u60fa\u5174\u5211\u578b\u5f62\u90a2\u884c\u9192\u5e78\u674f\u6027\u59d3\u9649\u8347\u8365\u64e4\u60bb\u784e"</span>,<span class="string">"xiong"</span>:<span class="string">"\u5144\u51f6\u80f8\u5308\u6c79\u96c4\u718a\u828e"</span>,<span class="string">"xiu"</span>:<span class="string">"\u4f11\u4fee\u7f9e\u673d\u55c5\u9508\u79c0\u8896\u7ee3\u83a0\u5cab\u9990\u5ea5\u9e3a\u8c85\u9af9"</span>,<span class="string">"xu"</span>:<span class="string">"\u589f\u620c\u9700\u865a\u5618\u987b\u5f90\u8bb8\u84c4\u9157\u53d9\u65ed\u5e8f\u755c\u6064\u7d6e\u5a7f\u7eea\u7eed\u8bb4\u8be9\u5729\u84ff\u6035\u6d2b\u6e86\u987c\u6829\u7166\u7809\u76f1\u80e5\u7cc8\u9191"</span>,<span class="string">"xuan"</span>:<span class="string">"\u8f69\u55a7\u5ba3\u60ac\u65cb\u7384\u9009\u7663\u7729\u7eda\u5107\u8c16\u8431\u63ce\u9994\u6ceb\u6d35\u6e32\u6f29\u7487\u6966\u6684\u70ab\u714a\u78b9\u94c9\u955f\u75c3"</span>,<span class="string">"xue"</span>:<span class="string">"\u9774\u859b\u5b66\u7a74\u96ea\u8840\u5671\u6cf6\u9cd5"</span>,<span class="string">"xun"</span>:<span class="string">"\u52cb\u718f\u5faa\u65ec\u8be2\u5bfb\u9a6f\u5de1\u6b89\u6c5b\u8bad\u8baf\u900a\u8fc5\u5dfd\u57d9\u8340\u85b0\u5ccb\u5f87\u6d54\u66db\u7aa8\u91ba\u9c9f"</span>,<span class="string">"ya"</span>:<span class="string">"\u538b\u62bc\u9e26\u9e2d\u5440\u4e2b\u82bd\u7259\u869c\u5d16\u8859\u6daf\u96c5\u54d1\u4e9a\u8bb6\u4f22\u63e0\u5416\u5c88\u8fd3\u5a05\u740a\u6860\u6c29\u7811\u775a\u75d6"</span>,<span class="string">"yan"</span>:<span class="string">"\u7109\u54bd\u9609\u70df\u6df9\u76d0\u4e25\u7814\u8712\u5ca9\u5ef6\u8a00\u989c\u960e\u708e\u6cbf\u5944\u63a9\u773c\u884d\u6f14\u8273\u5830\u71d5\u538c\u781a\u96c1\u5501\u5f66\u7130\u5bb4\u8c1a\u9a8c\u53a3\u9765\u8d5d\u4fe8\u5043\u5156\u8ba0\u8c33\u90fe\u9122\u82ab\u83f8\u5d26\u6079\u95eb\u960f\u6d07\u6e6e\u6edf\u598d\u5ae3\u7430\u664f\u80ed\u814c\u7131\u7f68\u7b75\u917d\u9b47\u990d\u9f39"</span>,<span class="string">"yang"</span>:<span class="string">"\u6b83\u592e\u9e2f\u79e7\u6768\u626c\u4f6f\u75a1\u7f8a\u6d0b\u9633\u6c27\u4ef0\u75d2\u517b\u6837\u6f3e\u5f89\u600f\u6cf1\u7080\u70ca\u6059\u86d8\u9785"</span>,<span class="string">"yao"</span>:<span class="string">"\u9080\u8170\u5996\u7476\u6447\u5c27\u9065\u7a91\u8c23\u59da\u54ac\u8200\u836f\u8981\u8000\u592d\u723b\u5406\u5d3e\u5fad\u7039\u5e7a\u73e7\u6773\u66dc\u80b4\u9e5e\u7a88\u7e47\u9cd0"</span>,<span class="string">"ye"</span>:<span class="string">"\u6930\u564e\u8036\u7237\u91ce\u51b6\u4e5f\u9875\u6396\u4e1a\u53f6\u66f3\u814b\u591c\u6db2\u8c12\u90ba\u63f6\u9980\u6654\u70e8\u94d8"</span>,<span class="string">"yi"</span>:<span class="string">"\u4e00\u58f9\u533b\u63d6\u94f1\u4f9d\u4f0a\u8863\u9890\u5937\u9057\u79fb\u4eea\u80f0\u7591\u6c82\u5b9c\u59e8\u5f5d\u6905\u8681\u501a\u5df2\u4e59\u77e3\u4ee5\u827a\u6291\u6613\u9091\u5c79\u4ebf\u5f79\u81c6\u9038\u8084\u75ab\u4ea6\u88d4\u610f\u6bc5\u5fc6\u4e49\u76ca\u6ea2\u8be3\u8bae\u8c0a\u8bd1\u5f02\u7ffc\u7fcc\u7ece\u5208\u5293\u4f7e\u8bd2\u572a\u572f\u57f8\u61ff\u82e1\u858f\u5f08\u5955\u6339\u5f0b\u5453\u54a6\u54bf\u566b\u5cc4\u5db7\u7317\u9974\u603f\u6021\u6092\u6f2a\u8fe4\u9a7f\u7f22\u6baa\u8d3b\u65d6\u71a0\u9487\u9552\u9571\u75cd\u7617\u7654\u7fca\u8864\u8734\u8223\u7fbf\u7ff3\u914f\u9edf"</span>,<span class="string">"yin"</span>:<span class="string">"\u8335\u836b\u56e0\u6bb7\u97f3\u9634\u59fb\u541f\u94f6\u6deb\u5bc5\u996e\u5c39\u5f15\u9690\u5370\u80e4\u911e\u5819\u831a\u5591\u72fa\u5924\u6c24\u94df\u763e\u8693\u972a\u9f88"</span>,<span class="string">"ying"</span>:<span class="string">"\u82f1\u6a31\u5a74\u9e70\u5e94\u7f28\u83b9\u8424\u8425\u8367\u8747\u8fce\u8d62\u76c8\u5f71\u9896\u786c\u6620\u5b34\u90e2\u8314\u83ba\u8426\u6484\u5624\u81ba\u6ee2\u6f46\u701b\u745b\u748e\u6979\u9e66\u763f\u988d\u7f42"</span>,<span class="string">"yo"</span>:<span class="string">"\u54df\u5537"</span>,<span class="string">"yong"</span>:<span class="string">"\u62e5\u4f63\u81c3\u75c8\u5eb8\u96cd\u8e0a\u86f9\u548f\u6cf3\u6d8c\u6c38\u607f\u52c7\u7528\u4fd1\u58c5\u5889\u6175\u9095\u955b\u752c\u9cd9\u9954"</span>,<span class="string">"you"</span>:<span class="string">"\u5e7d\u4f18\u60a0\u5fe7\u5c24\u7531\u90ae\u94c0\u72b9\u6cb9\u6e38\u9149\u6709\u53cb\u53f3\u4f51\u91c9\u8bf1\u53c8\u5e7c\u5363\u6538\u4f91\u83b8\u5466\u56ff\u5ba5\u67da\u7337\u7256\u94d5\u75a3\u8763\u9c7f\u9edd\u9f2c"</span>,<span class="string">"yu"</span>:<span class="string">"\u8fc2\u6de4\u4e8e\u76c2\u6986\u865e\u611a\u8206\u4f59\u4fde\u903e\u9c7c\u6109\u6e1d\u6e14\u9685\u4e88\u5a31\u96e8\u4e0e\u5c7f\u79b9\u5b87\u8bed\u7fbd\u7389\u57df\u828b\u90c1\u5401\u9047\u55bb\u5cea\u5fa1\u6108\u6b32\u72f1\u80b2\u8a89\u6d74\u5bd3\u88d5\u9884\u8c6b\u9a6d\u79ba\u6bd3\u4f1b\u4fe3\u8c00\u8c15\u8438\u84e3\u63c4\u5581\u5704\u5709\u5d5b\u72f3\u996b\u5ebe\u9608\u59aa\u59a4\u7ea1\u745c\u6631\u89ce\u8174\u6b24\u65bc\u715c\u71e0\u807f\u94b0\u9e46\u7610\u7600\u7ab3\u8753\u7afd\u8201\u96e9\u9f89"</span>,<span class="string">"yuan"</span>:<span class="string">"\u9e33\u6e0a\u51a4\u5143\u57a3\u8881\u539f\u63f4\u8f95\u56ed\u5458\u5706\u733f\u6e90\u7f18\u8fdc\u82d1\u613f\u6028\u9662\u586c\u6c85\u5a9b\u7457\u6a7c\u7230\u7722\u9e22\u8788\u9f0b"</span>,<span class="string">"yue"</span>:<span class="string">"\u66f0\u7ea6\u8d8a\u8dc3\u94a5\u5cb3\u7ca4\u6708\u60a6\u9605\u9fa0\u6a3e\u5216\u94ba"</span>,<span class="string">"yun"</span>:<span class="string">"\u8018\u4e91\u90e7\u5300\u9668\u5141\u8fd0\u8574\u915d\u6655\u97f5\u5b55\u90d3\u82b8\u72c1\u607d\u7ead\u6b92\u6600\u6c32"</span>,<span class="string">"za"</span>:<span class="string">"\u531d\u7838\u6742\u62f6\u5482"</span>,<span class="string">"zai"</span>:<span class="string">"\u683d\u54c9\u707e\u5bb0\u8f7d\u518d\u5728\u54b1\u5d3d\u753e"</span>,<span class="string">"zan"</span>:<span class="string">"\u6512\u6682\u8d5e\u74d2\u661d\u7c2a\u7ccc\u8db1\u933e"</span>,<span class="string">"zang"</span>:<span class="string">"\u8d43\u810f\u846c\u5958\u6215\u81e7"</span>,<span class="string">"zao"</span>:<span class="string">"\u906d\u7cdf\u51ff\u85fb\u67a3\u65e9\u6fa1\u86a4\u8e81\u566a\u9020\u7682\u7076\u71e5\u5523\u7f2b"</span>,<span class="string">"ze"</span>:<span class="string">"\u8d23\u62e9\u5219\u6cfd\u4ec4\u8d5c\u5567\u8fee\u6603\u7b2e\u7ba6\u8234"</span>,<span class="string">"zei"</span>:<span class="string">"\u8d3c"</span>,<span class="string">"zen"</span>:<span class="string">"\u600e\u8c2e"</span>,<span class="string">"zeng"</span>:<span class="string">"\u589e\u618e\u66fe\u8d60\u7f2f\u7511\u7f7e\u9503"</span>,<span class="string">"zha"</span>:<span class="string">"\u624e\u55b3\u6e23\u672d\u8f67\u94e1\u95f8\u7728\u6805\u69a8\u548b\u4e4d\u70b8\u8bc8\u63f8\u5412\u54a4\u54f3\u600d\u781f\u75c4\u86b1\u9f44"</span>,<span class="string">"zhai"</span>:<span class="string">"\u6458\u658b\u5b85\u7a84\u503a\u5be8\u7826"</span>,<span class="string">"zhan"</span>:<span class="string">"\u77bb\u6be1\u8a79\u7c98\u6cbe\u76cf\u65a9\u8f97\u5d2d\u5c55\u8638\u6808\u5360\u6218\u7ad9\u6e5b\u7efd\u8c35\u640c\u65c3"</span>,<span class="string">"zhang"</span>:<span class="string">"\u6a1f\u7ae0\u5f70\u6f33\u5f20\u638c\u6da8\u6756\u4e08\u5e10\u8d26\u4ed7\u80c0\u7634\u969c\u4ec9\u9123\u5e5b\u5d82\u7350\u5adc\u748b\u87d1"</span>,<span class="string">"zhao"</span>:<span class="string">"\u62db\u662d\u627e\u6cbc\u8d75\u7167\u7f69\u5146\u8087\u53ec\u722a\u8bcf\u68f9\u948a\u7b0a"</span>,<span class="string">"zhe"</span>:<span class="string">"\u906e\u6298\u54f2\u86f0\u8f99\u8005\u9517\u8517\u8fd9\u6d59\u8c2a\u966c\u67d8\u8f84\u78d4\u9e67\u891a\u8707\u8d6d"</span>,<span class="string">"zhen"</span>:<span class="string">"\u73cd\u659f\u771f\u7504\u7827\u81fb\u8d1e\u9488\u4fa6\u6795\u75b9\u8bca\u9707\u632f\u9547\u9635\u7f1c\u6862\u699b\u8f78\u8d48\u80d7\u6715\u796f\u755b\u9e29"</span>,<span class="string">"zheng"</span>:<span class="string">"\u84b8\u6323\u7741\u5f81\u72f0\u4e89\u6014\u6574\u62ef\u6b63\u653f\u5e27\u75c7\u90d1\u8bc1\u8be4\u5ce5\u94b2\u94ee\u7b5d"</span>,<span class="string">"zhi"</span>:<span class="string">"\u829d\u679d\u652f\u5431\u8718\u77e5\u80a2\u8102\u6c41\u4e4b\u7ec7\u804c\u76f4\u690d\u6b96\u6267\u503c\u4f84\u5740\u6307\u6b62\u8dbe\u53ea\u65e8\u7eb8\u5fd7\u631a\u63b7\u81f3\u81f4\u7f6e\u5e1c\u5cd9\u5236\u667a\u79e9\u7a1a\u8d28\u7099\u75d4\u6ede\u6cbb\u7a92\u536e\u965f\u90c5\u57f4\u82b7\u646d\u5e19\u5fee\u5f58\u54ab\u9a98\u6809\u67b3\u6800\u684e\u8f75\u8f7e\u6534\u8d3d\u81a3\u7949\u7957\u9ef9\u96c9\u9e37\u75e3\u86ed\u7d77\u916f\u8dd6\u8e2c\u8e2f\u8c78\u89ef"</span>,<span class="string">"zhong"</span>:<span class="string">"\u4e2d\u76c5\u5fe0\u949f\u8877\u7ec8\u79cd\u80bf\u91cd\u4ef2\u4f17\u51a2\u953a\u87bd\u8202\u822f\u8e35"</span>,<span class="string">"zhou"</span>:<span class="string">"\u821f\u5468\u5dde\u6d32\u8bcc\u7ca5\u8f74\u8098\u5e1a\u5492\u76b1\u5b99\u663c\u9aa4\u5544\u7740\u501c\u8bf9\u836e\u9b3b\u7ea3\u80c4\u78a1\u7c40\u8233\u914e\u9cb7"</span>,<span class="string">"zhu"</span>:<span class="string">"\u73e0\u682a\u86db\u6731\u732a\u8bf8\u8bdb\u9010\u7af9\u70db\u716e\u62c4\u77a9\u5631\u4e3b\u8457\u67f1\u52a9\u86c0\u8d2e\u94f8\u7b51\u4f4f\u6ce8\u795d\u9a7b\u4f2b\u4f8f\u90be\u82ce\u8331\u6d19\u6e1a\u6f74\u9a7a\u677c\u69e0\u6a65\u70b7\u94e2\u75b0\u7603\u86b0\u7afa\u7bb8\u7fe5\u8e85\u9e88"</span>,<span class="string">"zhua"</span>:<span class="string">"\u6293"</span>,<span class="string">"zhuai"</span>:<span class="string">"\u62fd"</span>,<span class="string">"zhuan"</span>:<span class="string">"\u4e13\u7816\u8f6c\u64b0\u8d5a\u7bc6\u629f\u556d\u989b"</span>,<span class="string">"zhuang"</span>:<span class="string">"\u6869\u5e84\u88c5\u5986\u649e\u58ee\u72b6\u4e2c"</span>,<span class="string">"zhui"</span>:<span class="string">"\u690e\u9525\u8ffd\u8d58\u5760\u7f00\u8411\u9a93\u7f12"</span>,<span class="string">"zhun"</span>:<span class="string">"\u8c06\u51c6"</span>,<span class="string">"zhuo"</span>:<span class="string">"\u6349\u62d9\u5353\u684c\u7422\u8301\u914c\u707c\u6d4a\u502c\u8bfc\u5ef4\u855e\u64e2\u555c\u6d5e\u6dbf\u6753\u712f\u799a\u65ab"</span>,<span class="string">"zi"</span>:<span class="string">"\u5179\u54a8\u8d44\u59ff\u6ecb\u6dc4\u5b5c\u7d2b\u4ed4\u7c7d\u6ed3\u5b50\u81ea\u6e0d\u5b57\u8c18\u5d6b\u59ca\u5b73\u7f01\u6893\u8f8e\u8d40\u6063\u7726\u9531\u79ed\u8014\u7b2b\u7ca2\u89dc\u8a3e\u9cbb\u9aed"</span>,<span class="string">"zong"</span>:<span class="string">"\u9b03\u68d5\u8e2a\u5b97\u7efc\u603b\u7eb5\u8159\u7cbd"</span>,<span class="string">"zou"</span>:<span class="string">"\u90b9\u8d70\u594f\u63cd\u9139\u9cb0"</span>,<span class="string">"zu"</span>:<span class="string">"\u79df\u8db3\u5352\u65cf\u7956\u8bc5\u963b\u7ec4\u4fce\u83f9\u5550\u5f82\u9a75\u8e74"</span>,<span class="string">"zuan"</span>:<span class="string">"\u94bb\u7e82\u6525\u7f35"</span>,<span class="string">"zui"</span>:<span class="string">"\u5634\u9189\u6700\u7f6a"</span>,<span class="string">"zun"</span>:<span class="string">"\u5c0a\u9075\u6499\u6a3d\u9cdf"</span>,<span class="string">"zuo"</span>:<span class="string">"\u6628\u5de6\u4f50\u67de\u505a\u4f5c\u5750\u5ea7\u961d\u963c\u80d9\u795a\u9162"</span>,<span class="string">"cou"</span>:<span class="string">"\u85ae\u6971\u8f8f\u8160"</span>,<span class="string">"nang"</span>:<span class="string">"\u652e\u54dd\u56d4\u9995\u66e9"</span>,<span class="string">"o"</span>:<span class="string">"\u5594"</span>,<span class="string">"dia"</span>:<span class="string">"\u55f2"</span>,<span class="string">"chuai"</span>:<span class="string">"\u562c\u81aa\u8e39"</span>,<span class="string">"cen"</span>:<span class="string">"\u5c91\u6d94"</span>,<span class="string">"diu"</span>:<span class="string">"\u94e5"</span>,<span class="string">"nou"</span>:<span class="string">"\u8028"</span>,<span class="string">"fou"</span>:<span class="string">"\u7f36"</span>,<span class="string">"bia"</span>:<span class="string">"\u9adf"</span>&#125;;    </div><div class="line">            <span class="keyword">this</span>.polyphone = &#123;<span class="string">"19969"</span>:<span class="string">"DZ"</span>,<span class="string">"19975"</span>:<span class="string">"WM"</span>,<span class="string">"19988"</span>:<span class="string">"QJ"</span>,<span class="string">"20048"</span>:<span class="string">"YL"</span>,<span class="string">"20056"</span>:<span class="string">"SC"</span>,<span class="string">"20060"</span>:<span class="string">"NM"</span>,<span class="string">"20094"</span>:<span class="string">"QG"</span>,<span class="string">"20127"</span>:<span class="string">"QJ"</span>,<span class="string">"20167"</span>:<span class="string">"QC"</span>,<span class="string">"20193"</span>:<span class="string">"YG"</span>,<span class="string">"20250"</span>:<span class="string">"KH"</span>,<span class="string">"20256"</span>:<span class="string">"ZC"</span>,<span class="string">"20282"</span>:<span class="string">"SC"</span>,<span class="string">"20285"</span>:<span class="string">"QJG"</span>,<span class="string">"20291"</span>:<span class="string">"TD"</span>,<span class="string">"20314"</span>:<span class="string">"YD"</span>,<span class="string">"20340"</span>:<span class="string">"NE"</span>,<span class="string">"20375"</span>:<span class="string">"TD"</span>,<span class="string">"20389"</span>:<span class="string">"YJ"</span>,<span class="string">"20391"</span>:<span class="string">"CZ"</span>,<span class="string">"20415"</span>:<span class="string">"PB"</span>,<span class="string">"20446"</span>:<span class="string">"YS"</span>,<span class="string">"20447"</span>:<span class="string">"SQ"</span>,<span class="string">"20504"</span>:<span class="string">"TC"</span>,<span class="string">"20608"</span>:<span class="string">"KG"</span>,<span class="string">"20854"</span>:<span class="string">"QJ"</span>,<span class="string">"20857"</span>:<span class="string">"ZC"</span>,<span class="string">"20911"</span>:<span class="string">"PF"</span>,<span class="string">"20504"</span>:<span class="string">"TC"</span>,<span class="string">"20608"</span>:<span class="string">"KG"</span>,<span class="string">"20854"</span>:<span class="string">"QJ"</span>,<span class="string">"20857"</span>:<span class="string">"ZC"</span>,<span class="string">"20911"</span>:<span class="string">"PF"</span>,<span class="string">"20985"</span>:<span class="string">"AW"</span>,<span class="string">"21032"</span>:<span class="string">"PB"</span>,<span class="string">"21048"</span>:<span class="string">"XQ"</span>,<span class="string">"21049"</span>:<span class="string">"SC"</span>,<span class="string">"21089"</span>:<span class="string">"YS"</span>,<span class="string">"21119"</span>:<span class="string">"JC"</span>,<span class="string">"21242"</span>:<span class="string">"SB"</span>,<span class="string">"21273"</span>:<span class="string">"SC"</span>,<span class="string">"21305"</span>:<span class="string">"YP"</span>,<span class="string">"21306"</span>:<span class="string">"QO"</span>,<span class="string">"21330"</span>:<span class="string">"ZC"</span>,<span class="string">"21333"</span>:<span class="string">"SDC"</span>,<span class="string">"21345"</span>:<span class="string">"QK"</span>,<span class="string">"21378"</span>:<span class="string">"CA"</span>,<span class="string">"21397"</span>:<span class="string">"SC"</span>,<span class="string">"21414"</span>:<span class="string">"XS"</span>,<span class="string">"21442"</span>:<span class="string">"SC"</span>,<span class="string">"21477"</span>:<span class="string">"JG"</span>,<span class="string">"21480"</span>:<span class="string">"TD"</span>,<span class="string">"21484"</span>:<span class="string">"ZS"</span>,<span class="string">"21494"</span>:<span class="string">"YX"</span>,<span class="string">"21505"</span>:<span class="string">"YX"</span>,<span class="string">"21512"</span>:<span class="string">"HG"</span>,<span class="string">"21523"</span>:<span class="string">"XH"</span>,<span class="string">"21537"</span>:<span class="string">"PB"</span>,<span class="string">"21542"</span>:<span class="string">"PF"</span>,<span class="string">"21549"</span>:<span class="string">"KH"</span>,<span class="string">"21571"</span>:<span class="string">"E"</span>,<span class="string">"21574"</span>:<span class="string">"DA"</span>,<span class="string">"21588"</span>:<span class="string">"TD"</span>,<span class="string">"21589"</span>:<span class="string">"O"</span>,<span class="string">"21618"</span>:<span class="string">"ZC"</span>,<span class="string">"21621"</span>:<span class="string">"KHA"</span>,<span class="string">"21632"</span>:<span class="string">"ZJ"</span>,<span class="string">"21654"</span>:<span class="string">"KG"</span>,<span class="string">"21679"</span>:<span class="string">"LKG"</span>,<span class="string">"21683"</span>:<span class="string">"KH"</span>,<span class="string">"21710"</span>:<span class="string">"A"</span>,<span class="string">"21719"</span>:<span class="string">"YH"</span>,<span class="string">"21734"</span>:<span class="string">"WOE"</span>,<span class="string">"21769"</span>:<span class="string">"A"</span>,<span class="string">"21780"</span>:<span class="string">"WN"</span>,<span class="string">"21804"</span>:<span class="string">"XH"</span>,<span class="string">"21834"</span>:<span class="string">"A"</span>,<span class="string">"21899"</span>:<span class="string">"ZD"</span>,<span class="string">"21903"</span>:<span class="string">"RN"</span>,<span class="string">"21908"</span>:<span class="string">"WO"</span>,<span class="string">"21939"</span>:<span class="string">"ZC"</span>,<span class="string">"21956"</span>:<span class="string">"SA"</span>,<span class="string">"21964"</span>:<span class="string">"YA"</span>,<span class="string">"21970"</span>:<span class="string">"TD"</span>,<span class="string">"22003"</span>:<span class="string">"A"</span>,<span class="string">"22031"</span>:<span class="string">"JG"</span>,<span class="string">"22040"</span>:<span class="string">"XS"</span>,<span class="string">"22060"</span>:<span class="string">"ZC"</span>,<span class="string">"22066"</span>:<span class="string">"ZC"</span>,<span class="string">"22079"</span>:<span class="string">"MH"</span>,<span class="string">"22129"</span>:<span class="string">"XJ"</span>,<span class="string">"22179"</span>:<span class="string">"XA"</span>,<span class="string">"22237"</span>:<span class="string">"NJ"</span>,<span class="string">"22244"</span>:<span class="string">"TD"</span>,<span class="string">"22280"</span>:<span class="string">"JQ"</span>,<span class="string">"22300"</span>:<span class="string">"YH"</span>,<span class="string">"22313"</span>:<span class="string">"XW"</span>,<span class="string">"22331"</span>:<span class="string">"YQ"</span>,<span class="string">"22343"</span>:<span class="string">"YJ"</span>,<span class="string">"22351"</span>:<span class="string">"PH"</span>,<span class="string">"22395"</span>:<span class="string">"DC"</span>,<span class="string">"22412"</span>:<span class="string">"TD"</span>,<span class="string">"22484"</span>:<span class="string">"PB"</span>,<span class="string">"22500"</span>:<span class="string">"PB"</span>,<span class="string">"22534"</span>:<span class="string">"ZD"</span>,<span class="string">"22549"</span>:<span class="string">"DH"</span>,<span class="string">"22561"</span>:<span class="string">"PB"</span>,<span class="string">"22612"</span>:<span class="string">"TD"</span>,<span class="string">"22771"</span>:<span class="string">"KQ"</span>,<span class="string">"22831"</span>:<span class="string">"HB"</span>,<span class="string">"22841"</span>:<span class="string">"JG"</span>,<span class="string">"22855"</span>:<span class="string">"QJ"</span>,<span class="string">"22865"</span>:<span class="string">"XQ"</span>,<span class="string">"23013"</span>:<span class="string">"ML"</span>,<span class="string">"23081"</span>:<span class="string">"WM"</span>,<span class="string">"23487"</span>:<span class="string">"SX"</span>,<span class="string">"23558"</span>:<span class="string">"QJ"</span>,<span class="string">"23561"</span>:<span class="string">"YW"</span>,<span class="string">"23586"</span>:<span class="string">"YW"</span>,<span class="string">"23614"</span>:<span class="string">"YW"</span>,<span class="string">"23615"</span>:<span class="string">"SN"</span>,<span class="string">"23631"</span>:<span class="string">"PB"</span>,<span class="string">"23646"</span>:<span class="string">"ZS"</span>,<span class="string">"23663"</span>:<span class="string">"ZT"</span>,<span class="string">"23673"</span>:<span class="string">"YG"</span>,<span class="string">"23762"</span>:<span class="string">"TD"</span>,<span class="string">"23769"</span>:<span class="string">"ZS"</span>,<span class="string">"23780"</span>:<span class="string">"QJ"</span>,<span class="string">"23884"</span>:<span class="string">"QK"</span>,<span class="string">"24055"</span>:<span class="string">"XH"</span>,<span class="string">"24113"</span>:<span class="string">"DC"</span>,<span class="string">"24162"</span>:<span class="string">"ZC"</span>,<span class="string">"24191"</span>:<span class="string">"GA"</span>,<span class="string">"24273"</span>:<span class="string">"QJ"</span>,<span class="string">"24324"</span>:<span class="string">"NL"</span>,<span class="string">"24377"</span>:<span class="string">"TD"</span>,<span class="string">"24378"</span>:<span class="string">"QJ"</span>,<span class="string">"24439"</span>:<span class="string">"PF"</span>,<span class="string">"24554"</span>:<span class="string">"ZS"</span>,<span class="string">"24683"</span>:<span class="string">"TD"</span>,<span class="string">"24694"</span>:<span class="string">"WE"</span>,<span class="string">"24733"</span>:<span class="string">"LK"</span>,<span class="string">"24925"</span>:<span class="string">"TN"</span>,<span class="string">"25094"</span>:<span class="string">"ZG"</span>,<span class="string">"25100"</span>:<span class="string">"XQ"</span>,<span class="string">"25103"</span>:<span class="string">"XH"</span>,<span class="string">"25153"</span>:<span class="string">"PB"</span>,<span class="string">"25170"</span>:<span class="string">"PB"</span>,<span class="string">"25179"</span>:<span class="string">"KG"</span>,<span class="string">"25203"</span>:<span class="string">"PB"</span>,<span class="string">"25240"</span>:<span class="string">"ZS"</span>,<span class="string">"25282"</span>:<span class="string">"FB"</span>,<span class="string">"25303"</span>:<span class="string">"NA"</span>,<span class="string">"25324"</span>:<span class="string">"KG"</span>,<span class="string">"25341"</span>:<span class="string">"ZY"</span>,<span class="string">"25373"</span>:<span class="string">"WZ"</span>,<span class="string">"25375"</span>:<span class="string">"XJ"</span>,<span class="string">"25384"</span>:<span class="string">"A"</span>,<span class="string">"25457"</span>:<span class="string">"A"</span>,<span class="string">"25528"</span>:<span class="string">"SD"</span>,<span class="string">"25530"</span>:<span class="string">"SC"</span>,<span class="string">"25552"</span>:<span class="string">"TD"</span>,<span class="string">"25774"</span>:<span class="string">"ZC"</span>,<span class="string">"25874"</span>:<span class="string">"ZC"</span>,<span class="string">"26044"</span>:<span class="string">"YW"</span>,<span class="string">"26080"</span>:<span class="string">"WM"</span>,<span class="string">"26292"</span>:<span class="string">"PB"</span>,<span class="string">"26333"</span>:<span class="string">"PB"</span>,<span class="string">"26355"</span>:<span class="string">"ZY"</span>,<span class="string">"26366"</span>:<span class="string">"CZ"</span>,<span class="string">"26397"</span>:<span class="string">"ZC"</span>,<span class="string">"26399"</span>:<span class="string">"QJ"</span>,<span class="string">"26415"</span>:<span class="string">"ZS"</span>,<span class="string">"26451"</span>:<span class="string">"SB"</span>,<span class="string">"26526"</span>:<span class="string">"ZC"</span>,<span class="string">"26552"</span>:<span class="string">"JG"</span>,<span class="string">"26561"</span>:<span class="string">"TD"</span>,<span class="string">"26588"</span>:<span class="string">"JG"</span>,<span class="string">"26597"</span>:<span class="string">"CZ"</span>,<span class="string">"26629"</span>:<span class="string">"ZS"</span>,<span class="string">"26638"</span>:<span class="string">"YL"</span>,<span class="string">"26646"</span>:<span class="string">"XQ"</span>,<span class="string">"26653"</span>:<span class="string">"KG"</span>,<span class="string">"26657"</span>:<span class="string">"XJ"</span>,<span class="string">"26727"</span>:<span class="string">"HG"</span>,<span class="string">"26894"</span>:<span class="string">"ZC"</span>,<span class="string">"26937"</span>:<span class="string">"ZS"</span>,<span class="string">"26946"</span>:<span class="string">"ZC"</span>,<span class="string">"26999"</span>:<span class="string">"KJ"</span>,<span class="string">"27099"</span>:<span class="string">"KJ"</span>,<span class="string">"27449"</span>:<span class="string">"YQ"</span>,<span class="string">"27481"</span>:<span class="string">"XS"</span>,<span class="string">"27542"</span>:<span class="string">"ZS"</span>,<span class="string">"27663"</span>:<span class="string">"ZS"</span>,<span class="string">"27748"</span>:<span class="string">"TS"</span>,<span class="string">"27784"</span>:<span class="string">"SC"</span>,<span class="string">"27788"</span>:<span class="string">"ZD"</span>,<span class="string">"27795"</span>:<span class="string">"TD"</span>,<span class="string">"27812"</span>:<span class="string">"O"</span>,<span class="string">"27850"</span>:<span class="string">"PB"</span>,<span class="string">"27852"</span>:<span class="string">"MB"</span>,<span class="string">"27895"</span>:<span class="string">"SL"</span>,<span class="string">"27898"</span>:<span class="string">"PL"</span>,<span class="string">"27973"</span>:<span class="string">"QJ"</span>,<span class="string">"27981"</span>:<span class="string">"KH"</span>,<span class="string">"27986"</span>:<span class="string">"HX"</span>,<span class="string">"27994"</span>:<span class="string">"XJ"</span>,<span class="string">"28044"</span>:<span class="string">"YC"</span>,<span class="string">"28065"</span>:<span class="string">"WG"</span>,<span class="string">"28177"</span>:<span class="string">"SM"</span>,<span class="string">"28267"</span>:<span class="string">"QJ"</span>,<span class="string">"28291"</span>:<span class="string">"KH"</span>,<span class="string">"28337"</span>:<span class="string">"ZQ"</span>,<span class="string">"28463"</span>:<span class="string">"TL"</span>,<span class="string">"28548"</span>:<span class="string">"DC"</span>,<span class="string">"28601"</span>:<span class="string">"TD"</span>,<span class="string">"28689"</span>:<span class="string">"PB"</span>,<span class="string">"28805"</span>:<span class="string">"JG"</span>,<span class="string">"28820"</span>:<span class="string">"QG"</span>,<span class="string">"28846"</span>:<span class="string">"PB"</span>,<span class="string">"28952"</span>:<span class="string">"TD"</span>,<span class="string">"28975"</span>:<span class="string">"ZC"</span>,<span class="string">"29100"</span>:<span class="string">"A"</span>,<span class="string">"29325"</span>:<span class="string">"QJ"</span>,<span class="string">"29575"</span>:<span class="string">"SL"</span>,<span class="string">"29602"</span>:<span class="string">"FB"</span>,<span class="string">"30010"</span>:<span class="string">"TD"</span>,<span class="string">"30044"</span>:<span class="string">"CX"</span>,<span class="string">"30058"</span>:<span class="string">"PF"</span>,<span class="string">"30091"</span>:<span class="string">"YSP"</span>,<span class="string">"30111"</span>:<span class="string">"YN"</span>,<span class="string">"30229"</span>:<span class="string">"XJ"</span>,<span class="string">"30427"</span>:<span class="string">"SC"</span>,<span class="string">"30465"</span>:<span class="string">"SX"</span>,<span class="string">"30631"</span>:<span class="string">"YQ"</span>,<span class="string">"30655"</span>:<span class="string">"QJ"</span>,<span class="string">"30684"</span>:<span class="string">"QJG"</span>,<span class="string">"30707"</span>:<span class="string">"SD"</span>,<span class="string">"30729"</span>:<span class="string">"XH"</span>,<span class="string">"30796"</span>:<span class="string">"LG"</span>,<span class="string">"30917"</span>:<span class="string">"PB"</span>,<span class="string">"31074"</span>:<span class="string">"NM"</span>,<span class="string">"31085"</span>:<span class="string">"JZ"</span>,<span class="string">"31109"</span>:<span class="string">"SC"</span>,<span class="string">"31181"</span>:<span class="string">"ZC"</span>,<span class="string">"31192"</span>:<span class="string">"MLB"</span>,<span class="string">"31293"</span>:<span class="string">"JQ"</span>,<span class="string">"31400"</span>:<span class="string">"YX"</span>,<span class="string">"31584"</span>:<span class="string">"YJ"</span>,<span class="string">"31896"</span>:<span class="string">"ZN"</span>,<span class="string">"31909"</span>:<span class="string">"ZY"</span>,<span class="string">"31995"</span>:<span class="string">"XJ"</span>,<span class="string">"32321"</span>:<span class="string">"PF"</span>,<span class="string">"32327"</span>:<span class="string">"ZY"</span>,<span class="string">"32418"</span>:<span class="string">"HG"</span>,<span class="string">"32420"</span>:<span class="string">"XQ"</span>,<span class="string">"32421"</span>:<span class="string">"HG"</span>,<span class="string">"32438"</span>:<span class="string">"LG"</span>,<span class="string">"32473"</span>:<span class="string">"GJ"</span>,<span class="string">"32488"</span>:<span class="string">"TD"</span>,<span class="string">"32521"</span>:<span class="string">"QJ"</span>,<span class="string">"32527"</span>:<span class="string">"PB"</span>,<span class="string">"32562"</span>:<span class="string">"ZSQ"</span>,<span class="string">"32564"</span>:<span class="string">"JZ"</span>,<span class="string">"32735"</span>:<span class="string">"ZD"</span>,<span class="string">"32793"</span>:<span class="string">"PB"</span>,<span class="string">"33071"</span>:<span class="string">"PF"</span>,<span class="string">"33098"</span>:<span class="string">"XL"</span>,<span class="string">"33100"</span>:<span class="string">"YA"</span>,<span class="string">"33152"</span>:<span class="string">"PB"</span>,<span class="string">"33261"</span>:<span class="string">"CX"</span>,<span class="string">"33324"</span>:<span class="string">"BP"</span>,<span class="string">"33333"</span>:<span class="string">"TD"</span>,<span class="string">"33406"</span>:<span class="string">"YA"</span>,<span class="string">"33426"</span>:<span class="string">"WM"</span>,<span class="string">"33432"</span>:<span class="string">"PB"</span>,<span class="string">"33445"</span>:<span class="string">"JG"</span>,<span class="string">"33486"</span>:<span class="string">"ZN"</span>,<span class="string">"33493"</span>:<span class="string">"TS"</span>,<span class="string">"33507"</span>:<span class="string">"QJ"</span>,<span class="string">"33540"</span>:<span class="string">"QJ"</span>,<span class="string">"33544"</span>:<span class="string">"ZC"</span>,<span class="string">"33564"</span>:<span class="string">"XQ"</span>,<span class="string">"33617"</span>:<span class="string">"YT"</span>,<span class="string">"33632"</span>:<span class="string">"QJ"</span>,<span class="string">"33636"</span>:<span class="string">"XH"</span>,<span class="string">"33637"</span>:<span class="string">"YX"</span>,<span class="string">"33694"</span>:<span class="string">"WG"</span>,<span class="string">"33705"</span>:<span class="string">"PF"</span>,<span class="string">"33728"</span>:<span class="string">"YW"</span>,<span class="string">"33882"</span>:<span class="string">"SR"</span>,<span class="string">"34067"</span>:<span class="string">"WM"</span>,<span class="string">"34074"</span>:<span class="string">"YW"</span>,<span class="string">"34121"</span>:<span class="string">"QJ"</span>,<span class="string">"34255"</span>:<span class="string">"ZC"</span>,<span class="string">"34259"</span>:<span class="string">"XL"</span>,<span class="string">"34425"</span>:<span class="string">"JH"</span>,<span class="string">"34430"</span>:<span class="string">"XH"</span>,<span class="string">"34485"</span>:<span class="string">"KH"</span>,<span class="string">"34503"</span>:<span class="string">"YS"</span>,<span class="string">"34532"</span>:<span class="string">"HG"</span>,<span class="string">"34552"</span>:<span class="string">"XS"</span>,<span class="string">"34558"</span>:<span class="string">"YE"</span>,<span class="string">"34593"</span>:<span class="string">"ZL"</span>,<span class="string">"34660"</span>:<span class="string">"YQ"</span>,<span class="string">"34892"</span>:<span class="string">"XH"</span>,<span class="string">"34928"</span>:<span class="string">"SC"</span>,<span class="string">"34999"</span>:<span class="string">"QJ"</span>,<span class="string">"35048"</span>:<span class="string">"PB"</span>,<span class="string">"35059"</span>:<span class="string">"SC"</span>,<span class="string">"35098"</span>:<span class="string">"ZC"</span>,<span class="string">"35203"</span>:<span class="string">"TQ"</span>,<span class="string">"35265"</span>:<span class="string">"JX"</span>,<span class="string">"35299"</span>:<span class="string">"JX"</span>,<span class="string">"35782"</span>:<span class="string">"SZ"</span>,<span class="string">"35828"</span>:<span class="string">"YS"</span>,<span class="string">"35830"</span>:<span class="string">"E"</span>,<span class="string">"35843"</span>:<span class="string">"TD"</span>,<span class="string">"35895"</span>:<span class="string">"YG"</span>,<span class="string">"35977"</span>:<span class="string">"MH"</span>,<span class="string">"36158"</span>:<span class="string">"JG"</span>,<span class="string">"36228"</span>:<span class="string">"QJ"</span>,<span class="string">"36426"</span>:<span class="string">"XQ"</span>,<span class="string">"36466"</span>:<span class="string">"DC"</span>,<span class="string">"36710"</span>:<span class="string">"JC"</span>,<span class="string">"36711"</span>:<span class="string">"ZYG"</span>,<span class="string">"36767"</span>:<span class="string">"PB"</span>,<span class="string">"36866"</span>:<span class="string">"SK"</span>,<span class="string">"36951"</span>:<span class="string">"YW"</span>,<span class="string">"37034"</span>:<span class="string">"YX"</span>,<span class="string">"37063"</span>:<span class="string">"XH"</span>,<span class="string">"37218"</span>:<span class="string">"ZC"</span>,<span class="string">"37325"</span>:<span class="string">"ZC"</span>,<span class="string">"38063"</span>:<span class="string">"PB"</span>,<span class="string">"38079"</span>:<span class="string">"TD"</span>,<span class="string">"38085"</span>:<span class="string">"QY"</span>,<span class="string">"38107"</span>:<span class="string">"DC"</span>,<span class="string">"38116"</span>:<span class="string">"TD"</span>,<span class="string">"38123"</span>:<span class="string">"YD"</span>,<span class="string">"38224"</span>:<span class="string">"HG"</span>,<span class="string">"38241"</span>:<span class="string">"XTC"</span>,<span class="string">"38271"</span>:<span class="string">"ZC"</span>,<span class="string">"38415"</span>:<span class="string">"YE"</span>,<span class="string">"38426"</span>:<span class="string">"KH"</span>,<span class="string">"38461"</span>:<span class="string">"YD"</span>,<span class="string">"38463"</span>:<span class="string">"AE"</span>,<span class="string">"38466"</span>:<span class="string">"PB"</span>,<span class="string">"38477"</span>:<span class="string">"XJ"</span>,<span class="string">"38518"</span>:<span class="string">"YT"</span>,<span class="string">"38551"</span>:<span class="string">"WK"</span>,<span class="string">"38585"</span>:<span class="string">"ZC"</span>,<span class="string">"38704"</span>:<span class="string">"XS"</span>,<span class="string">"38739"</span>:<span class="string">"LJ"</span>,<span class="string">"38761"</span>:<span class="string">"GJ"</span>,<span class="string">"38808"</span>:<span class="string">"SQ"</span>,<span class="string">"39048"</span>:<span class="string">"JG"</span>,<span class="string">"39049"</span>:<span class="string">"XJ"</span>,<span class="string">"39052"</span>:<span class="string">"HG"</span>,<span class="string">"39076"</span>:<span class="string">"CZ"</span>,<span class="string">"39271"</span>:<span class="string">"XT"</span>,<span class="string">"39534"</span>:<span class="string">"TD"</span>,<span class="string">"39552"</span>:<span class="string">"TD"</span>,<span class="string">"39584"</span>:<span class="string">"PB"</span>,<span class="string">"39647"</span>:<span class="string">"SB"</span>,<span class="string">"39730"</span>:<span class="string">"LG"</span>,<span class="string">"39748"</span>:<span class="string">"TPB"</span>,<span class="string">"40109"</span>:<span class="string">"ZQ"</span>,<span class="string">"40479"</span>:<span class="string">"ND"</span>,<span class="string">"40516"</span>:<span class="string">"HG"</span>,<span class="string">"40536"</span>:<span class="string">"HG"</span>,<span class="string">"40583"</span>:<span class="string">"QJ"</span>,<span class="string">"40765"</span>:<span class="string">"YQ"</span>,<span class="string">"40784"</span>:<span class="string">"QJ"</span>,<span class="string">"40840"</span>:<span class="string">"YK"</span>,<span class="string">"40863"</span>:<span class="string">"QJG"</span>&#125;;</div><div class="line">        &#125;,</div><div class="line">     </div><div class="line">        <span class="comment">// 提取拼音, 返回首字母大写形式</span></div><div class="line">        getFullChars: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;    </div><div class="line">            <span class="keyword">var</span> result = <span class="string">''</span>, name;</div><div class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[a-zA-Z0-9\- ]'</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len = str.length; i &lt; len; i++)&#123;</div><div class="line">                <span class="keyword">var</span> ch = str.substr(i,<span class="number">1</span>), unicode = ch.charCodeAt(<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span>(unicode &gt; <span class="number">40869</span> || unicode &lt; <span class="number">19968</span>)&#123;</div><div class="line">                    result += ch;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    name = <span class="keyword">this</span>._getFullChar(ch);</div><div class="line">                    <span class="keyword">if</span>(name !== <span class="literal">false</span>)&#123;</div><div class="line">                        result += name;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">        <span class="comment">// 提取首字母，返回大写形式     </span></div><div class="line">        getCamelChars: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span>(str) !== <span class="string">'string'</span>)            </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">-1</span>, <span class="string">"函数getFisrt需要字符串类型参数!"</span>);</div><div class="line">            <span class="keyword">var</span> chars = []; <span class="comment">//保存中间结果的数组</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=str.length; i &lt; len; i++)&#123;</div><div class="line">                <span class="comment">//获得unicode码</span></div><div class="line">                <span class="keyword">var</span> ch = str.charAt(i);</div><div class="line">                <span class="comment">//检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理</span></div><div class="line">                chars.push(<span class="keyword">this</span>._getChar(ch));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//处理arrResult,返回所有可能的拼音首字母串数组</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._getResult(chars);</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">         </div><div class="line">        <span class="comment">// 提取拼音</span></div><div class="line">        _getFullChar: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.full_dict)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="number">-1</span> !== <span class="keyword">this</span>.full_dict[key].indexOf(str))&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>._capitalize(key); <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">        <span class="comment">// 首字母大写</span></div><div class="line">        _capitalize: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(str.length&gt;<span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">var</span> first = str.substr(<span class="number">0</span>,<span class="number">1</span>).toUpperCase();</div><div class="line">                <span class="keyword">var</span> spare = str.substr(<span class="number">1</span>,str.length);</div><div class="line">                <span class="keyword">return</span> first + spare;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">        _getChar: <span class="function"><span class="keyword">function</span>(<span class="params">ch</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> unicode = ch.charCodeAt(<span class="number">0</span>);</div><div class="line">            <span class="comment">//如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数</span></div><div class="line">            <span class="keyword">if</span>(unicode &gt; <span class="number">40869</span> || unicode &lt; <span class="number">19968</span>)</div><div class="line">                <span class="keyword">return</span> ch; <span class="comment">//dealWithOthers(ch);</span></div><div class="line">            <span class="comment">//检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母</span></div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.options.checkPolyphone) </div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.char_dict.charAt(unicode<span class="number">-19968</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.polyphone[unicode] ? <span class="keyword">this</span>.polyphone[unicode] : <span class="keyword">this</span>.char_dict.charAt(unicode<span class="number">-19968</span>);</div><div class="line">        &#125;,</div><div class="line">         </div><div class="line">        _getResult: <span class="function"><span class="keyword">function</span>(<span class="params">chars</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.options.checkPolyphone)</div><div class="line">                <span class="keyword">return</span> chars.join(<span class="string">''</span>);</div><div class="line">            <span class="keyword">var</span> result = [<span class="string">''</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=chars.length;i&lt;len;i++)&#123;</div><div class="line">                <span class="keyword">var</span> str = chars[i], strlen = str.length;</div><div class="line">                <span class="keyword">if</span>(strlen == <span class="number">1</span>)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; result.length; j++)&#123;</div><div class="line">                        result[k] += str;</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">var</span> swap1 = result.slice(<span class="number">0</span>);</div><div class="line">                    result = [];</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; strlen; j++)&#123;</div><div class="line">                        <span class="comment">//复制一个相同的arrRslt</span></div><div class="line">                        <span class="keyword">var</span> swap2 = swap1.slice(<span class="number">0</span>);</div><div class="line">                        <span class="comment">//把当前字符str[k]添加到每个元素末尾</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>; k &lt; swap2.length; k++)&#123;</div><div class="line">                            swap2[k] += str.charAt(j);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//把复制并修改后的数组连接到arrRslt上</span></div><div class="line">                        result = result.concat(swap2);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">     </div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">    <span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">dst, src</span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> src)&#123;</div><div class="line">            dst[property] = src[property];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dst;</div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Pinyin(<span class="built_in">arguments</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>如我要进行排序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>) </span>&#123;</div><div class="line">    <span class="comment">// 转换为拼音</span></div><div class="line">    val1 = Pinyin.getFullChars(val1).toLowerCase();</div><div class="line">    val2 = Pinyin.getFullChars(val2).toLowerCase();</div><div class="line">    </div><div class="line">    <span class="comment">// 获取较长的拼音的长度</span></div><div class="line">    <span class="keyword">var</span> length =  val1.length &gt; val2.length ? val1.length:val2.length ;</div><div class="line">    </div><div class="line">    <span class="comment">// 依次比较字母的unicode码，相等时返回0，小于时返回-1，大于时返回1</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++ ) &#123;</div><div class="line">        <span class="keyword">var</span> differ = val1.charCodeAt(i) - val2.charCodeAt(i);</div><div class="line">        <span class="keyword">if</span>(differ == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(val1.charAt(i) == <span class="string">'_'</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> differ;</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">if</span>(i == length) &#123;</div><div class="line">        <span class="keyword">return</span> val1.length - val2.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> OW = <span class="string">"守望屁股"</span>.sort(compare);</div><div class="line"><span class="built_in">console</span>.log(OW);<span class="comment">//"股屁守望"</span></div></pre></td></tr></table></figure></p>
<p>如我要获取某个字符串的首字母<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> OW = Pinyin.getCamelChars(<span class="string">"守望屁股"</span>);</div><div class="line"><span class="built_in">console</span>.log(OW);<span class="comment">//"SWPG"</span></div><div class="line"><span class="built_in">console</span>.log(OW.charAt(<span class="number">0</span>));<span class="comment">//"S"</span></div></pre></td></tr></table></figure></p>
<p>通过上述方法的调用即可实现获取某个字符串的拼音，甚至是想实现通过首字母索引实现页面查找功能。</p>
<h1 id="运行在服务端"><a href="#运行在服务端" class="headerlink" title="运行在服务端"></a>运行在服务端</h1><p>可以参考这个项目 <a href="https://github.com/hotoo/pinyin" target="_blank" rel="external">hotoo/pinyin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习前端知识的时候遇到的一个问题，如果把一个中文字符串按汉语拼音的序列排序？&lt;br&gt;于是上网搜到了一些解决办法。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="http://xingbofeng.github.io/2016/09/05/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xingbofeng.github.io/2016/09/05/hexo+github搭建个人博客/</id>
    <published>2016-09-05T08:00:00.000Z</published>
    <updated>2016-10-23T15:52:01.344Z</updated>
    
    <content type="html"><![CDATA[<p>断断续续地弄这个博客也算是弄了很久了，突然就只是想写一篇文章来说说自己搭这玩意的过程和踩过的坑。<br>主题用的是yilia主题，总的来说这个主题虽然很清新但是由于现在存有一些bug需要自己手动修改代码。如果觉得过于麻烦的话建议使用另外的主题。（貌似有一款主题NexT很是受欢迎，读者可以自行尝试）<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>github：注册github账号并新建一个project，名为yourname.github.io。其中yourname可以是你的github id。</li>
<li>nodejs：下载安装nodejs。</li>
<li>git：安装git，这个在github官网有下载链接。</li>
</ol>
<h1 id="安装并部署Hexo"><a href="#安装并部署Hexo" class="headerlink" title="安装并部署Hexo"></a>安装并部署Hexo</h1><p>Hexo是一款帮助你快速搭建博客的，基于nodejs的静态博客框架。<br>在本地新建一个文件夹blog，其中用于存放你的博客文件。 <img src="http://oczira72b.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160905160652.jpg" alt="image"><br>打开此文件夹，在任意位置点击鼠标右键，选择git bash，呼出git命令行工具。  <img src="http://oczira72b.bkt.clouddn.com/hexo1.jpg" alt="image"><br>输入命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>来测试是否成功安装npm。命令如下，出现版本提示表示安装成功。<br>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。<br><img src="http://oczira72b.bkt.clouddn.com/hexo3.jpg" alt="image"><br>若无，输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install npm -g</div></pre></td></tr></table></figure></p>
<p>安装npm。<br>接下来输入命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>注意：-g是指全局安装hexo。<br><img src="http://oczira72b.bkt.clouddn.com/hexo2.jpg" alt="image"><br>继续输入命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p><img src="http://oczira72b.bkt.clouddn.com/hexo4.jpg" alt="image"><br>Hexo 即会自动在目标文件夹建立网站所需要的所有文件。<br>继续输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>生成博客文件并启动本地服务。<br>成功后，打开浏览器输入localhost:4000，将出现<br><img src="http://oczira72b.bkt.clouddn.com/hexo5.jpg" alt="image"></p>
<h1 id="创建Repository并绑定本地博客到github上"><a href="#创建Repository并绑定本地博客到github上" class="headerlink" title="创建Repository并绑定本地博客到github上"></a>创建Repository并绑定本地博客到github上</h1><p>创建的时候注意Repository的名字。比如我的Github账号是xingbofeng，那么我应该创建的Repository的名字是：xingbofeng.github.io。<br><img src="http://oczira72b.bkt.clouddn.com/hexo6.jpg" alt="image"><br>之后复制该Repository的URL。<br><img src="http://oczira72b.bkt.clouddn.com/hexo7.jpg" alt="image"><br>之后找到根目录下的_config.yml文件，修改最后几行如下<br><img src="http://oczira72b.bkt.clouddn.com/hexo8.jpg" alt="image"></p>
<h1 id="设置SSH"><a href="#设置SSH" class="headerlink" title="设置SSH"></a>设置SSH</h1><p>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al ~/.ssh</div></pre></td></tr></table></figure></p>
<p>如果不存在就没有关系，如果存在的话，删除.ssh文件夹里面所有文件：<br><img src="http://oczira72b.bkt.clouddn.com/hexo9.jpg" alt="image"><br>输入以下指令（邮箱就是你注册github时候的邮箱）后，回车：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;encounterxingbofeng@outlook.com&quot;</div></pre></td></tr></table></figure></p>
<p>之后输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-agent -s</div><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<p>输入之后，在我这里是出错了，不知道你的有没有出错。<br><img src="http://oczira72b.bkt.clouddn.com/hexo10.jpg" alt="image"><br>如果你的也是这样子出错了的话，就输入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eval `ssh-agent -s`</div><div class="line">ssh-add</div></pre></td></tr></table></figure></p>
<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>之后进入你的github，设置你的SSH<br><img src="http://oczira72b.bkt.clouddn.com/hexo11.jpg" alt="image"><br>点击New SSH key<br><img src="http://oczira72b.bkt.clouddn.com/hexo12.jpg" alt="image"><br>Title随便写，Key为刚才拷贝的SSH Key<br><img src="http://oczira72b.bkt.clouddn.com/hexo13.jpg" alt="image"><br>点击Add SSH key <img src="http://oczira72b.bkt.clouddn.com/hexo14.jpg" alt="image"><br>输入你的Github密码即可完成SSH Key的添加。键入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>你可能会看到有警告，输入“yes”就好。</p>
<h1 id="完成部署并更换主题"><a href="#完成部署并更换主题" class="headerlink" title="完成部署并更换主题"></a>完成部署并更换主题</h1><p>输入以下命令完成部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>之后，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href="http://xingbofeng.github.io/">http://xingbofeng.github.io/</a></p>
<p>之后就是更换主题了= =当然我只用过yilia与NexT主题，大家也可以去尝试别的主题。<br>在网上看别人的攻略，以下是我根据别人的攻略推荐的主题。<br><a href="https://github.com/daisygao/hexo-themes-cover" target="_blank" rel="external">Cover</a>- A chic theme with facebook-like cover photo.<br><a href="https://github.com/henryhuang/oishi" target="_blank" rel="external">Oishi</a>- A white theme based on Landscape plus and Writing.<br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>- Elegant theme for Hexo.<br><a href="https://github.com/hardywu/hexo-theme-sidebar" target="_blank" rel="external">Sidebar</a>- Another theme based on Light with a simple sidebar<br><a href="https://github.com/SuperKieran/TKL" target="_blank" rel="external">TKL</a>- A responsive design theme for Hexo.<br><a href="https://github.com/levonlin/Tinnypp" target="_blank" rel="external">Tinnypp</a>- A clean, simple theme based on Tinny<br><a href="https://github.com/yunlzheng/hexo-themes-writing" target="_blank" rel="external">Writing</a>- A small and simple hexo theme based on Light<br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a>- Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br><a href="https://github.com/Voidly/pacman" target="_blank" rel="external">Pacman voidy</a>- A theme with dynamic tagcloud and dynamic snow<br>一些基本路径<br>文章在跟目录下的source/_posts，<br>博客相关配置文件在根目录下的 _config.yml文件和主题根目录下的 _config.yml文件（即themes\yilia\ _config.yml）</p>
<h1 id="修改yilia的相关bug"><a href="#修改yilia的相关bug" class="headerlink" title="修改yilia的相关bug"></a>修改yilia的相关bug</h1><p>对于无javascript基础的同学不推荐此主题，因为此主题尚有一些bug没有被修复，以下为修改此主题相关bug的方法</p>
<p>1.该主题头像显示不成功，解决办法为：<br>修改layout/_partial/left-col.ejs的第6行和第8行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%=theme.avatar%&gt;"</span> <span class="attr">class</span>=<span class="string">"js-avatar show"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%=theme.avatar%&gt;"</span> <span class="attr">class</span>=<span class="string">"js-avatar show"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;opacity: 1;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改layout/_partial/mobile-nav.ejs的第10行和第12行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%=theme.avatar%&gt;"</span> <span class="attr">class</span>=<span class="string">"js-avatar show"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%=theme.avatar%&gt;"</span> <span class="attr">class</span>=<span class="string">"js-avatar show"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;opacity: 1;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.该主题左侧小房子与标签显示不成功，解决办法为：<br>修改layout/_partial/after-footer.ejs中的第5～18行代码为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> yiliaConfig = &#123;</div><div class="line">        fancybox: <span class="xml"><span class="tag">&lt;<span class="name">%=theme.fancybox%</span>&gt;</span>,</span></div><div class="line">        mathjax: <span class="tag">&lt;<span class="name">%=theme.mathjax%</span>&gt;</span>,</div><div class="line">        animate: <span class="tag">&lt;<span class="name">%=theme.animate%</span>&gt;</span>,</div><div class="line">        isHome: <span class="tag">&lt;<span class="name">%=is_home()%</span>&gt;</span>,</div><div class="line">        isPost: <span class="tag">&lt;<span class="name">%=is_post()%</span>&gt;</span>,</div><div class="line">        isArchive: <span class="tag">&lt;<span class="name">%=is_archive()%</span>&gt;</span>,</div><div class="line">        isTag: <span class="tag">&lt;<span class="name">%=is_tag()%</span>&gt;</span>,</div><div class="line">        isCategory: <span class="tag">&lt;<span class="name">%=is_category()%</span>&gt;</span>,</div><div class="line">        open_in_new: <span class="tag">&lt;<span class="name">%=theme.open_in_new%</span>&gt;</span></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改source/js/main.js中的第4到8行与11到16行为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadMobile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">require</span>([<span class="string">'/js/mobile.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">mobile</span>)</span>&#123;</div><div class="line">        mobile.init();</div><div class="line">        isMobileInit = <span class="literal">true</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadPC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">require</span>([<span class="string">'/js/pc.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">pc</span>)</span>&#123;</div><div class="line">        pc.init();</div><div class="line">        isPCInit = <span class="literal">true</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改source/js/main.js中的第58行和第75行分别为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'/fancybox/jquery.fancybox.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">pc</span>) </span>&#123;</div><div class="line"><span class="built_in">require</span>([<span class="string">'/js/jquery.lazyload.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div></pre></td></tr></table></figure></p>
<p>修改layout/_partial/mathjax.ejs中的第18行代码为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure></p>
<p>修改layout/_partial/after-footer.ejs中的第18行代码为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">js</span>('//<span class="attr">7.url.cn</span>/<span class="attr">edu</span>/<span class="attr">jslib</span>/<span class="attr">comb</span>/<span class="attr">require-2.1.6</span>,<span class="attr">jquery-1.9.1.min</span>') %&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.代码显示时有15px滚动条，解决办法为：<br>修改source/css/_partial/highlight.styl中的第66～69行代码为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-class">.line</span></div><div class="line">        <span class="selector-tag">font-size</span>: 15<span class="selector-tag">px</span></div><div class="line"><span class="selector-class">.gist</span></div></pre></td></tr></table></figure></p>
<p>4.左侧小房子标签栏为英文，修改为中文，解决办法为：<br>修改layout/_partial/left-col.ejs中的第48~57行代码为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tips-inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%if(theme.friends</span> &amp;&amp; <span class="attr">theme.friends.length</span> != <span class="string">0)&#123;%</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%if(theme.aboutme)&#123;%</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="如何发博文"><a href="#如何发博文" class="headerlink" title="如何发博文"></a>如何发博文</h1><p>Hexo支持markdown格式的文章。<br>md前面几行为定义博文的格式<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: post</div><div class="line">title: "hexo+github搭建个人博客"</div><div class="line">date: 2016-09-05 16:00</div><div class="line">comments: true</div><div class="line">tags: </div><div class="line"><span class="code">	- 随笔</span></div><div class="line"><span class="section">	- hexo</span></div><div class="line">---</div><div class="line">//</div><div class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>title为博文标题，date为时间（若不写则为博文部署的时间），tags则是标签名。more则为截断处。<br>部署完博文之后，在命令行输入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">g</span></div><div class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">d</span></div></pre></td></tr></table></figure></p>
<p>即可把博文部署到github上<br>以上就是我此次搭建博客过程中踩过的全部的坑，在此分享给大家。如果你发现这篇文章哪个地方有问题，可以通过我的email联系我。如果你喜欢这篇文章，follow我的<a href="https://github.com/xingbofeng" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;断断续续地弄这个博客也算是弄了很久了，突然就只是想写一篇文章来说说自己搭这玩意的过程和踩过的坑。&lt;br&gt;主题用的是yilia主题，总的来说这个主题虽然很清新但是由于现在存有一些bug需要自己手动修改代码。如果觉得过于麻烦的话建议使用另外的主题。（貌似有一款主题NexT很是受欢迎，读者可以自行尝试）&lt;br&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://xingbofeng.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://xingbofeng.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ES6里的常用新语法</title>
    <link href="http://xingbofeng.github.io/2016/08/27/ES6%E9%87%8C%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    <id>http://xingbofeng.github.io/2016/08/27/ES6里的常用新语法/</id>
    <published>2016-08-27T06:10:00.000Z</published>
    <updated>2016-09-05T10:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6版本已经被各大浏览器广泛支持，很多前端框架也已经使用 ES6，并且还有 Babel 可以做兼容处理，所以ES6已经进入了应用阶段<br>如果您对 ES6 还不太熟悉，下面几个简单的基础用法可以帮助您快速了解ES6<br>本文部分参考阮一峰老师的ES6教程<br>如需了解更多，请参考阮一峰老师的ES6教程：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a><br><a id="more"></a></p>
<h3 id="使用-let-和-const-声明变量"><a href="#使用-let-和-const-声明变量" class="headerlink" title="使用 let 和 const 声明变量"></a>使用 let 和 const 声明变量</h3><p>在传统的 ES5 代码中，变量的声明有两个主要问题</p>
<ul>
<li>缺少块作用域的支持</li>
<li>不能声明常量<br>ES6中，这两个问题被解决了，增加了两个新的关键字： let 和 const<br>块作用域使用 let<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">　<span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">　<span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">　&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>ES5 中 if 块内声明的变量 b 可以在块外访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in ES6</span></div><div class="line">　　<span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">　　<span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">　　	<span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line">　　<span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b is not defined</span></div></pre></td></tr></table></figure></p>
<p>ES6 中 if 块儿内使用 let 声明的变量 b 不能在块儿外访问<br>下面这段代码是常见的一个比较迷惑人的情况<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    a.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    value();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果是：5, 5, 5, 5, 5<br>使用 let 声明循环中的变量i<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    a.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    value();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果是：0, 1, 2, 3, 4<br>定义常量使用 const<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in ES6</span></div><div class="line">　　<span class="keyword">const</span> MY_CONSTANT = <span class="literal">true</span>;</div><div class="line">　　MY_CONSTANT = <span class="literal">false</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable</span></div></pre></td></tr></table></figure></p>
<p>ES6 中使用 const 声明的常量是不可以被改的</p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>下面这种字符串与变量的拼接方式是比较常见的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = ‘http:<span class="comment">//www.’ + domain + ‘.com/’ + path + ‘?’ + queryParams;</span></div></pre></td></tr></table></figure></p>
<p>ES6 提供了简洁的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="string">`http://www.<span class="subst">$&#123;domain&#125;</span>.com/<span class="subst">$&#123;path&#125;</span>?<span class="subst">$&#123;queryParams&#125;</span>`</span>;</div></pre></td></tr></table></figure></p>
<h3 id="新的-Set-和-Map-对象"><a href="#新的-Set-和-Map-对象" class="headerlink" title="新的 Set 和 Map 对象"></a>新的 Set 和 Map 对象</h3><p>ES5 中我们经常使用数组来存储动态数据，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> collection = [];</div><div class="line">　　collection.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">　　<span class="built_in">console</span>.log(collection); <span class="comment">// [ 1, 2, 1]</span></div></pre></td></tr></table></figure></p>
<p>其中包含了重复数据，如果不想有重复数据，需要使用代码判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToCollection</span>(<span class="params">collection, value</span>) </span>&#123;</div><div class="line">　　<span class="keyword">if</span> (collection.indexOf(value) &lt; <span class="number">0</span>) &#123;</div><div class="line">　　collection.push(value)</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6 提供了 Set 对象，处理这个情况就方便多了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> collection = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">collection.add(<span class="number">1</span>);</div><div class="line">collection.add(<span class="number">2</span>);</div><div class="line">collection.add(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(collection); <span class="comment">// Set &#123;1, 2&#125;</span></div></pre></td></tr></table></figure></p>
<p>Set 还可以方便的遍历集合，和处理集合中的数据<br>ES5 中通常使用 object 来存储键值对数据，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> collection = &#123;&#125;;</div><div class="line">collection.a = ‘abc’;</div><div class="line">collection.b = ‘xyz’;</div></pre></td></tr></table></figure></p>
<p>ES6 有了 Map，就可以这样使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> collection = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">collection.set(‘a’, ‘abc’);</div><div class="line">collection.set(‘b’, ‘xyz’);</div></pre></td></tr></table></figure></p>
<p>遍历也很简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">collection.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(key + <span class="string">":"</span> + value);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(collection.size);</div></pre></td></tr></table></figure></p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>ES6 中函数的参数有两个新特性</p>
<ul>
<li>默认值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">someObject</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(someObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里有可能会出现运行时错误，需要验证参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">someObject</span>) </span>&#123;</div><div class="line">　　<span class="keyword">if</span> (someObject === <span class="literal">undefined</span>) &#123;</div><div class="line">　　	someObject = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line">　　<span class="built_in">console</span>.log(someObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这类的验证代码非常普遍，ES6 中可以给参数设置默认值，就简单了很多<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">someObject = &#123;&#125;</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(someObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>对象解构<br>我们常会把一个包含键值对的对象做为参数传给某个函数，然后在函数内获取对象的各个属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">someObject</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> one = someObject.propOne;</div><div class="line">	<span class="built_in">console</span>.log(one);</div><div class="line">	<span class="keyword">var</span> two = someObject.propTwo;</div><div class="line">	<span class="built_in">console</span>.log(two);</div><div class="line">	<span class="keyword">var</span> three = someObject.propThree;</div><div class="line">	<span class="built_in">console</span>.log(three);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>ES6 可以让我们直接在参数中解构对象参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">&#123;propOne,propTwo,propThree&#125;</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(propOne);</div><div class="line">	<span class="built_in">console</span>.log(propTwo);</div><div class="line">	<span class="built_in">console</span>.log(propThree);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6允许使用“箭头”（=&gt;）定义函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = v =&gt; v;</div></pre></td></tr></table></figure></p>
<p>上面的箭头函数等同于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> v;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。<br>即，箭头前为函数名与参数，箭头后为函数体，若只有返回值，可简写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = () =&gt; <span class="number">5</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</div><div class="line"><span class="keyword">var</span> sum = (num1, num2) =&gt; num1 + num2;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = (num1, num2) =&gt; &#123; <span class="keyword">return</span> num1 + num2; &#125;</div></pre></td></tr></table></figure></p>
<p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getTempItem = id =&gt; (&#123; id: id, name: <span class="string">"Temp"</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>箭头函数可以与变量解构结合使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> full = (&#123; first, last &#125;) =&gt; first + <span class="string">' '</span> + last;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">full</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>箭头函数使得表达更加简洁。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isEven = n =&gt; n % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line"><span class="keyword">const</span> square = n =&gt; n * n;</div></pre></td></tr></table></figure></p>
<p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p>
<p>箭头函数的一个用处是简化回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(x =&gt; x * x);</div></pre></td></tr></table></figure></p>
<p>另一个例子是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 箭头函数写法</span></div><div class="line"><span class="keyword">var</span> result = values.sort((a, b) =&gt; a - b);</div></pre></td></tr></table></figure></p>
<p>下面是rest参数与箭头函数结合的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = (...nums) =&gt; nums;</div><div class="line"></div><div class="line">numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="comment">// [1,2,3,4,5]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> headAndTail = (head, ...tail) =&gt; [head, tail];</div><div class="line"></div><div class="line">headAndTail(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="comment">// [1,[2,3,4,5]]</span></div></pre></td></tr></table></figure></p>
<ul>
<li>使用注意点<br>箭头函数有几个使用注意点。</li>
</ul>
<ol>
<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>
<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>
<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。<br>上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</div><div class="line"></div><div class="line">foo.call(&#123; id: <span class="number">42</span> &#125;);</div><div class="line"><span class="comment">// id: 42</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到100毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>
<p>箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 箭头函数</span></div><div class="line">  setInterval(() =&gt; <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</div><div class="line">  <span class="comment">// 普通函数</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.s2++;</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</div><div class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</div><div class="line"><span class="comment">// s1: 3</span></div><div class="line"><span class="comment">// s2: 0</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100毫秒之后，timer.s1被更新了3次，而timer.s2一次都没更新。</p>
<p>箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM事件的回调函数封装在一个对象里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">  id: <span class="string">'123456'</span>,</div><div class="line"></div><div class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</div><div class="line">      event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type  + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面代码的init方法中，使用了箭头函数，这导致这个箭头函数里面的this，总是指向handler对象。否则，回调函数运行时，this.doSomething这一行会报错，因为此时this指向document对象。</p>
<p>this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。</p>
<p>所以，箭头函数转成ES5的代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, _this.id);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，转换后的ES5版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。</p>
<p>请问下面的代码之中有几个this？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> () =&gt; &#123;</div><div class="line">      <span class="keyword">return</span> () =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;id: <span class="number">1</span>&#125;);</div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;id: <span class="number">2</span>&#125;)()(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;id: <span class="number">3</span>&#125;)(); <span class="comment">// id: 1</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;id: <span class="number">4</span>&#125;); <span class="comment">// id: 1</span></div></pre></td></tr></table></figure></p>
<p>上面代码之中，只有一个this，就是函数foo的this，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this。即箭头函数“继承”了父级作用域的this。</p>
<p>除了this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'args:'</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">// args: [2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p>
<p>另外，由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    (() =&gt; <span class="keyword">this</span>.x).bind(&#123; x: <span class="string">'inner'</span> &#125;)()</div><div class="line">  ];</div><div class="line">&#125;).call(&#123; x: <span class="string">'outer'</span> &#125;);</div><div class="line"><span class="comment">// ['outer']</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，箭头函数没有自己的this，所以bind方法无效，内部的this指向外部的this。</p>
<p>长期以来，JavaScript语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。</p>
<p>理解了箭头函数，我自己也理解了为何在过去自己所写的javascript中的 var self=this;的写法将会不复存在了。</p>
<ol>
<li>函数绑定<br>箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。虽然该语法还是ES7的一个提案，但是Babel转码器已经支持。</li>
</ol>
<p>函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">foo::bar;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">bar.bind(foo);</div><div class="line"></div><div class="line">foo::bar(...arguments);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line">bar.apply(foo, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj::hasOwnProperty(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> method = obj::obj.foo;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> method = ::obj.foo;</div><div class="line"></div><div class="line"><span class="keyword">let</span> log = ::<span class="built_in">console</span>.log;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</div></pre></td></tr></table></figure></p>
<p>由于双冒号运算符返回的还是原对象，因此可以采用链式写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例一</span></div><div class="line"><span class="keyword">import</span> &#123; map, takeWhile, forEach &#125; <span class="keyword">from</span> <span class="string">"iterlib"</span>;</div><div class="line"></div><div class="line">getPlayers()</div><div class="line">::map(x =&gt; x.character())</div><div class="line">::takeWhile(x =&gt; x.strength &gt; <span class="number">100</span>)</div><div class="line">::forEach(x =&gt; <span class="built_in">console</span>.log(x));</div><div class="line"></div><div class="line"><span class="comment">// 例二</span></div><div class="line"><span class="keyword">let</span> &#123; find, html &#125; = jake;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"div.myClass"</span>)</div><div class="line">::find(<span class="string">"p"</span>)</div><div class="line">::html(<span class="string">"hahaha"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6版本已经被各大浏览器广泛支持，很多前端框架也已经使用 ES6，并且还有 Babel 可以做兼容处理，所以ES6已经进入了应用阶段&lt;br&gt;如果您对 ES6 还不太熟悉，下面几个简单的基础用法可以帮助您快速了解ES6&lt;br&gt;本文部分参考阮一峰老师的ES6教程&lt;br&gt;如需了解更多，请参考阮一峰老师的ES6教程：&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;ECMAScript 6入门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript封装的相关方法</title>
    <link href="http://xingbofeng.github.io/2016/08/19/javascript%E5%B0%81%E8%A3%85%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://xingbofeng.github.io/2016/08/19/javascript封装的相关方法/</id>
    <published>2016-08-18T18:26:00.000Z</published>
    <updated>2016-09-05T10:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>构造函数内部:<br>tips:<br>在构造函数内部通过this(用于指向当前对象)变量添加属性或方法,<br>此处定义的属性和方法都是为对象自身所拥有,<br>每次通过类创建实例时, this指向的属性都会得到相应的创建.<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">    <span class="comment">// 私有属性: 只能被【私有方法】和【特权方法】访问</span></div><div class="line">    <span class="keyword">var</span> contact = <span class="string">'xxxxx@qq.com'</span>;</div><div class="line">    <span class="keyword">var</span> number = <span class="string">'88888888'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 私有方法: 在构造函数里声明, 能被【私有函数】【特权方法】访问, 只能访问【私有方法】和【私有属性】</span></div><div class="line">    <span class="keyword">var</span> getInfo = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'My name is '</span> + name + <span class="string">', I’m a '</span> + sex + <span class="string">'!'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'My email is '</span> + contact);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 公有属性</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line"></div><div class="line">    <span class="comment">// 特权方法: 可以访问【私有属性】【私有方法】【公有属性】</span></div><div class="line">    <span class="keyword">this</span>.intro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        getInfo(name, sex);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.getContact = <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(number);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 构造器</span></div><div class="line">    <span class="keyword">this</span>.getContact(number);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>构造函数外部:<br>tips：<br>通过点语法定义的属性和方法不会添加到新创建的对象,因此类的实例无法访问, 只能通过类的自身(Person)访问.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类静态公有属性(对象不能访)</span></div><div class="line">Person.isChinese = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// 类静态公有方法(对象不能访问到)</span></div><div class="line">Person.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'what???'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>类的原型:<br>tips:<br>一种是为原型对象属性赋值, 另一种是将一个对象赋值给类的原型对象.<br>通过prototype继承的属性或方法是每个对象通过prototype访问到的,<br>所以每次通过类创建实例时, 这些属性和方法不会再次创建.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="comment">// 显示指定对象的constructor属性</span></div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    // 公有属性</div><div class="line">    hobby: 'reading',</div><div class="line">    // 公有方法</div><div class="line">    sport: function() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'run'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// test:</span></div><div class="line"><span class="keyword">var</span> tony = <span class="keyword">new</span> Person(<span class="string">'Tony'</span>, <span class="string">'man'</span>, <span class="string">'25'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'--- 访问【公有属性】 ---'</span>);</div><div class="line"><span class="built_in">console</span>.log(tony.name);            <span class="comment">// Tony</span></div><div class="line"><span class="built_in">console</span>.log(tony.sex);            <span class="comment">// man</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'--- 访问【特权方法】 ---'</span>);</div><div class="line"><span class="built_in">console</span>.log(tony.intro());        <span class="comment">// My name is Tony, I’m a man!</span></div><div class="line">                                <span class="comment">// My email is xxxxx@qq.com</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'--- 访问【类静态公有属性】和【类静态公有方法】 ---'</span>);</div><div class="line"><span class="built_in">console</span>.log(tony.isChinese);     <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(tony.speak());        <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'--- 通过类自身访问【类静态公有属性】和【类静态公有方法】 ---'</span>);</div><div class="line"><span class="built_in">console</span>.log(Person.isChinese);    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Person.speak());    <span class="comment">// what???</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'--- 访问【公有属性】及【公有方法】 ---'</span>);</div><div class="line"><span class="built_in">console</span>.log(tony.hobby);        <span class="comment">// reading</span></div><div class="line"><span class="built_in">console</span>.log(tony.sport());        <span class="comment">// run</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 通过闭包实现:</span></div><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 静态私有变量</span></div><div class="line">    <span class="keyword">var</span> isChinese = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 静态私有方法</span></div><div class="line">    <span class="keyword">var</span> speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 创建类</span></div><div class="line">    <span class="keyword">var</span> _person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 私有属性: 只能被【私有方法】和【特权方法】访问</span></div><div class="line">        <span class="keyword">var</span> contact = <span class="string">'xxxxx@qq.com'</span>;</div><div class="line">        <span class="keyword">var</span> number = <span class="string">'88888888'</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 私有方法: 在构造函数里声明, 能被【私有函数】【特权方法】访问, 只能访问【私有方法】和【私有属性】</span></div><div class="line">        <span class="keyword">var</span> getInfo = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'My name is '</span> + name + <span class="string">', I’m a '</span> + sex + <span class="string">'!'</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'My email is '</span> + contact);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 公有属性</span></div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line"></div><div class="line">        <span class="comment">// 特权方法: 可以访问</span></div><div class="line">        <span class="keyword">this</span>.intro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            getInfo(name, sex);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.getContact = <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(number);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 构造器</span></div><div class="line">        <span class="keyword">this</span>.getContact(number);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 构建原型</span></div><div class="line">    _person.prototype = &#123;</div><div class="line">        <span class="keyword">constructor</span>: _person,</div><div class="line">        // 公有属性</div><div class="line">        hobby: 'reading',</div><div class="line">        // 公有方法</div><div class="line">        sport: function() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'run'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 返回类</span></div><div class="line">    <span class="keyword">return</span> _person;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>类的两种写法<br>标准原型写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(me.constructor === Person);    <span class="comment">// true;</span></div></pre></td></tr></table></figure></p>
<p>对象字面量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(me.constructor === Person);    <span class="comment">// false;</span></div><div class="line"><span class="built_in">console</span>.log(me.constructor === <span class="built_in">Object</span>);    <span class="comment">// true;</span></div></pre></td></tr></table></figure></p>
<p>使用对象字面量的缺点:<br>使用对象字面形式改写原型对象改变了构造函数的属性,因此它现在指向Object而不是Person.<br>原因:<br>因为原型对象具有一个constructor属性,这是其他对象实例所没有的.<br>当一个函数被创建时,它的prototype属性也被创建, 且该原型对象的constructor属性指向该函数.<br>当使用对象字面形式改写原型对象Person.prototype时, 其constructor属性将被置为泛用对象Object.<br>解决:<br>在改写原型对象时手动重置其constructor属性.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对象字面量修正:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    sayHi: function() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi~'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(me.constructor === Person);    <span class="comment">// true;</span></div><div class="line"><span class="built_in">console</span>.log(me.constructor === <span class="built_in">Object</span>);    <span class="comment">// false;</span></div></pre></td></tr></table></figure></p>
<p>创建对象的安全模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tony = <span class="keyword">new</span> Person(<span class="string">'Tony'</span>, <span class="string">'boy'</span>);</div><div class="line"><span class="built_in">console</span>.log(tony.name);     <span class="comment">// Tony</span></div><div class="line"><span class="built_in">console</span>.log(tony.sex);        <span class="comment">// boy</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> anna = Person(<span class="string">'Anna'</span>, <span class="string">'girl'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);     <span class="comment">// Anna</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.sex);    <span class="comment">// girl</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(anna);        <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(anna.name);        <span class="comment">// Uncaught TypeError: Cannot read property 'name' of undefined</span></div></pre></td></tr></table></figure></p>
<p>tips:<br>new可以看作是对当前对象this不停地赋值,<br>如果没有new, 则会直接执行函数, 因为函数在全局作用域中执行了,<br>所以在全局作用域中this指向的当前对象就自然是全局变量,<br>属性都添加到window上面了;<br>另外一个则因为Person类中没有return语句,<br>则函数执行完没有返回执行结果. 所以实例对象为undefined;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建对象的安全模式</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>) </span>&#123;</div><div class="line">    <span class="comment">// 判断执行过程中this是否是当前对象(如果是说明是用new创建的)</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 否则重新创建这个对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name, sex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构造函数内部:&lt;br&gt;tips:&lt;br&gt;在构造函数内部通过this(用于指向当前对象)变量添加属性或方法,&lt;br&gt;此处定义的属性和方法都是为对象自身所拥有,&lt;br&gt;每次通过类创建实例时, this指向的属性都会得到相应的创建.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>UI组件之拖拽</title>
    <link href="http://xingbofeng.github.io/2016/08/19/UI%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%8B%96%E6%8B%BD/"/>
    <id>http://xingbofeng.github.io/2016/08/19/UI组件之拖拽/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2016-09-05T10:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装的第一个组件，主要是为了练习自己组件化的能力<br>原生js实现的js拖拽事件<br>使用时，直接创建对象即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> drag = <span class="keyword">new</span> Drag(<span class="string">'img'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>拖拽事件分为三个部分</p>
<ol>
<li><p>按下鼠标事件，此事件发生时，获取焦点位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Drag.prototype.mouseDown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.disX = e.clientX - <span class="keyword">this</span>.obj.offsetLeft;</div><div class="line">    <span class="keyword">this</span>.disY = e.clientY - <span class="keyword">this</span>.obj.offsetTop;</div><div class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line">        me.mouseMove(e);</div><div class="line">    &#125;;  </div><div class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        me.mouseUp();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>移动鼠标事件，此事件发生时，让元素位置随焦点位置改变而改变。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Drag.prototype.mouseMove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.obj.style.left = (e.clientX - <span class="keyword">this</span>.disX) + <span class="string">'px'</span>;</div><div class="line">    <span class="keyword">this</span>.obj.style.top = (e.clientY - <span class="keyword">this</span>.disY) + <span class="string">'px'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>释放鼠标事件，此事件发生时，清空前两个事件执行函数，以便下一次调用不出现不可预知的后果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Drag.prototype.mouseMove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">    <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://github.com/xingbofeng/drag.js/blob/gh-pages/demo.html" target="_blank" rel="external">猛戳此处查看demo</a><br><a href="https://github.com/xingbofeng/drag.js/blob/gh-pages/drag.js" target="_blank" rel="external">猛戳此处查看源码</a><br>附：screen,client,offset的差别<br><img src="https://github.com/xingbofeng/drag.js/blob/gh-pages/pic.png?raw=true" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己封装的第一个组件，主要是为了练习自己组件化的能力&lt;br&gt;原生js实现的js拖拽事件&lt;br&gt;使用时，直接创建对象即可&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; drag = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Drag(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://xingbofeng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="javascript" scheme="http://xingbofeng.github.io/tags/javascript/"/>
    
      <category term="组件" scheme="http://xingbofeng.github.io/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
</feed>
